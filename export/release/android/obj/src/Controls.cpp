// Generated by Haxe 4.2.2
#include <hxcpp.h>

#ifndef INCLUDED_Control
#include <Control.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_Device
#include <Device.h>
#endif
#ifndef INCLUDED_KeyboardScheme
#include <KeyboardScheme.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionAnalog
#include <flixel/input/actions/FlxActionAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputDigital
#include <flixel/input/actions/FlxActionInputDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputDigitalIFlxInput
#include <flixel/input/actions/FlxActionInputDigitalIFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionManager
#include <flixel/input/actions/FlxActionManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_ui_FlxActionMode
#include <ui/FlxActionMode.h>
#endif
#ifndef INCLUDED_ui_FlxDPadMode
#include <ui/FlxDPadMode.h>
#endif
#ifndef INCLUDED_ui_FlxVirtualPad
#include <ui/FlxVirtualPad.h>
#endif
#ifndef INCLUDED_ui_Hitbox
#include <ui/Hitbox.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_948b5caa279cd923_99_new,"Controls","new",0x4f8de688,"Controls.new","Controls.hx",99,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_131_get_UP,"Controls","get_UP",0xb958147c,"Controls.get_UP","Controls.hx",131,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_136_get_LEFT,"Controls","get_LEFT",0xc8e82468,"Controls.get_LEFT","Controls.hx",136,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_141_get_RIGHT,"Controls","get_RIGHT",0x7944c43b,"Controls.get_RIGHT","Controls.hx",141,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_146_get_DOWN,"Controls","get_DOWN",0xc3a614c3,"Controls.get_DOWN","Controls.hx",146,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_151_get_UP_P,"Controls","get_UP_P",0xcee37e8d,"Controls.get_UP_P","Controls.hx",151,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_156_get_LEFT_P,"Controls","get_LEFT_P",0xee886179,"Controls.get_LEFT_P","Controls.hx",156,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_161_get_RIGHT_P,"Controls","get_RIGHT_P",0xe72adc0c,"Controls.get_RIGHT_P","Controls.hx",161,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_166_get_DOWN_P,"Controls","get_DOWN_P",0x88e75e94,"Controls.get_DOWN_P","Controls.hx",166,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_171_get_UP_R,"Controls","get_UP_R",0xcee37e8f,"Controls.get_UP_R","Controls.hx",171,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_176_get_LEFT_R,"Controls","get_LEFT_R",0xee88617b,"Controls.get_LEFT_R","Controls.hx",176,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_181_get_RIGHT_R,"Controls","get_RIGHT_R",0xe72adc0e,"Controls.get_RIGHT_R","Controls.hx",181,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_186_get_DOWN_R,"Controls","get_DOWN_R",0x88e75e96,"Controls.get_DOWN_R","Controls.hx",186,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_191_get_ACCEPT,"Controls","get_ACCEPT",0x5fc72da9,"Controls.get_ACCEPT","Controls.hx",191,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_196_get_BACK,"Controls","get_BACK",0xc248f688,"Controls.get_BACK","Controls.hx",196,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_201_get_PAUSE,"Controls","get_PAUSE",0x4d388f55,"Controls.get_PAUSE","Controls.hx",201,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_206_get_RESET,"Controls","get_RESET",0x76a9022e,"Controls.get_RESET","Controls.hx",206,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_211_get_CHEAT,"Controls","get_CHEAT",0xd5974f72,"Controls.get_CHEAT","Controls.hx",211,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_275_addbutton,"Controls","addbutton",0x2bb946fb,"Controls.addbutton","Controls.hx",275,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_284_setHitBox,"Controls","setHitBox",0x85003ee2,"Controls.setHitBox","Controls.hx",284,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_292_setVirtualPad,"Controls","setVirtualPad",0x9df21a72,"Controls.setVirtualPad","Controls.hx",292,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_458_removeFlxInput,"Controls","removeFlxInput",0x0bf71974,"Controls.removeFlxInput","Controls.hx",458,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_479_addAndroidBack,"Controls","addAndroidBack",0x4c7f372d,"Controls.addAndroidBack","Controls.hx",479,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_493_update,"Controls","update",0x9d2db8e1,"Controls.update","Controls.hx",493,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_503_checkByName,"Controls","checkByName",0xbe587cd2,"Controls.checkByName","Controls.hx",503,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_507_getDialogueName,"Controls","getDialogueName",0xe1263f61,"Controls.getDialogueName","Controls.hx",507,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_519_getDialogueNameFromToken,"Controls","getDialogueNameFromToken",0x6458998e,"Controls.getDialogueNameFromToken","Controls.hx",519,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_524_getActionFromControl,"Controls","getActionFromControl",0xa2e9ae5f,"Controls.getActionFromControl","Controls.hx",524,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_552_forEachBound,"Controls","forEachBound",0x9a98930c,"Controls.forEachBound","Controls.hx",552,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_584_replaceBinding,"Controls","replaceBinding",0x45096449,"Controls.replaceBinding","Controls.hx",584,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_605_copyFrom,"Controls","copyFrom",0xdf1da497,"Controls.copyFrom","Controls.hx",605,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_652_copyTo,"Controls","copyTo",0xdf5b4f68,"Controls.copyTo","Controls.hx",652,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_657_mergeKeyboardScheme,"Controls","mergeKeyboardScheme",0x61e2372c,"Controls.mergeKeyboardScheme","Controls.hx",657,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_676_bindKeys,"Controls","bindKeys",0xcb8dbf29,"Controls.bindKeys","Controls.hx",676,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_689_unbindKeys,"Controls","unbindKeys",0xec4b8c82,"Controls.unbindKeys","Controls.hx",689,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_715_setKeyboardScheme,"Controls","setKeyboardScheme",0x039bdb96,"Controls.setKeyboardScheme","Controls.hx",715,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_791_loadKeyBinds,"Controls","loadKeyBinds",0x1c488715,"Controls.loadKeyBinds","Controls.hx",791,0x0ab041e8)
static const int _hx_array_data_116e4296_197[] = {
	(int)90,(int)32,(int)13,
};
static const int _hx_array_data_116e4296_198[] = {
	(int)8,(int)27,
};
static const int _hx_array_data_116e4296_199[] = {
	(int)80,(int)13,(int)27,
};
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_809_removeKeyboard,"Controls","removeKeyboard",0xd2dac3e3,"Controls.removeKeyboard","Controls.hx",809,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_822_addGamepad,"Controls","addGamepad",0xa2c68b58,"Controls.addGamepad","Controls.hx",822,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_835_addGamepadLiteral,"Controls","addGamepadLiteral",0x50b4e0f7,"Controls.addGamepadLiteral","Controls.hx",835,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_848_removeGamepad,"Controls","removeGamepad",0xfdf294e5,"Controls.removeGamepad","Controls.hx",848,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_866_addDefaultGamepad,"Controls","addDefaultGamepad",0xaa5e6409,"Controls.addDefaultGamepad","Controls.hx",866,0x0ab041e8)
static const int _hx_array_data_116e4296_263[] = {
	(int)0,
};
static const int _hx_array_data_116e4296_264[] = {
	(int)1,
};
static const int _hx_array_data_116e4296_265[] = {
	(int)11,(int)34,
};
static const int _hx_array_data_116e4296_266[] = {
	(int)12,(int)36,
};
static const int _hx_array_data_116e4296_267[] = {
	(int)13,(int)37,
};
static const int _hx_array_data_116e4296_268[] = {
	(int)14,(int)35,
};
static const int _hx_array_data_116e4296_269[] = {
	(int)7,
};
static const int _hx_array_data_116e4296_270[] = {
	(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_900_bindButtons,"Controls","bindButtons",0x94dee42c,"Controls.bindButtons","Controls.hx",900,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_913_unbindButtons,"Controls","unbindButtons",0x83d33473,"Controls.unbindButtons","Controls.hx",913,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_937_getInputsFor,"Controls","getInputsFor",0xa3571ac2,"Controls.getInputsFor","Controls.hx",937,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_961_removeDevice,"Controls","removeDevice",0x4c1b5cd2,"Controls.removeDevice","Controls.hx",961,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_539_init,"Controls","init",0x495487e8,"Controls.init","Controls.hx",539,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_697_addKeys,"Controls","addKeys",0xd0486edd,"Controls.addKeys","Controls.hx",697,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_702_removeKeys,"Controls","removeKeys",0x75dc9b30,"Controls.removeKeys","Controls.hx",702,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_921_addButtons,"Controls","addButtons",0xe3b5fcf8,"Controls.addButtons","Controls.hx",921,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_926_removeButtons,"Controls","removeButtons",0x3ee20685,"Controls.removeButtons","Controls.hx",926,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_972_isDevice,"Controls","isDevice",0xe09e10f8,"Controls.isDevice","Controls.hx",972,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_981_isGamepad,"Controls","isGamepad",0x5bcd81ff,"Controls.isGamepad","Controls.hx",981,0x0ab041e8)

void Controls_obj::__construct(::String name, ::KeyboardScheme __o_scheme){
            		 ::KeyboardScheme scheme = __o_scheme;
            		if (::hx::IsNull(__o_scheme)) scheme = ::KeyboardScheme_obj::None_dyn();
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_99_new)
HXLINE( 273)		this->trackedinputs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 126)		this->keyboardScheme = ::KeyboardScheme_obj::None_dyn();
HXLINE( 125)		this->gamepadsAdded = ::Array_obj< int >::__new(0);
HXLINE( 120)		this->byName =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 117)		this->_cheat =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("cheat",13,97,b6,45),null());
HXLINE( 116)		this->_reset =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("reset",cf,49,c8,e6),null());
HXLINE( 115)		this->_pause =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("pause",f6,d6,57,bd),null());
HXLINE( 114)		this->_back =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("back",27,da,10,41),null());
HXLINE( 113)		this->_accept =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("accept",08,93,06,0b),null());
HXLINE( 112)		this->_downR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down-release",9c,bf,5b,fc),null());
HXLINE( 111)		this->_rightR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right-release",16,dd,28,fb),null());
HXLINE( 110)		this->_leftR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left-release",41,7c,5d,2e),null());
HXLINE( 109)		this->_upR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up-release",95,4e,72,92),null());
HXLINE( 108)		this->_downP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down-press",18,fe,06,cf),null());
HXLINE( 107)		this->_rightP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right-press",12,e9,87,fb),null());
HXLINE( 106)		this->_leftP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left-press",7d,d7,13,c1),null());
HXLINE( 105)		this->_upP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up-press",d1,ac,09,1c),null());
HXLINE( 104)		this->_down =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down",62,f8,6d,42),null());
HXLINE( 103)		this->_right =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right",dc,0b,64,e9),null());
HXLINE( 102)		this->_left =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left",07,08,b0,47),null());
HXLINE( 101)		this->_up =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up",5b,66,00,00),null());
HXLINE( 216)		super::__construct(name,null(),null());
HXLINE( 218)		this->add(this->_up);
HXLINE( 219)		this->add(this->_left);
HXLINE( 220)		this->add(this->_right);
HXLINE( 221)		this->add(this->_down);
HXLINE( 222)		this->add(this->_upP);
HXLINE( 223)		this->add(this->_leftP);
HXLINE( 224)		this->add(this->_rightP);
HXLINE( 225)		this->add(this->_downP);
HXLINE( 226)		this->add(this->_upR);
HXLINE( 227)		this->add(this->_leftR);
HXLINE( 228)		this->add(this->_rightR);
HXLINE( 229)		this->add(this->_downR);
HXLINE( 230)		this->add(this->_accept);
HXLINE( 231)		this->add(this->_back);
HXLINE( 232)		this->add(this->_pause);
HXLINE( 233)		this->add(this->_reset);
HXLINE( 234)		this->add(this->_cheat);
HXLINE( 236)		{
HXLINE( 236)			int _g = 0;
HXDLIN( 236)			::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 236)			while((_g < _g1->length)){
HXLINE( 236)				 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 236)				_g = (_g + 1);
HXLINE( 237)				this->byName->set(action->name,action);
            			}
            		}
HXLINE( 239)		this->setKeyboardScheme(scheme,false);
            	}

Dynamic Controls_obj::__CreateEmpty() { return new Controls_obj; }

void *Controls_obj::_hx_vtable = 0;

Dynamic Controls_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Controls_obj > _hx_result = new Controls_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Controls_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x315ddd0d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x315ddd0d;
	} else {
		return inClassId==(int)0x6cff3556;
	}
}

bool Controls_obj::get_UP(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_131_get_UP)
HXDLIN( 131)		return this->_up->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP,return )

bool Controls_obj::get_LEFT(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_136_get_LEFT)
HXDLIN( 136)		return this->_left->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT,return )

bool Controls_obj::get_RIGHT(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_141_get_RIGHT)
HXDLIN( 141)		return this->_right->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT,return )

bool Controls_obj::get_DOWN(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_146_get_DOWN)
HXDLIN( 146)		return this->_down->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN,return )

bool Controls_obj::get_UP_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_151_get_UP_P)
HXDLIN( 151)		return this->_upP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP_P,return )

bool Controls_obj::get_LEFT_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_156_get_LEFT_P)
HXDLIN( 156)		return this->_leftP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT_P,return )

bool Controls_obj::get_RIGHT_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_161_get_RIGHT_P)
HXDLIN( 161)		return this->_rightP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT_P,return )

bool Controls_obj::get_DOWN_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_166_get_DOWN_P)
HXDLIN( 166)		return this->_downP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN_P,return )

bool Controls_obj::get_UP_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_171_get_UP_R)
HXDLIN( 171)		return this->_upR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP_R,return )

bool Controls_obj::get_LEFT_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_176_get_LEFT_R)
HXDLIN( 176)		return this->_leftR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT_R,return )

bool Controls_obj::get_RIGHT_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_181_get_RIGHT_R)
HXDLIN( 181)		return this->_rightR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT_R,return )

bool Controls_obj::get_DOWN_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_186_get_DOWN_R)
HXDLIN( 186)		return this->_downR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN_R,return )

bool Controls_obj::get_ACCEPT(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_191_get_ACCEPT)
HXDLIN( 191)		return this->_accept->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_ACCEPT,return )

bool Controls_obj::get_BACK(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_196_get_BACK)
HXDLIN( 196)		return this->_back->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_BACK,return )

bool Controls_obj::get_PAUSE(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_201_get_PAUSE)
HXDLIN( 201)		return this->_pause->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_PAUSE,return )

bool Controls_obj::get_RESET(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_206_get_RESET)
HXDLIN( 206)		return this->_reset->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RESET,return )

bool Controls_obj::get_CHEAT(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_211_get_CHEAT)
HXDLIN( 211)		return this->_cheat->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_CHEAT,return )

void Controls_obj::addbutton( ::flixel::input::actions::FlxActionDigital action, ::flixel::ui::FlxButton button,int state){
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_275_addbutton)
HXLINE( 276)		 ::flixel::input::actions::FlxActionInputDigitalIFlxInput input =  ::flixel::input::actions::FlxActionInputDigitalIFlxInput_obj::__alloc( HX_CTX ,button,state);
HXLINE( 277)		this->trackedinputs->push(input);
HXLINE( 279)		action->add(input);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,addbutton,(void))

void Controls_obj::setHitBox( ::ui::Hitbox hitbox){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_284_setHitBox)
HXDLIN( 284)		 ::Controls _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 285)		switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            			case (int)0: {
HXLINE( 285)				_gthis->addbutton(this->_up,hitbox->buttonUp,1);
HXDLIN( 285)				_gthis->addbutton(this->_upP,hitbox->buttonUp,2);
HXDLIN( 285)				_gthis->addbutton(this->_upR,hitbox->buttonUp,-1);
            			}
            			break;
            			case (int)1: {
HXLINE( 285)				_gthis->addbutton(this->_left,hitbox->buttonUp,1);
HXDLIN( 285)				_gthis->addbutton(this->_leftP,hitbox->buttonUp,2);
HXDLIN( 285)				_gthis->addbutton(this->_leftR,hitbox->buttonUp,-1);
            			}
            			break;
            			case (int)2: {
HXLINE( 285)				_gthis->addbutton(this->_right,hitbox->buttonUp,1);
HXDLIN( 285)				_gthis->addbutton(this->_rightP,hitbox->buttonUp,2);
HXDLIN( 285)				_gthis->addbutton(this->_rightR,hitbox->buttonUp,-1);
            			}
            			break;
            			case (int)3: {
HXLINE( 285)				_gthis->addbutton(this->_down,hitbox->buttonUp,1);
HXDLIN( 285)				_gthis->addbutton(this->_downP,hitbox->buttonUp,2);
HXDLIN( 285)				_gthis->addbutton(this->_downR,hitbox->buttonUp,-1);
            			}
            			break;
            			case (int)4: {
HXLINE( 285)				_gthis->addbutton(this->_reset,hitbox->buttonUp,2);
            			}
            			break;
            			case (int)5: {
HXLINE( 285)				_gthis->addbutton(this->_accept,hitbox->buttonUp,2);
            			}
            			break;
            			case (int)6: {
HXLINE( 285)				_gthis->addbutton(this->_back,hitbox->buttonUp,2);
            			}
            			break;
            			case (int)7: {
HXLINE( 285)				_gthis->addbutton(this->_pause,hitbox->buttonUp,2);
            			}
            			break;
            			case (int)8: {
HXLINE( 285)				_gthis->addbutton(this->_cheat,hitbox->buttonUp,2);
            			}
            			break;
            		}
HXLINE( 286)		switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            			case (int)0: {
HXLINE( 286)				_gthis->addbutton(this->_up,hitbox->buttonDown,1);
HXDLIN( 286)				_gthis->addbutton(this->_upP,hitbox->buttonDown,2);
HXDLIN( 286)				_gthis->addbutton(this->_upR,hitbox->buttonDown,-1);
            			}
            			break;
            			case (int)1: {
HXLINE( 286)				_gthis->addbutton(this->_left,hitbox->buttonDown,1);
HXDLIN( 286)				_gthis->addbutton(this->_leftP,hitbox->buttonDown,2);
HXDLIN( 286)				_gthis->addbutton(this->_leftR,hitbox->buttonDown,-1);
            			}
            			break;
            			case (int)2: {
HXLINE( 286)				_gthis->addbutton(this->_right,hitbox->buttonDown,1);
HXDLIN( 286)				_gthis->addbutton(this->_rightP,hitbox->buttonDown,2);
HXDLIN( 286)				_gthis->addbutton(this->_rightR,hitbox->buttonDown,-1);
            			}
            			break;
            			case (int)3: {
HXLINE( 286)				_gthis->addbutton(this->_down,hitbox->buttonDown,1);
HXDLIN( 286)				_gthis->addbutton(this->_downP,hitbox->buttonDown,2);
HXDLIN( 286)				_gthis->addbutton(this->_downR,hitbox->buttonDown,-1);
            			}
            			break;
            			case (int)4: {
HXLINE( 286)				_gthis->addbutton(this->_reset,hitbox->buttonDown,2);
            			}
            			break;
            			case (int)5: {
HXLINE( 286)				_gthis->addbutton(this->_accept,hitbox->buttonDown,2);
            			}
            			break;
            			case (int)6: {
HXLINE( 286)				_gthis->addbutton(this->_back,hitbox->buttonDown,2);
            			}
            			break;
            			case (int)7: {
HXLINE( 286)				_gthis->addbutton(this->_pause,hitbox->buttonDown,2);
            			}
            			break;
            			case (int)8: {
HXLINE( 286)				_gthis->addbutton(this->_cheat,hitbox->buttonDown,2);
            			}
            			break;
            		}
HXLINE( 287)		switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            			case (int)0: {
HXLINE( 287)				_gthis->addbutton(this->_up,hitbox->buttonLeft,1);
HXDLIN( 287)				_gthis->addbutton(this->_upP,hitbox->buttonLeft,2);
HXDLIN( 287)				_gthis->addbutton(this->_upR,hitbox->buttonLeft,-1);
            			}
            			break;
            			case (int)1: {
HXLINE( 287)				_gthis->addbutton(this->_left,hitbox->buttonLeft,1);
HXDLIN( 287)				_gthis->addbutton(this->_leftP,hitbox->buttonLeft,2);
HXDLIN( 287)				_gthis->addbutton(this->_leftR,hitbox->buttonLeft,-1);
            			}
            			break;
            			case (int)2: {
HXLINE( 287)				_gthis->addbutton(this->_right,hitbox->buttonLeft,1);
HXDLIN( 287)				_gthis->addbutton(this->_rightP,hitbox->buttonLeft,2);
HXDLIN( 287)				_gthis->addbutton(this->_rightR,hitbox->buttonLeft,-1);
            			}
            			break;
            			case (int)3: {
HXLINE( 287)				_gthis->addbutton(this->_down,hitbox->buttonLeft,1);
HXDLIN( 287)				_gthis->addbutton(this->_downP,hitbox->buttonLeft,2);
HXDLIN( 287)				_gthis->addbutton(this->_downR,hitbox->buttonLeft,-1);
            			}
            			break;
            			case (int)4: {
HXLINE( 287)				_gthis->addbutton(this->_reset,hitbox->buttonLeft,2);
            			}
            			break;
            			case (int)5: {
HXLINE( 287)				_gthis->addbutton(this->_accept,hitbox->buttonLeft,2);
            			}
            			break;
            			case (int)6: {
HXLINE( 287)				_gthis->addbutton(this->_back,hitbox->buttonLeft,2);
            			}
            			break;
            			case (int)7: {
HXLINE( 287)				_gthis->addbutton(this->_pause,hitbox->buttonLeft,2);
            			}
            			break;
            			case (int)8: {
HXLINE( 287)				_gthis->addbutton(this->_cheat,hitbox->buttonLeft,2);
            			}
            			break;
            		}
HXLINE( 288)		switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            			case (int)0: {
HXLINE( 288)				_gthis->addbutton(this->_up,hitbox->buttonRight,1);
HXDLIN( 288)				_gthis->addbutton(this->_upP,hitbox->buttonRight,2);
HXDLIN( 288)				_gthis->addbutton(this->_upR,hitbox->buttonRight,-1);
            			}
            			break;
            			case (int)1: {
HXLINE( 288)				_gthis->addbutton(this->_left,hitbox->buttonRight,1);
HXDLIN( 288)				_gthis->addbutton(this->_leftP,hitbox->buttonRight,2);
HXDLIN( 288)				_gthis->addbutton(this->_leftR,hitbox->buttonRight,-1);
            			}
            			break;
            			case (int)2: {
HXLINE( 288)				_gthis->addbutton(this->_right,hitbox->buttonRight,1);
HXDLIN( 288)				_gthis->addbutton(this->_rightP,hitbox->buttonRight,2);
HXDLIN( 288)				_gthis->addbutton(this->_rightR,hitbox->buttonRight,-1);
            			}
            			break;
            			case (int)3: {
HXLINE( 288)				_gthis->addbutton(this->_down,hitbox->buttonRight,1);
HXDLIN( 288)				_gthis->addbutton(this->_downP,hitbox->buttonRight,2);
HXDLIN( 288)				_gthis->addbutton(this->_downR,hitbox->buttonRight,-1);
            			}
            			break;
            			case (int)4: {
HXLINE( 288)				_gthis->addbutton(this->_reset,hitbox->buttonRight,2);
            			}
            			break;
            			case (int)5: {
HXLINE( 288)				_gthis->addbutton(this->_accept,hitbox->buttonRight,2);
            			}
            			break;
            			case (int)6: {
HXLINE( 288)				_gthis->addbutton(this->_back,hitbox->buttonRight,2);
            			}
            			break;
            			case (int)7: {
HXLINE( 288)				_gthis->addbutton(this->_pause,hitbox->buttonRight,2);
            			}
            			break;
            			case (int)8: {
HXLINE( 288)				_gthis->addbutton(this->_cheat,hitbox->buttonRight,2);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,setHitBox,(void))

void Controls_obj::setVirtualPad( ::ui::FlxVirtualPad virtualPad, ::ui::FlxDPadMode DPad, ::ui::FlxActionMode Action){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_292_setVirtualPad)
HXDLIN( 292)		 ::Controls _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 293)		if (::hx::IsNull( DPad )) {
HXLINE( 294)			DPad = ::ui::FlxDPadMode_obj::NONE_dyn();
            		}
HXLINE( 295)		if (::hx::IsNull( Action )) {
HXLINE( 296)			Action = ::ui::FlxActionMode_obj::NONE_dyn();
            		}
HXLINE( 298)		switch((int)(DPad->_hx_getIndex())){
            			case (int)0: {
            			}
            			break;
            			case (int)1: {
HXLINE( 301)				switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 301)						_gthis->addbutton(this->_up,virtualPad->buttonUp,1);
HXDLIN( 301)						_gthis->addbutton(this->_upP,virtualPad->buttonUp,2);
HXDLIN( 301)						_gthis->addbutton(this->_upR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 301)						_gthis->addbutton(this->_left,virtualPad->buttonUp,1);
HXDLIN( 301)						_gthis->addbutton(this->_leftP,virtualPad->buttonUp,2);
HXDLIN( 301)						_gthis->addbutton(this->_leftR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 301)						_gthis->addbutton(this->_right,virtualPad->buttonUp,1);
HXDLIN( 301)						_gthis->addbutton(this->_rightP,virtualPad->buttonUp,2);
HXDLIN( 301)						_gthis->addbutton(this->_rightR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 301)						_gthis->addbutton(this->_down,virtualPad->buttonUp,1);
HXDLIN( 301)						_gthis->addbutton(this->_downP,virtualPad->buttonUp,2);
HXDLIN( 301)						_gthis->addbutton(this->_downR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 301)						_gthis->addbutton(this->_reset,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 301)						_gthis->addbutton(this->_accept,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 301)						_gthis->addbutton(this->_back,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 301)						_gthis->addbutton(this->_pause,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 301)						_gthis->addbutton(this->_cheat,virtualPad->buttonUp,2);
            					}
            					break;
            				}
HXLINE( 302)				switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 302)						_gthis->addbutton(this->_up,virtualPad->buttonDown,1);
HXDLIN( 302)						_gthis->addbutton(this->_upP,virtualPad->buttonDown,2);
HXDLIN( 302)						_gthis->addbutton(this->_upR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 302)						_gthis->addbutton(this->_left,virtualPad->buttonDown,1);
HXDLIN( 302)						_gthis->addbutton(this->_leftP,virtualPad->buttonDown,2);
HXDLIN( 302)						_gthis->addbutton(this->_leftR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 302)						_gthis->addbutton(this->_right,virtualPad->buttonDown,1);
HXDLIN( 302)						_gthis->addbutton(this->_rightP,virtualPad->buttonDown,2);
HXDLIN( 302)						_gthis->addbutton(this->_rightR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 302)						_gthis->addbutton(this->_down,virtualPad->buttonDown,1);
HXDLIN( 302)						_gthis->addbutton(this->_downP,virtualPad->buttonDown,2);
HXDLIN( 302)						_gthis->addbutton(this->_downR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 302)						_gthis->addbutton(this->_reset,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 302)						_gthis->addbutton(this->_accept,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 302)						_gthis->addbutton(this->_back,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 302)						_gthis->addbutton(this->_pause,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 302)						_gthis->addbutton(this->_cheat,virtualPad->buttonDown,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 304)				switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 304)						_gthis->addbutton(this->_up,virtualPad->buttonLeft,1);
HXDLIN( 304)						_gthis->addbutton(this->_upP,virtualPad->buttonLeft,2);
HXDLIN( 304)						_gthis->addbutton(this->_upR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 304)						_gthis->addbutton(this->_left,virtualPad->buttonLeft,1);
HXDLIN( 304)						_gthis->addbutton(this->_leftP,virtualPad->buttonLeft,2);
HXDLIN( 304)						_gthis->addbutton(this->_leftR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 304)						_gthis->addbutton(this->_right,virtualPad->buttonLeft,1);
HXDLIN( 304)						_gthis->addbutton(this->_rightP,virtualPad->buttonLeft,2);
HXDLIN( 304)						_gthis->addbutton(this->_rightR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 304)						_gthis->addbutton(this->_down,virtualPad->buttonLeft,1);
HXDLIN( 304)						_gthis->addbutton(this->_downP,virtualPad->buttonLeft,2);
HXDLIN( 304)						_gthis->addbutton(this->_downR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 304)						_gthis->addbutton(this->_reset,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 304)						_gthis->addbutton(this->_accept,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 304)						_gthis->addbutton(this->_back,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 304)						_gthis->addbutton(this->_pause,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 304)						_gthis->addbutton(this->_cheat,virtualPad->buttonLeft,2);
            					}
            					break;
            				}
HXLINE( 305)				switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 305)						_gthis->addbutton(this->_up,virtualPad->buttonRight,1);
HXDLIN( 305)						_gthis->addbutton(this->_upP,virtualPad->buttonRight,2);
HXDLIN( 305)						_gthis->addbutton(this->_upR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 305)						_gthis->addbutton(this->_left,virtualPad->buttonRight,1);
HXDLIN( 305)						_gthis->addbutton(this->_leftP,virtualPad->buttonRight,2);
HXDLIN( 305)						_gthis->addbutton(this->_leftR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 305)						_gthis->addbutton(this->_right,virtualPad->buttonRight,1);
HXDLIN( 305)						_gthis->addbutton(this->_rightP,virtualPad->buttonRight,2);
HXDLIN( 305)						_gthis->addbutton(this->_rightR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 305)						_gthis->addbutton(this->_down,virtualPad->buttonRight,1);
HXDLIN( 305)						_gthis->addbutton(this->_downP,virtualPad->buttonRight,2);
HXDLIN( 305)						_gthis->addbutton(this->_downR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 305)						_gthis->addbutton(this->_reset,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 305)						_gthis->addbutton(this->_accept,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 305)						_gthis->addbutton(this->_back,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 305)						_gthis->addbutton(this->_pause,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 305)						_gthis->addbutton(this->_cheat,virtualPad->buttonRight,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 307)				switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 307)						_gthis->addbutton(this->_up,virtualPad->buttonUp,1);
HXDLIN( 307)						_gthis->addbutton(this->_upP,virtualPad->buttonUp,2);
HXDLIN( 307)						_gthis->addbutton(this->_upR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 307)						_gthis->addbutton(this->_left,virtualPad->buttonUp,1);
HXDLIN( 307)						_gthis->addbutton(this->_leftP,virtualPad->buttonUp,2);
HXDLIN( 307)						_gthis->addbutton(this->_leftR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 307)						_gthis->addbutton(this->_right,virtualPad->buttonUp,1);
HXDLIN( 307)						_gthis->addbutton(this->_rightP,virtualPad->buttonUp,2);
HXDLIN( 307)						_gthis->addbutton(this->_rightR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 307)						_gthis->addbutton(this->_down,virtualPad->buttonUp,1);
HXDLIN( 307)						_gthis->addbutton(this->_downP,virtualPad->buttonUp,2);
HXDLIN( 307)						_gthis->addbutton(this->_downR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 307)						_gthis->addbutton(this->_reset,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 307)						_gthis->addbutton(this->_accept,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 307)						_gthis->addbutton(this->_back,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 307)						_gthis->addbutton(this->_pause,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 307)						_gthis->addbutton(this->_cheat,virtualPad->buttonUp,2);
            					}
            					break;
            				}
HXLINE( 308)				switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 308)						_gthis->addbutton(this->_up,virtualPad->buttonLeft,1);
HXDLIN( 308)						_gthis->addbutton(this->_upP,virtualPad->buttonLeft,2);
HXDLIN( 308)						_gthis->addbutton(this->_upR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 308)						_gthis->addbutton(this->_left,virtualPad->buttonLeft,1);
HXDLIN( 308)						_gthis->addbutton(this->_leftP,virtualPad->buttonLeft,2);
HXDLIN( 308)						_gthis->addbutton(this->_leftR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 308)						_gthis->addbutton(this->_right,virtualPad->buttonLeft,1);
HXDLIN( 308)						_gthis->addbutton(this->_rightP,virtualPad->buttonLeft,2);
HXDLIN( 308)						_gthis->addbutton(this->_rightR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 308)						_gthis->addbutton(this->_down,virtualPad->buttonLeft,1);
HXDLIN( 308)						_gthis->addbutton(this->_downP,virtualPad->buttonLeft,2);
HXDLIN( 308)						_gthis->addbutton(this->_downR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 308)						_gthis->addbutton(this->_reset,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 308)						_gthis->addbutton(this->_accept,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 308)						_gthis->addbutton(this->_back,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 308)						_gthis->addbutton(this->_pause,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 308)						_gthis->addbutton(this->_cheat,virtualPad->buttonLeft,2);
            					}
            					break;
            				}
HXLINE( 309)				switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 309)						_gthis->addbutton(this->_up,virtualPad->buttonRight,1);
HXDLIN( 309)						_gthis->addbutton(this->_upP,virtualPad->buttonRight,2);
HXDLIN( 309)						_gthis->addbutton(this->_upR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 309)						_gthis->addbutton(this->_left,virtualPad->buttonRight,1);
HXDLIN( 309)						_gthis->addbutton(this->_leftP,virtualPad->buttonRight,2);
HXDLIN( 309)						_gthis->addbutton(this->_leftR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 309)						_gthis->addbutton(this->_right,virtualPad->buttonRight,1);
HXDLIN( 309)						_gthis->addbutton(this->_rightP,virtualPad->buttonRight,2);
HXDLIN( 309)						_gthis->addbutton(this->_rightR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 309)						_gthis->addbutton(this->_down,virtualPad->buttonRight,1);
HXDLIN( 309)						_gthis->addbutton(this->_downP,virtualPad->buttonRight,2);
HXDLIN( 309)						_gthis->addbutton(this->_downR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 309)						_gthis->addbutton(this->_reset,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 309)						_gthis->addbutton(this->_accept,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 309)						_gthis->addbutton(this->_back,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 309)						_gthis->addbutton(this->_pause,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 309)						_gthis->addbutton(this->_cheat,virtualPad->buttonRight,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 315)				switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 315)						_gthis->addbutton(this->_up,virtualPad->buttonLeft,1);
HXDLIN( 315)						_gthis->addbutton(this->_upP,virtualPad->buttonLeft,2);
HXDLIN( 315)						_gthis->addbutton(this->_upR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 315)						_gthis->addbutton(this->_left,virtualPad->buttonLeft,1);
HXDLIN( 315)						_gthis->addbutton(this->_leftP,virtualPad->buttonLeft,2);
HXDLIN( 315)						_gthis->addbutton(this->_leftR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 315)						_gthis->addbutton(this->_right,virtualPad->buttonLeft,1);
HXDLIN( 315)						_gthis->addbutton(this->_rightP,virtualPad->buttonLeft,2);
HXDLIN( 315)						_gthis->addbutton(this->_rightR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 315)						_gthis->addbutton(this->_down,virtualPad->buttonLeft,1);
HXDLIN( 315)						_gthis->addbutton(this->_downP,virtualPad->buttonLeft,2);
HXDLIN( 315)						_gthis->addbutton(this->_downR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 315)						_gthis->addbutton(this->_reset,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 315)						_gthis->addbutton(this->_accept,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 315)						_gthis->addbutton(this->_back,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 315)						_gthis->addbutton(this->_pause,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 315)						_gthis->addbutton(this->_cheat,virtualPad->buttonLeft,2);
            					}
            					break;
            				}
HXLINE( 316)				switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 316)						_gthis->addbutton(this->_up,virtualPad->buttonUp,1);
HXDLIN( 316)						_gthis->addbutton(this->_upP,virtualPad->buttonUp,2);
HXDLIN( 316)						_gthis->addbutton(this->_upR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 316)						_gthis->addbutton(this->_left,virtualPad->buttonUp,1);
HXDLIN( 316)						_gthis->addbutton(this->_leftP,virtualPad->buttonUp,2);
HXDLIN( 316)						_gthis->addbutton(this->_leftR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 316)						_gthis->addbutton(this->_right,virtualPad->buttonUp,1);
HXDLIN( 316)						_gthis->addbutton(this->_rightP,virtualPad->buttonUp,2);
HXDLIN( 316)						_gthis->addbutton(this->_rightR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 316)						_gthis->addbutton(this->_down,virtualPad->buttonUp,1);
HXDLIN( 316)						_gthis->addbutton(this->_downP,virtualPad->buttonUp,2);
HXDLIN( 316)						_gthis->addbutton(this->_downR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 316)						_gthis->addbutton(this->_reset,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 316)						_gthis->addbutton(this->_accept,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 316)						_gthis->addbutton(this->_back,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 316)						_gthis->addbutton(this->_pause,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 316)						_gthis->addbutton(this->_cheat,virtualPad->buttonUp,2);
            					}
            					break;
            				}
HXLINE( 317)				switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 317)						_gthis->addbutton(this->_up,virtualPad->buttonDown,1);
HXDLIN( 317)						_gthis->addbutton(this->_upP,virtualPad->buttonDown,2);
HXDLIN( 317)						_gthis->addbutton(this->_upR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 317)						_gthis->addbutton(this->_left,virtualPad->buttonDown,1);
HXDLIN( 317)						_gthis->addbutton(this->_leftP,virtualPad->buttonDown,2);
HXDLIN( 317)						_gthis->addbutton(this->_leftR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 317)						_gthis->addbutton(this->_right,virtualPad->buttonDown,1);
HXDLIN( 317)						_gthis->addbutton(this->_rightP,virtualPad->buttonDown,2);
HXDLIN( 317)						_gthis->addbutton(this->_rightR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 317)						_gthis->addbutton(this->_down,virtualPad->buttonDown,1);
HXDLIN( 317)						_gthis->addbutton(this->_downP,virtualPad->buttonDown,2);
HXDLIN( 317)						_gthis->addbutton(this->_downR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 317)						_gthis->addbutton(this->_reset,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 317)						_gthis->addbutton(this->_accept,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 317)						_gthis->addbutton(this->_back,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 317)						_gthis->addbutton(this->_pause,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 317)						_gthis->addbutton(this->_cheat,virtualPad->buttonDown,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 311)				switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 311)						_gthis->addbutton(this->_up,virtualPad->buttonUp,1);
HXDLIN( 311)						_gthis->addbutton(this->_upP,virtualPad->buttonUp,2);
HXDLIN( 311)						_gthis->addbutton(this->_upR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 311)						_gthis->addbutton(this->_left,virtualPad->buttonUp,1);
HXDLIN( 311)						_gthis->addbutton(this->_leftP,virtualPad->buttonUp,2);
HXDLIN( 311)						_gthis->addbutton(this->_leftR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 311)						_gthis->addbutton(this->_right,virtualPad->buttonUp,1);
HXDLIN( 311)						_gthis->addbutton(this->_rightP,virtualPad->buttonUp,2);
HXDLIN( 311)						_gthis->addbutton(this->_rightR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 311)						_gthis->addbutton(this->_down,virtualPad->buttonUp,1);
HXDLIN( 311)						_gthis->addbutton(this->_downP,virtualPad->buttonUp,2);
HXDLIN( 311)						_gthis->addbutton(this->_downR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 311)						_gthis->addbutton(this->_reset,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 311)						_gthis->addbutton(this->_accept,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 311)						_gthis->addbutton(this->_back,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 311)						_gthis->addbutton(this->_pause,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 311)						_gthis->addbutton(this->_cheat,virtualPad->buttonUp,2);
            					}
            					break;
            				}
HXLINE( 312)				switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 312)						_gthis->addbutton(this->_up,virtualPad->buttonRight,1);
HXDLIN( 312)						_gthis->addbutton(this->_upP,virtualPad->buttonRight,2);
HXDLIN( 312)						_gthis->addbutton(this->_upR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 312)						_gthis->addbutton(this->_left,virtualPad->buttonRight,1);
HXDLIN( 312)						_gthis->addbutton(this->_leftP,virtualPad->buttonRight,2);
HXDLIN( 312)						_gthis->addbutton(this->_leftR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 312)						_gthis->addbutton(this->_right,virtualPad->buttonRight,1);
HXDLIN( 312)						_gthis->addbutton(this->_rightP,virtualPad->buttonRight,2);
HXDLIN( 312)						_gthis->addbutton(this->_rightR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 312)						_gthis->addbutton(this->_down,virtualPad->buttonRight,1);
HXDLIN( 312)						_gthis->addbutton(this->_downP,virtualPad->buttonRight,2);
HXDLIN( 312)						_gthis->addbutton(this->_downR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 312)						_gthis->addbutton(this->_reset,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 312)						_gthis->addbutton(this->_accept,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 312)						_gthis->addbutton(this->_back,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 312)						_gthis->addbutton(this->_pause,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 312)						_gthis->addbutton(this->_cheat,virtualPad->buttonRight,2);
            					}
            					break;
            				}
HXLINE( 313)				switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 313)						_gthis->addbutton(this->_up,virtualPad->buttonDown,1);
HXDLIN( 313)						_gthis->addbutton(this->_upP,virtualPad->buttonDown,2);
HXDLIN( 313)						_gthis->addbutton(this->_upR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 313)						_gthis->addbutton(this->_left,virtualPad->buttonDown,1);
HXDLIN( 313)						_gthis->addbutton(this->_leftP,virtualPad->buttonDown,2);
HXDLIN( 313)						_gthis->addbutton(this->_leftR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 313)						_gthis->addbutton(this->_right,virtualPad->buttonDown,1);
HXDLIN( 313)						_gthis->addbutton(this->_rightP,virtualPad->buttonDown,2);
HXDLIN( 313)						_gthis->addbutton(this->_rightR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 313)						_gthis->addbutton(this->_down,virtualPad->buttonDown,1);
HXDLIN( 313)						_gthis->addbutton(this->_downP,virtualPad->buttonDown,2);
HXDLIN( 313)						_gthis->addbutton(this->_downR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 313)						_gthis->addbutton(this->_reset,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 313)						_gthis->addbutton(this->_accept,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 313)						_gthis->addbutton(this->_back,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 313)						_gthis->addbutton(this->_pause,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 313)						_gthis->addbutton(this->_cheat,virtualPad->buttonDown,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)6: {
HXLINE( 319)				switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 319)						_gthis->addbutton(this->_up,virtualPad->buttonDown,1);
HXDLIN( 319)						_gthis->addbutton(this->_upP,virtualPad->buttonDown,2);
HXDLIN( 319)						_gthis->addbutton(this->_upR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 319)						_gthis->addbutton(this->_left,virtualPad->buttonDown,1);
HXDLIN( 319)						_gthis->addbutton(this->_leftP,virtualPad->buttonDown,2);
HXDLIN( 319)						_gthis->addbutton(this->_leftR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 319)						_gthis->addbutton(this->_right,virtualPad->buttonDown,1);
HXDLIN( 319)						_gthis->addbutton(this->_rightP,virtualPad->buttonDown,2);
HXDLIN( 319)						_gthis->addbutton(this->_rightR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 319)						_gthis->addbutton(this->_down,virtualPad->buttonDown,1);
HXDLIN( 319)						_gthis->addbutton(this->_downP,virtualPad->buttonDown,2);
HXDLIN( 319)						_gthis->addbutton(this->_downR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 319)						_gthis->addbutton(this->_reset,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 319)						_gthis->addbutton(this->_accept,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 319)						_gthis->addbutton(this->_back,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 319)						_gthis->addbutton(this->_pause,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 319)						_gthis->addbutton(this->_cheat,virtualPad->buttonDown,2);
            					}
            					break;
            				}
HXLINE( 320)				switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 320)						_gthis->addbutton(this->_up,virtualPad->buttonLeft,1);
HXDLIN( 320)						_gthis->addbutton(this->_upP,virtualPad->buttonLeft,2);
HXDLIN( 320)						_gthis->addbutton(this->_upR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 320)						_gthis->addbutton(this->_left,virtualPad->buttonLeft,1);
HXDLIN( 320)						_gthis->addbutton(this->_leftP,virtualPad->buttonLeft,2);
HXDLIN( 320)						_gthis->addbutton(this->_leftR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 320)						_gthis->addbutton(this->_right,virtualPad->buttonLeft,1);
HXDLIN( 320)						_gthis->addbutton(this->_rightP,virtualPad->buttonLeft,2);
HXDLIN( 320)						_gthis->addbutton(this->_rightR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 320)						_gthis->addbutton(this->_down,virtualPad->buttonLeft,1);
HXDLIN( 320)						_gthis->addbutton(this->_downP,virtualPad->buttonLeft,2);
HXDLIN( 320)						_gthis->addbutton(this->_downR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 320)						_gthis->addbutton(this->_reset,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 320)						_gthis->addbutton(this->_accept,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 320)						_gthis->addbutton(this->_back,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 320)						_gthis->addbutton(this->_pause,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 320)						_gthis->addbutton(this->_cheat,virtualPad->buttonLeft,2);
            					}
            					break;
            				}
HXLINE( 321)				switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 321)						_gthis->addbutton(this->_up,virtualPad->buttonRight,1);
HXDLIN( 321)						_gthis->addbutton(this->_upP,virtualPad->buttonRight,2);
HXDLIN( 321)						_gthis->addbutton(this->_upR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 321)						_gthis->addbutton(this->_left,virtualPad->buttonRight,1);
HXDLIN( 321)						_gthis->addbutton(this->_leftP,virtualPad->buttonRight,2);
HXDLIN( 321)						_gthis->addbutton(this->_leftR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 321)						_gthis->addbutton(this->_right,virtualPad->buttonRight,1);
HXDLIN( 321)						_gthis->addbutton(this->_rightP,virtualPad->buttonRight,2);
HXDLIN( 321)						_gthis->addbutton(this->_rightR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 321)						_gthis->addbutton(this->_down,virtualPad->buttonRight,1);
HXDLIN( 321)						_gthis->addbutton(this->_downP,virtualPad->buttonRight,2);
HXDLIN( 321)						_gthis->addbutton(this->_downR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 321)						_gthis->addbutton(this->_reset,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 321)						_gthis->addbutton(this->_accept,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 321)						_gthis->addbutton(this->_back,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 321)						_gthis->addbutton(this->_pause,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 321)						_gthis->addbutton(this->_cheat,virtualPad->buttonRight,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)7: {
HXLINE( 323)				switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 323)						_gthis->addbutton(this->_up,virtualPad->buttonUp,1);
HXDLIN( 323)						_gthis->addbutton(this->_upP,virtualPad->buttonUp,2);
HXDLIN( 323)						_gthis->addbutton(this->_upR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 323)						_gthis->addbutton(this->_left,virtualPad->buttonUp,1);
HXDLIN( 323)						_gthis->addbutton(this->_leftP,virtualPad->buttonUp,2);
HXDLIN( 323)						_gthis->addbutton(this->_leftR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 323)						_gthis->addbutton(this->_right,virtualPad->buttonUp,1);
HXDLIN( 323)						_gthis->addbutton(this->_rightP,virtualPad->buttonUp,2);
HXDLIN( 323)						_gthis->addbutton(this->_rightR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 323)						_gthis->addbutton(this->_down,virtualPad->buttonUp,1);
HXDLIN( 323)						_gthis->addbutton(this->_downP,virtualPad->buttonUp,2);
HXDLIN( 323)						_gthis->addbutton(this->_downR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 323)						_gthis->addbutton(this->_reset,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 323)						_gthis->addbutton(this->_accept,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 323)						_gthis->addbutton(this->_back,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 323)						_gthis->addbutton(this->_pause,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 323)						_gthis->addbutton(this->_cheat,virtualPad->buttonUp,2);
            					}
            					break;
            				}
HXLINE( 324)				switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 324)						_gthis->addbutton(this->_up,virtualPad->buttonRight,1);
HXDLIN( 324)						_gthis->addbutton(this->_upP,virtualPad->buttonRight,2);
HXDLIN( 324)						_gthis->addbutton(this->_upR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 324)						_gthis->addbutton(this->_left,virtualPad->buttonRight,1);
HXDLIN( 324)						_gthis->addbutton(this->_leftP,virtualPad->buttonRight,2);
HXDLIN( 324)						_gthis->addbutton(this->_leftR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 324)						_gthis->addbutton(this->_right,virtualPad->buttonRight,1);
HXDLIN( 324)						_gthis->addbutton(this->_rightP,virtualPad->buttonRight,2);
HXDLIN( 324)						_gthis->addbutton(this->_rightR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 324)						_gthis->addbutton(this->_down,virtualPad->buttonRight,1);
HXDLIN( 324)						_gthis->addbutton(this->_downP,virtualPad->buttonRight,2);
HXDLIN( 324)						_gthis->addbutton(this->_downR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 324)						_gthis->addbutton(this->_reset,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 324)						_gthis->addbutton(this->_accept,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 324)						_gthis->addbutton(this->_back,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 324)						_gthis->addbutton(this->_pause,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 324)						_gthis->addbutton(this->_cheat,virtualPad->buttonRight,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)8: {
HXLINE( 326)				switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 326)						_gthis->addbutton(this->_up,virtualPad->buttonLeft,1);
HXDLIN( 326)						_gthis->addbutton(this->_upP,virtualPad->buttonLeft,2);
HXDLIN( 326)						_gthis->addbutton(this->_upR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 326)						_gthis->addbutton(this->_left,virtualPad->buttonLeft,1);
HXDLIN( 326)						_gthis->addbutton(this->_leftP,virtualPad->buttonLeft,2);
HXDLIN( 326)						_gthis->addbutton(this->_leftR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 326)						_gthis->addbutton(this->_right,virtualPad->buttonLeft,1);
HXDLIN( 326)						_gthis->addbutton(this->_rightP,virtualPad->buttonLeft,2);
HXDLIN( 326)						_gthis->addbutton(this->_rightR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 326)						_gthis->addbutton(this->_down,virtualPad->buttonLeft,1);
HXDLIN( 326)						_gthis->addbutton(this->_downP,virtualPad->buttonLeft,2);
HXDLIN( 326)						_gthis->addbutton(this->_downR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 326)						_gthis->addbutton(this->_reset,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 326)						_gthis->addbutton(this->_accept,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 326)						_gthis->addbutton(this->_back,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 326)						_gthis->addbutton(this->_pause,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 326)						_gthis->addbutton(this->_cheat,virtualPad->buttonLeft,2);
            					}
            					break;
            				}
HXLINE( 327)				switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 327)						_gthis->addbutton(this->_up,virtualPad->buttonUp,1);
HXDLIN( 327)						_gthis->addbutton(this->_upP,virtualPad->buttonUp,2);
HXDLIN( 327)						_gthis->addbutton(this->_upR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 327)						_gthis->addbutton(this->_left,virtualPad->buttonUp,1);
HXDLIN( 327)						_gthis->addbutton(this->_leftP,virtualPad->buttonUp,2);
HXDLIN( 327)						_gthis->addbutton(this->_leftR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 327)						_gthis->addbutton(this->_right,virtualPad->buttonUp,1);
HXDLIN( 327)						_gthis->addbutton(this->_rightP,virtualPad->buttonUp,2);
HXDLIN( 327)						_gthis->addbutton(this->_rightR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 327)						_gthis->addbutton(this->_down,virtualPad->buttonUp,1);
HXDLIN( 327)						_gthis->addbutton(this->_downP,virtualPad->buttonUp,2);
HXDLIN( 327)						_gthis->addbutton(this->_downR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 327)						_gthis->addbutton(this->_reset,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 327)						_gthis->addbutton(this->_accept,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 327)						_gthis->addbutton(this->_back,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 327)						_gthis->addbutton(this->_pause,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 327)						_gthis->addbutton(this->_cheat,virtualPad->buttonUp,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 329)				switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 329)						_gthis->addbutton(this->_up,virtualPad->buttonDown,1);
HXDLIN( 329)						_gthis->addbutton(this->_upP,virtualPad->buttonDown,2);
HXDLIN( 329)						_gthis->addbutton(this->_upR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 329)						_gthis->addbutton(this->_left,virtualPad->buttonDown,1);
HXDLIN( 329)						_gthis->addbutton(this->_leftP,virtualPad->buttonDown,2);
HXDLIN( 329)						_gthis->addbutton(this->_leftR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 329)						_gthis->addbutton(this->_right,virtualPad->buttonDown,1);
HXDLIN( 329)						_gthis->addbutton(this->_rightP,virtualPad->buttonDown,2);
HXDLIN( 329)						_gthis->addbutton(this->_rightR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 329)						_gthis->addbutton(this->_down,virtualPad->buttonDown,1);
HXDLIN( 329)						_gthis->addbutton(this->_downP,virtualPad->buttonDown,2);
HXDLIN( 329)						_gthis->addbutton(this->_downR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 329)						_gthis->addbutton(this->_reset,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 329)						_gthis->addbutton(this->_accept,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 329)						_gthis->addbutton(this->_back,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 329)						_gthis->addbutton(this->_pause,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 329)						_gthis->addbutton(this->_cheat,virtualPad->buttonDown,2);
            					}
            					break;
            				}
HXLINE( 330)				switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 330)						_gthis->addbutton(this->_up,virtualPad->buttonRight,1);
HXDLIN( 330)						_gthis->addbutton(this->_upP,virtualPad->buttonRight,2);
HXDLIN( 330)						_gthis->addbutton(this->_upR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 330)						_gthis->addbutton(this->_left,virtualPad->buttonRight,1);
HXDLIN( 330)						_gthis->addbutton(this->_leftP,virtualPad->buttonRight,2);
HXDLIN( 330)						_gthis->addbutton(this->_leftR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 330)						_gthis->addbutton(this->_right,virtualPad->buttonRight,1);
HXDLIN( 330)						_gthis->addbutton(this->_rightP,virtualPad->buttonRight,2);
HXDLIN( 330)						_gthis->addbutton(this->_rightR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 330)						_gthis->addbutton(this->_down,virtualPad->buttonRight,1);
HXDLIN( 330)						_gthis->addbutton(this->_downP,virtualPad->buttonRight,2);
HXDLIN( 330)						_gthis->addbutton(this->_downR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 330)						_gthis->addbutton(this->_reset,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 330)						_gthis->addbutton(this->_accept,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 330)						_gthis->addbutton(this->_back,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 330)						_gthis->addbutton(this->_pause,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 330)						_gthis->addbutton(this->_cheat,virtualPad->buttonRight,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 332)				switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 332)						_gthis->addbutton(this->_up,virtualPad->buttonDown,1);
HXDLIN( 332)						_gthis->addbutton(this->_upP,virtualPad->buttonDown,2);
HXDLIN( 332)						_gthis->addbutton(this->_upR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 332)						_gthis->addbutton(this->_left,virtualPad->buttonDown,1);
HXDLIN( 332)						_gthis->addbutton(this->_leftP,virtualPad->buttonDown,2);
HXDLIN( 332)						_gthis->addbutton(this->_leftR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 332)						_gthis->addbutton(this->_right,virtualPad->buttonDown,1);
HXDLIN( 332)						_gthis->addbutton(this->_rightP,virtualPad->buttonDown,2);
HXDLIN( 332)						_gthis->addbutton(this->_rightR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 332)						_gthis->addbutton(this->_down,virtualPad->buttonDown,1);
HXDLIN( 332)						_gthis->addbutton(this->_downP,virtualPad->buttonDown,2);
HXDLIN( 332)						_gthis->addbutton(this->_downR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 332)						_gthis->addbutton(this->_reset,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 332)						_gthis->addbutton(this->_accept,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 332)						_gthis->addbutton(this->_back,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 332)						_gthis->addbutton(this->_pause,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 332)						_gthis->addbutton(this->_cheat,virtualPad->buttonDown,2);
            					}
            					break;
            				}
HXLINE( 333)				switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 333)						_gthis->addbutton(this->_up,virtualPad->buttonLeft,1);
HXDLIN( 333)						_gthis->addbutton(this->_upP,virtualPad->buttonLeft,2);
HXDLIN( 333)						_gthis->addbutton(this->_upR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 333)						_gthis->addbutton(this->_left,virtualPad->buttonLeft,1);
HXDLIN( 333)						_gthis->addbutton(this->_leftP,virtualPad->buttonLeft,2);
HXDLIN( 333)						_gthis->addbutton(this->_leftR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 333)						_gthis->addbutton(this->_right,virtualPad->buttonLeft,1);
HXDLIN( 333)						_gthis->addbutton(this->_rightP,virtualPad->buttonLeft,2);
HXDLIN( 333)						_gthis->addbutton(this->_rightR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 333)						_gthis->addbutton(this->_down,virtualPad->buttonLeft,1);
HXDLIN( 333)						_gthis->addbutton(this->_downP,virtualPad->buttonLeft,2);
HXDLIN( 333)						_gthis->addbutton(this->_downR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 333)						_gthis->addbutton(this->_reset,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 333)						_gthis->addbutton(this->_accept,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 333)						_gthis->addbutton(this->_back,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 333)						_gthis->addbutton(this->_pause,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 333)						_gthis->addbutton(this->_cheat,virtualPad->buttonLeft,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)11: case (int)12: {
HXLINE( 335)				switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 335)						_gthis->addbutton(this->_up,virtualPad->buttonUp,1);
HXDLIN( 335)						_gthis->addbutton(this->_upP,virtualPad->buttonUp,2);
HXDLIN( 335)						_gthis->addbutton(this->_upR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 335)						_gthis->addbutton(this->_left,virtualPad->buttonUp,1);
HXDLIN( 335)						_gthis->addbutton(this->_leftP,virtualPad->buttonUp,2);
HXDLIN( 335)						_gthis->addbutton(this->_leftR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 335)						_gthis->addbutton(this->_right,virtualPad->buttonUp,1);
HXDLIN( 335)						_gthis->addbutton(this->_rightP,virtualPad->buttonUp,2);
HXDLIN( 335)						_gthis->addbutton(this->_rightR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 335)						_gthis->addbutton(this->_down,virtualPad->buttonUp,1);
HXDLIN( 335)						_gthis->addbutton(this->_downP,virtualPad->buttonUp,2);
HXDLIN( 335)						_gthis->addbutton(this->_downR,virtualPad->buttonUp,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 335)						_gthis->addbutton(this->_reset,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 335)						_gthis->addbutton(this->_accept,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 335)						_gthis->addbutton(this->_back,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 335)						_gthis->addbutton(this->_pause,virtualPad->buttonUp,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 335)						_gthis->addbutton(this->_cheat,virtualPad->buttonUp,2);
            					}
            					break;
            				}
HXLINE( 336)				switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 336)						_gthis->addbutton(this->_up,virtualPad->buttonDown,1);
HXDLIN( 336)						_gthis->addbutton(this->_upP,virtualPad->buttonDown,2);
HXDLIN( 336)						_gthis->addbutton(this->_upR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 336)						_gthis->addbutton(this->_left,virtualPad->buttonDown,1);
HXDLIN( 336)						_gthis->addbutton(this->_leftP,virtualPad->buttonDown,2);
HXDLIN( 336)						_gthis->addbutton(this->_leftR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 336)						_gthis->addbutton(this->_right,virtualPad->buttonDown,1);
HXDLIN( 336)						_gthis->addbutton(this->_rightP,virtualPad->buttonDown,2);
HXDLIN( 336)						_gthis->addbutton(this->_rightR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 336)						_gthis->addbutton(this->_down,virtualPad->buttonDown,1);
HXDLIN( 336)						_gthis->addbutton(this->_downP,virtualPad->buttonDown,2);
HXDLIN( 336)						_gthis->addbutton(this->_downR,virtualPad->buttonDown,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 336)						_gthis->addbutton(this->_reset,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 336)						_gthis->addbutton(this->_accept,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 336)						_gthis->addbutton(this->_back,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 336)						_gthis->addbutton(this->_pause,virtualPad->buttonDown,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 336)						_gthis->addbutton(this->_cheat,virtualPad->buttonDown,2);
            					}
            					break;
            				}
HXLINE( 337)				switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 337)						_gthis->addbutton(this->_up,virtualPad->buttonLeft,1);
HXDLIN( 337)						_gthis->addbutton(this->_upP,virtualPad->buttonLeft,2);
HXDLIN( 337)						_gthis->addbutton(this->_upR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 337)						_gthis->addbutton(this->_left,virtualPad->buttonLeft,1);
HXDLIN( 337)						_gthis->addbutton(this->_leftP,virtualPad->buttonLeft,2);
HXDLIN( 337)						_gthis->addbutton(this->_leftR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 337)						_gthis->addbutton(this->_right,virtualPad->buttonLeft,1);
HXDLIN( 337)						_gthis->addbutton(this->_rightP,virtualPad->buttonLeft,2);
HXDLIN( 337)						_gthis->addbutton(this->_rightR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 337)						_gthis->addbutton(this->_down,virtualPad->buttonLeft,1);
HXDLIN( 337)						_gthis->addbutton(this->_downP,virtualPad->buttonLeft,2);
HXDLIN( 337)						_gthis->addbutton(this->_downR,virtualPad->buttonLeft,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 337)						_gthis->addbutton(this->_reset,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 337)						_gthis->addbutton(this->_accept,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 337)						_gthis->addbutton(this->_back,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 337)						_gthis->addbutton(this->_pause,virtualPad->buttonLeft,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 337)						_gthis->addbutton(this->_cheat,virtualPad->buttonLeft,2);
            					}
            					break;
            				}
HXLINE( 338)				switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 338)						_gthis->addbutton(this->_up,virtualPad->buttonRight,1);
HXDLIN( 338)						_gthis->addbutton(this->_upP,virtualPad->buttonRight,2);
HXDLIN( 338)						_gthis->addbutton(this->_upR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 338)						_gthis->addbutton(this->_left,virtualPad->buttonRight,1);
HXDLIN( 338)						_gthis->addbutton(this->_leftP,virtualPad->buttonRight,2);
HXDLIN( 338)						_gthis->addbutton(this->_leftR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 338)						_gthis->addbutton(this->_right,virtualPad->buttonRight,1);
HXDLIN( 338)						_gthis->addbutton(this->_rightP,virtualPad->buttonRight,2);
HXDLIN( 338)						_gthis->addbutton(this->_rightR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 338)						_gthis->addbutton(this->_down,virtualPad->buttonRight,1);
HXDLIN( 338)						_gthis->addbutton(this->_downP,virtualPad->buttonRight,2);
HXDLIN( 338)						_gthis->addbutton(this->_downR,virtualPad->buttonRight,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 338)						_gthis->addbutton(this->_reset,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 338)						_gthis->addbutton(this->_accept,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 338)						_gthis->addbutton(this->_back,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 338)						_gthis->addbutton(this->_pause,virtualPad->buttonRight,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 338)						_gthis->addbutton(this->_cheat,virtualPad->buttonRight,2);
            					}
            					break;
            				}
            			}
            			break;
            		}
HXLINE( 343)		switch((int)(Action->_hx_getIndex())){
            			case (int)0: {
            			}
            			break;
            			case (int)1: {
HXLINE( 346)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 346)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 346)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 346)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 346)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 346)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 346)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 346)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 346)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 346)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 346)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 346)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 346)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 346)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 346)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 346)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 346)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 346)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 348)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 348)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 348)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 348)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 348)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 348)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 348)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 348)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 348)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 348)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 348)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 348)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 348)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 348)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 348)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 348)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 348)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 348)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 350)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 350)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 350)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 350)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 350)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 350)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 350)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 350)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 350)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 350)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 350)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 350)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 350)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 350)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 350)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 350)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 350)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 350)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 352)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 352)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 352)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 352)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 352)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 352)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 352)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 352)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 352)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 352)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 352)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 352)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 352)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 352)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 352)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 352)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 352)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 352)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 354)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 354)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 354)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 354)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 354)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 354)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 354)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 354)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 354)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 354)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 354)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 354)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 354)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 354)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 354)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 354)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 354)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 354)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)6: {
HXLINE( 356)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 356)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 356)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 356)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 356)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 356)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 356)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 356)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 356)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 356)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 356)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 356)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 356)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 356)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 356)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 356)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 356)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 356)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 357)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 357)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 357)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 357)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 357)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 357)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 357)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 357)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 357)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 357)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 357)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 357)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 357)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 357)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 357)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 357)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 357)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 357)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)7: {
HXLINE( 359)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 359)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 359)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 359)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 359)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 359)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 359)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 359)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 359)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 359)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 359)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 359)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 359)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 359)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 359)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 359)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 359)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 359)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 360)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 360)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 360)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 360)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 360)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 360)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 360)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 360)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 360)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 360)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 360)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 360)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 360)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 360)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 360)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 360)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 360)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 360)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)8: {
HXLINE( 362)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 362)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 362)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 362)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 362)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 362)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 362)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 362)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 362)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 362)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 362)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 362)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 362)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 362)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 362)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 362)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 362)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 362)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 363)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 363)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 363)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 363)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 363)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 363)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 363)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 363)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 363)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 363)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 363)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 363)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 363)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 363)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 363)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 363)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 363)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 363)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 365)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 365)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 365)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 365)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 365)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 365)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 365)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 365)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 365)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 365)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 365)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 365)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 365)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 365)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 365)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 365)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 365)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 365)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 366)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 366)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 366)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 366)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 366)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 366)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 366)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 366)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 366)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 366)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 366)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 366)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 366)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 366)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 366)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 366)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 366)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 366)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 368)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 368)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 368)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 368)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 368)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 368)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 368)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 368)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 368)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 368)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 368)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 368)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 368)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 368)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 368)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 368)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 368)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 368)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 369)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 369)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 369)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 369)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 369)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 369)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 369)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 369)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 369)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 369)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 369)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 369)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 369)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 369)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 369)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 369)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 369)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 369)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)11: {
HXLINE( 371)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 371)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 371)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 371)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 371)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 371)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 371)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 371)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 371)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 371)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 371)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 371)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 371)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 371)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 371)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 371)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 371)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 371)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 372)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 372)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 372)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 372)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 372)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 372)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 372)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 372)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 372)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 372)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 372)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 372)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 372)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 372)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 372)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 372)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 372)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 372)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)12: {
HXLINE( 374)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 374)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 374)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 374)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 374)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 374)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 374)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 374)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 374)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 374)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 374)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 374)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 374)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 374)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 374)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 374)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 374)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 374)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 375)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 375)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 375)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 375)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 375)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 375)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 375)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 375)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 375)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 375)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 375)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 375)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 375)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 375)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 375)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 375)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 375)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 375)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)13: {
HXLINE( 377)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 377)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 377)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 377)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 377)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 377)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 377)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 377)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 377)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 377)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 377)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 377)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 377)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 377)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 377)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 377)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 377)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 377)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
HXLINE( 378)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 378)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 378)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 378)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 378)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 378)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 378)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 378)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 378)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 378)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 378)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 378)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 378)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 378)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 378)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 378)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 378)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 378)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)14: {
HXLINE( 380)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 380)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 380)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 380)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 380)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 380)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 380)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 380)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 380)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 380)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 380)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 380)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 380)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 380)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 380)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 380)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 380)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 380)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
HXLINE( 381)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 381)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 381)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 381)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 381)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 381)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 381)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 381)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 381)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 381)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 381)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 381)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 381)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 381)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 381)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 381)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 381)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 381)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)15: {
HXLINE( 383)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 383)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 383)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 383)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 383)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 383)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 383)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 383)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 383)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 383)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 383)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 383)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 383)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 383)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 383)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 383)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 383)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 383)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
HXLINE( 384)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 384)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 384)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 384)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 384)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 384)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 384)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 384)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 384)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 384)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 384)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 384)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 384)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 384)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 384)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 384)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 384)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 384)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)16: {
HXLINE( 386)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 386)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 386)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 386)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 386)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 386)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 386)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 386)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 386)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 386)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 386)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 386)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 386)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 386)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 386)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 386)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 386)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 386)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 387)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 387)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 387)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 387)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 387)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 387)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 387)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 387)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 387)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 387)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 387)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 387)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 387)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 387)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 387)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 387)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 387)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 387)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 388)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 388)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 388)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 388)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 388)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 388)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 388)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 388)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 388)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 388)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 388)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 388)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 388)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 388)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 388)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 388)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 388)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 388)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)17: {
HXLINE( 390)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 390)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 390)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 390)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 390)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 390)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 390)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 390)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 390)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 390)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 390)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 390)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 390)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 390)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 390)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 390)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 390)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 390)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 391)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 391)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 391)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 391)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 391)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 391)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 391)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 391)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 391)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 391)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 391)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 391)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 391)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 391)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 391)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 391)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 391)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 391)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 392)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 392)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 392)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 392)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 392)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 392)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 392)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 392)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 392)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 392)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 392)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 392)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 392)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 392)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 392)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 392)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 392)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 392)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)18: {
HXLINE( 394)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 394)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 394)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 394)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 394)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 394)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 394)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 394)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 394)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 394)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 394)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 394)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 394)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 394)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 394)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 394)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 394)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 394)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 395)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 395)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 395)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 395)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 395)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 395)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 395)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 395)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 395)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 395)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 395)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 395)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 395)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 395)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 395)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 395)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 395)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 395)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 396)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 396)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 396)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 396)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 396)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 396)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 396)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 396)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 396)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 396)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 396)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 396)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 396)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 396)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 396)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 396)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 396)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 396)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)19: {
HXLINE( 398)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 398)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 398)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 398)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 398)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 398)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 398)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 398)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 398)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 398)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 398)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 398)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 398)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 398)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 398)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 398)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 398)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 398)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 399)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 399)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 399)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 399)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 399)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 399)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 399)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 399)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 399)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 399)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 399)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 399)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 399)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 399)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 399)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 399)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 399)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 399)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
HXLINE( 400)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 400)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 400)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 400)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 400)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 400)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 400)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 400)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 400)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 400)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 400)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 400)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 400)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 400)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 400)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 400)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 400)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 400)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)20: {
HXLINE( 402)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 402)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 402)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 402)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 402)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 402)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 402)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 402)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 402)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 402)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 402)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 402)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 402)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 402)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 402)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 402)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 402)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 402)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 403)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 403)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 403)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 403)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 403)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 403)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 403)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 403)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 403)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 403)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 403)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 403)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 403)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 403)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 403)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 403)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 403)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 403)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
HXLINE( 404)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 404)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 404)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 404)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 404)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 404)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 404)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 404)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 404)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 404)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 404)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 404)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 404)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 404)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 404)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 404)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 404)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 404)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)21: {
HXLINE( 406)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 406)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 406)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 406)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 406)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 406)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 406)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 406)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 406)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 406)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 406)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 406)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 406)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 406)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 406)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 406)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 406)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 406)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 407)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 407)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 407)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 407)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 407)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 407)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 407)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 407)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 407)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 407)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 407)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 407)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 407)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 407)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 407)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 407)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 407)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 407)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
HXLINE( 408)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 408)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 408)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 408)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 408)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 408)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 408)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 408)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 408)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 408)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 408)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 408)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 408)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 408)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 408)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 408)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 408)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 408)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)22: {
HXLINE( 410)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 410)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 410)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 410)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 410)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 410)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 410)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 410)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 410)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 410)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 410)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 410)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 410)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 410)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 410)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 410)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 410)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 410)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 411)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 411)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 411)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 411)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 411)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 411)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 411)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 411)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 411)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 411)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 411)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 411)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 411)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 411)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 411)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 411)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 411)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 411)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
HXLINE( 412)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 412)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 412)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 412)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 412)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 412)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 412)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 412)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 412)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 412)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 412)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 412)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 412)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 412)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 412)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 412)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 412)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 412)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)23: {
HXLINE( 414)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 414)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 414)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 414)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 414)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 414)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 414)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 414)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 414)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 414)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 414)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 414)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 414)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 414)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 414)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 414)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 414)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 414)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
HXLINE( 415)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 415)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 415)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 415)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 415)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 415)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 415)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 415)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 415)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 415)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 415)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 415)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 415)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 415)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 415)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 415)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 415)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 415)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
HXLINE( 416)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 416)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 416)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 416)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 416)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 416)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 416)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 416)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 416)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 416)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 416)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 416)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 416)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 416)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 416)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 416)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 416)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 416)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)24: {
HXLINE( 418)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 418)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 418)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 418)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 418)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 418)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 418)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 418)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 418)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 418)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 418)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 418)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 418)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 418)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 418)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 418)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 418)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 418)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 419)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 419)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 419)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 419)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 419)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 419)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 419)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 419)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 419)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 419)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 419)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 419)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 419)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 419)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 419)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 419)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 419)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 419)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
HXLINE( 420)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 420)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 420)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 420)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 420)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 420)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 420)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 420)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 420)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 420)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 420)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 420)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 420)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 420)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 420)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 420)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 420)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 420)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)25: {
HXLINE( 422)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 422)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 422)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 422)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 422)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 422)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 422)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 422)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 422)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 422)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 422)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 422)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 422)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 422)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 422)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 422)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 422)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 422)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 423)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 423)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 423)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 423)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 423)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 423)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 423)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 423)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 423)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 423)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 423)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 423)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 423)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 423)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 423)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 423)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 423)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 423)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 424)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 424)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 424)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 424)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 424)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 424)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 424)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 424)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 424)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 424)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 424)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 424)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 424)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 424)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 424)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 424)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 424)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 424)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
HXLINE( 425)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 425)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 425)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 425)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 425)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 425)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 425)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 425)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 425)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 425)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 425)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 425)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 425)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 425)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 425)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 425)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 425)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 425)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)26: {
HXLINE( 427)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 427)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 427)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 427)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 427)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 427)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 427)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 427)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 427)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 427)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 427)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 427)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 427)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 427)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 427)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 427)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 427)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 427)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 428)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 428)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 428)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 428)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 428)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 428)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 428)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 428)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 428)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 428)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 428)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 428)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 428)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 428)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 428)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 428)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 428)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 428)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
HXLINE( 429)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 429)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 429)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 429)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 429)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 429)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 429)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 429)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 429)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 429)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 429)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 429)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 429)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 429)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 429)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 429)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 429)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 429)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
HXLINE( 430)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 430)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 430)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 430)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 430)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 430)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 430)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 430)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 430)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 430)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 430)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 430)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 430)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 430)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 430)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 430)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 430)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 430)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)27: {
HXLINE( 432)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 432)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 432)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 432)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 432)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 432)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 432)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 432)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 432)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 432)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 432)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 432)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 432)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 432)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 432)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 432)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 432)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 432)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 433)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 433)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 433)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 433)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 433)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 433)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 433)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 433)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 433)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 433)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 433)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 433)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 433)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 433)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 433)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 433)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 433)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 433)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
HXLINE( 434)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 434)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 434)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 434)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 434)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 434)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 434)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 434)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 434)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 434)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 434)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 434)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 434)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 434)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 434)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 434)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 434)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 434)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
HXLINE( 435)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 435)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 435)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 435)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 435)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 435)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 435)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 435)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 435)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 435)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 435)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 435)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 435)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 435)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 435)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 435)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 435)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 435)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)28: {
HXLINE( 437)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 437)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 437)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 437)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 437)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 437)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 437)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 437)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 437)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 437)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 437)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 437)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 437)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 437)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 437)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 437)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 437)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 437)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 438)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 438)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 438)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 438)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 438)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 438)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 438)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 438)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 438)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 438)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 438)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 438)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 438)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 438)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 438)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 438)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 438)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 438)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 439)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 439)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 439)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 439)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 439)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 439)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 439)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 439)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 439)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 439)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 439)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 439)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 439)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 439)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 439)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 439)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 439)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 439)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
HXLINE( 440)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 440)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 440)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 440)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 440)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 440)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 440)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 440)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 440)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 440)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 440)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 440)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 440)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 440)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 440)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 440)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 440)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 440)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)29: {
HXLINE( 442)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 442)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 442)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 442)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 442)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 442)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 442)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 442)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 442)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 442)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 442)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 442)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 442)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 442)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 442)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 442)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 442)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 442)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 443)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 443)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 443)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 443)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 443)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 443)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 443)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 443)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 443)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 443)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 443)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 443)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 443)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 443)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 443)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 443)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 443)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 443)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 444)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 444)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 444)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 444)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 444)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 444)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 444)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 444)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 444)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 444)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 444)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 444)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 444)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 444)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 444)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 444)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 444)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 444)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
HXLINE( 445)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 445)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 445)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 445)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 445)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 445)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 445)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 445)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 445)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 445)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 445)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 445)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 445)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 445)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 445)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 445)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 445)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 445)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)30: {
HXLINE( 447)				switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 447)						_gthis->addbutton(this->_up,virtualPad->buttonA,1);
HXDLIN( 447)						_gthis->addbutton(this->_upP,virtualPad->buttonA,2);
HXDLIN( 447)						_gthis->addbutton(this->_upR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 447)						_gthis->addbutton(this->_left,virtualPad->buttonA,1);
HXDLIN( 447)						_gthis->addbutton(this->_leftP,virtualPad->buttonA,2);
HXDLIN( 447)						_gthis->addbutton(this->_leftR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 447)						_gthis->addbutton(this->_right,virtualPad->buttonA,1);
HXDLIN( 447)						_gthis->addbutton(this->_rightP,virtualPad->buttonA,2);
HXDLIN( 447)						_gthis->addbutton(this->_rightR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 447)						_gthis->addbutton(this->_down,virtualPad->buttonA,1);
HXDLIN( 447)						_gthis->addbutton(this->_downP,virtualPad->buttonA,2);
HXDLIN( 447)						_gthis->addbutton(this->_downR,virtualPad->buttonA,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 447)						_gthis->addbutton(this->_reset,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 447)						_gthis->addbutton(this->_accept,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 447)						_gthis->addbutton(this->_back,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 447)						_gthis->addbutton(this->_pause,virtualPad->buttonA,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 447)						_gthis->addbutton(this->_cheat,virtualPad->buttonA,2);
            					}
            					break;
            				}
HXLINE( 448)				switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 448)						_gthis->addbutton(this->_up,virtualPad->buttonB,1);
HXDLIN( 448)						_gthis->addbutton(this->_upP,virtualPad->buttonB,2);
HXDLIN( 448)						_gthis->addbutton(this->_upR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 448)						_gthis->addbutton(this->_left,virtualPad->buttonB,1);
HXDLIN( 448)						_gthis->addbutton(this->_leftP,virtualPad->buttonB,2);
HXDLIN( 448)						_gthis->addbutton(this->_leftR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 448)						_gthis->addbutton(this->_right,virtualPad->buttonB,1);
HXDLIN( 448)						_gthis->addbutton(this->_rightP,virtualPad->buttonB,2);
HXDLIN( 448)						_gthis->addbutton(this->_rightR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 448)						_gthis->addbutton(this->_down,virtualPad->buttonB,1);
HXDLIN( 448)						_gthis->addbutton(this->_downP,virtualPad->buttonB,2);
HXDLIN( 448)						_gthis->addbutton(this->_downR,virtualPad->buttonB,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 448)						_gthis->addbutton(this->_reset,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 448)						_gthis->addbutton(this->_accept,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 448)						_gthis->addbutton(this->_back,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 448)						_gthis->addbutton(this->_pause,virtualPad->buttonB,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 448)						_gthis->addbutton(this->_cheat,virtualPad->buttonB,2);
            					}
            					break;
            				}
HXLINE( 449)				switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 449)						_gthis->addbutton(this->_up,virtualPad->buttonX,1);
HXDLIN( 449)						_gthis->addbutton(this->_upP,virtualPad->buttonX,2);
HXDLIN( 449)						_gthis->addbutton(this->_upR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 449)						_gthis->addbutton(this->_left,virtualPad->buttonX,1);
HXDLIN( 449)						_gthis->addbutton(this->_leftP,virtualPad->buttonX,2);
HXDLIN( 449)						_gthis->addbutton(this->_leftR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 449)						_gthis->addbutton(this->_right,virtualPad->buttonX,1);
HXDLIN( 449)						_gthis->addbutton(this->_rightP,virtualPad->buttonX,2);
HXDLIN( 449)						_gthis->addbutton(this->_rightR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 449)						_gthis->addbutton(this->_down,virtualPad->buttonX,1);
HXDLIN( 449)						_gthis->addbutton(this->_downP,virtualPad->buttonX,2);
HXDLIN( 449)						_gthis->addbutton(this->_downR,virtualPad->buttonX,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 449)						_gthis->addbutton(this->_reset,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 449)						_gthis->addbutton(this->_accept,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 449)						_gthis->addbutton(this->_back,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 449)						_gthis->addbutton(this->_pause,virtualPad->buttonX,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 449)						_gthis->addbutton(this->_cheat,virtualPad->buttonX,2);
            					}
            					break;
            				}
HXLINE( 450)				switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 450)						_gthis->addbutton(this->_up,virtualPad->buttonY,1);
HXDLIN( 450)						_gthis->addbutton(this->_upP,virtualPad->buttonY,2);
HXDLIN( 450)						_gthis->addbutton(this->_upR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 450)						_gthis->addbutton(this->_left,virtualPad->buttonY,1);
HXDLIN( 450)						_gthis->addbutton(this->_leftP,virtualPad->buttonY,2);
HXDLIN( 450)						_gthis->addbutton(this->_leftR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 450)						_gthis->addbutton(this->_right,virtualPad->buttonY,1);
HXDLIN( 450)						_gthis->addbutton(this->_rightP,virtualPad->buttonY,2);
HXDLIN( 450)						_gthis->addbutton(this->_rightR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 450)						_gthis->addbutton(this->_down,virtualPad->buttonY,1);
HXDLIN( 450)						_gthis->addbutton(this->_downP,virtualPad->buttonY,2);
HXDLIN( 450)						_gthis->addbutton(this->_downR,virtualPad->buttonY,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 450)						_gthis->addbutton(this->_reset,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 450)						_gthis->addbutton(this->_accept,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 450)						_gthis->addbutton(this->_back,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 450)						_gthis->addbutton(this->_pause,virtualPad->buttonY,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 450)						_gthis->addbutton(this->_cheat,virtualPad->buttonY,2);
            					}
            					break;
            				}
HXLINE( 451)				switch((int)(::Control_obj::CHEAT_dyn()->_hx_getIndex())){
            					case (int)0: {
HXLINE( 451)						_gthis->addbutton(this->_up,virtualPad->buttonC,1);
HXDLIN( 451)						_gthis->addbutton(this->_upP,virtualPad->buttonC,2);
HXDLIN( 451)						_gthis->addbutton(this->_upR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)1: {
HXLINE( 451)						_gthis->addbutton(this->_left,virtualPad->buttonC,1);
HXDLIN( 451)						_gthis->addbutton(this->_leftP,virtualPad->buttonC,2);
HXDLIN( 451)						_gthis->addbutton(this->_leftR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)2: {
HXLINE( 451)						_gthis->addbutton(this->_right,virtualPad->buttonC,1);
HXDLIN( 451)						_gthis->addbutton(this->_rightP,virtualPad->buttonC,2);
HXDLIN( 451)						_gthis->addbutton(this->_rightR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)3: {
HXLINE( 451)						_gthis->addbutton(this->_down,virtualPad->buttonC,1);
HXDLIN( 451)						_gthis->addbutton(this->_downP,virtualPad->buttonC,2);
HXDLIN( 451)						_gthis->addbutton(this->_downR,virtualPad->buttonC,-1);
            					}
            					break;
            					case (int)4: {
HXLINE( 451)						_gthis->addbutton(this->_reset,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)5: {
HXLINE( 451)						_gthis->addbutton(this->_accept,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)6: {
HXLINE( 451)						_gthis->addbutton(this->_back,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)7: {
HXLINE( 451)						_gthis->addbutton(this->_pause,virtualPad->buttonC,2);
            					}
            					break;
            					case (int)8: {
HXLINE( 451)						_gthis->addbutton(this->_cheat,virtualPad->buttonC,2);
            					}
            					break;
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,setVirtualPad,(void))

void Controls_obj::removeFlxInput( ::Dynamic Tinputs){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_458_removeFlxInput)
HXDLIN( 458)		int _g = 0;
HXDLIN( 458)		::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 458)		while((_g < _g1->length)){
HXDLIN( 458)			 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 458)			_g = (_g + 1);
HXLINE( 460)			int i = action->inputs->length;
HXLINE( 462)			while(true){
HXLINE( 462)				i = (i - 1);
HXDLIN( 462)				if (!(((i + 1) > 0))) {
HXLINE( 462)					goto _hx_goto_23;
            				}
HXLINE( 464)				 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 468)				int x = ( (int)(Tinputs->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXLINE( 469)				while(true){
HXLINE( 469)					x = (x - 1);
HXDLIN( 469)					if (!(((x + 1) > 0))) {
HXLINE( 469)						goto _hx_goto_24;
            					}
HXLINE( 471)					action->remove(input,null());
            				}
            				_hx_goto_24:;
            			}
            			_hx_goto_23:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,removeFlxInput,(void))

void Controls_obj::addAndroidBack(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_479_addAndroidBack)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,addAndroidBack,(void))

void Controls_obj::update(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_493_update)
HXDLIN( 493)		this->super::update();
            	}


bool Controls_obj::checkByName(::String name){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_503_checkByName)
HXDLIN( 503)		return ( ( ::flixel::input::actions::FlxActionDigital)(this->byName->get(name)) )->check();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,checkByName,return )

::String Controls_obj::getDialogueName( ::flixel::input::actions::FlxActionDigital action){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_507_getDialogueName)
HXLINE( 508)		 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(0).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 509)		 ::flixel::input::actions::FlxInputDevice _g = input->device;
HXDLIN( 509)		switch((int)(_g->_hx_getIndex())){
            			case (int)3: {
HXLINE( 511)				return ((HX_("[",5b,00,00,00) + ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get(input->inputID)) + HX_("]",5d,00,00,00));
            			}
            			break;
            			case (int)4: {
HXLINE( 512)				return ((HX_("(",28,00,00,00) + ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::toStringMap->get(input->inputID)) + HX_(")",29,00,00,00));
            			}
            			break;
            			default:{
HXLINE( 513)				 ::flixel::input::actions::FlxInputDevice device = _g;
HXDLIN( 513)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("unhandled device: ",f9,e1,62,a5) + ::Std_obj::string(device))));
            			}
            		}
HXLINE( 509)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,getDialogueName,return )

::String Controls_obj::getDialogueNameFromToken(::String token){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_519_getDialogueNameFromToken)
HXDLIN( 519)		::cpp::VirtualArray params = null();
HXDLIN( 519)		return this->getDialogueName(this->getActionFromControl(::Type_obj::createEnum(::hx::ClassOf< ::Control >(),token.toUpperCase(),params)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,getDialogueNameFromToken,return )

 ::flixel::input::actions::FlxActionDigital Controls_obj::getActionFromControl( ::Control control){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_524_getActionFromControl)
HXDLIN( 524)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXLINE( 526)				return this->_up;
            			}
            			break;
            			case (int)1: {
HXLINE( 528)				return this->_left;
            			}
            			break;
            			case (int)2: {
HXLINE( 529)				return this->_right;
            			}
            			break;
            			case (int)3: {
HXLINE( 527)				return this->_down;
            			}
            			break;
            			case (int)4: {
HXLINE( 533)				return this->_reset;
            			}
            			break;
            			case (int)5: {
HXLINE( 530)				return this->_accept;
            			}
            			break;
            			case (int)6: {
HXLINE( 531)				return this->_back;
            			}
            			break;
            			case (int)7: {
HXLINE( 532)				return this->_pause;
            			}
            			break;
            			case (int)8: {
HXLINE( 534)				return this->_cheat;
            			}
            			break;
            		}
HXLINE( 524)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,getActionFromControl,return )

void Controls_obj::forEachBound( ::Control control, ::Dynamic func){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_552_forEachBound)
HXDLIN( 552)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXLINE( 555)				func(this->_up,1);
HXLINE( 556)				func(this->_upP,2);
HXLINE( 557)				func(this->_upR,-1);
            			}
            			break;
            			case (int)1: {
HXLINE( 559)				func(this->_left,1);
HXLINE( 560)				func(this->_leftP,2);
HXLINE( 561)				func(this->_leftR,-1);
            			}
            			break;
            			case (int)2: {
HXLINE( 563)				func(this->_right,1);
HXLINE( 564)				func(this->_rightP,2);
HXLINE( 565)				func(this->_rightR,-1);
            			}
            			break;
            			case (int)3: {
HXLINE( 567)				func(this->_down,1);
HXLINE( 568)				func(this->_downP,2);
HXLINE( 569)				func(this->_downR,-1);
            			}
            			break;
            			case (int)4: {
HXLINE( 577)				func(this->_reset,2);
            			}
            			break;
            			case (int)5: {
HXLINE( 571)				func(this->_accept,2);
            			}
            			break;
            			case (int)6: {
HXLINE( 573)				func(this->_back,2);
            			}
            			break;
            			case (int)7: {
HXLINE( 575)				func(this->_pause,2);
            			}
            			break;
            			case (int)8: {
HXLINE( 579)				func(this->_cheat,2);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,forEachBound,(void))

void Controls_obj::replaceBinding( ::Control control, ::Device device, ::Dynamic toAdd, ::Dynamic toRemove){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_584_replaceBinding)
HXLINE( 585)		if (::hx::IsEq( toAdd,toRemove )) {
HXLINE( 586)			return;
            		}
HXLINE( 588)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 591)				if (::hx::IsNotNull( toRemove )) {
HXLINE( 592)					this->unbindKeys(control,::Array_obj< int >::__new(1)->init(0,toRemove));
            				}
HXLINE( 593)				if (::hx::IsNotNull( toAdd )) {
HXLINE( 594)					this->bindKeys(control,::Array_obj< int >::__new(1)->init(0,toAdd));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 596)				int id = device->_hx_getInt(0);
HXDLIN( 596)				{
HXLINE( 597)					if (::hx::IsNotNull( toRemove )) {
HXLINE( 598)						this->unbindButtons(control,id,::Array_obj< int >::__new(1)->init(0,toRemove));
            					}
HXLINE( 599)					if (::hx::IsNotNull( toAdd )) {
HXLINE( 600)						this->bindButtons(control,id,::Array_obj< int >::__new(1)->init(0,toAdd));
            					}
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Controls_obj,replaceBinding,(void))

void Controls_obj::copyFrom( ::Controls controls, ::Device device){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_605_copyFrom)
HXLINE( 607)		{
HXLINE( 607)			::Dynamic map = controls->byName;
HXDLIN( 607)			::Dynamic _g_map = map;
HXDLIN( 607)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 607)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 607)				::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 607)				 ::flixel::input::actions::FlxActionDigital _g1_value = ( ( ::flixel::input::actions::FlxActionDigital)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 607)				::String _g1_key = key;
HXDLIN( 607)				::String name = _g1_key;
HXDLIN( 607)				 ::flixel::input::actions::FlxActionDigital action = _g1_value;
HXLINE( 609)				{
HXLINE( 609)					int _g = 0;
HXDLIN( 609)					::Array< ::Dynamic> _g1 = action->inputs;
HXDLIN( 609)					while((_g < _g1->length)){
HXLINE( 609)						 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 609)						_g = (_g + 1);
HXLINE( 611)						bool _hx_tmp;
HXDLIN( 611)						if (::hx::IsNotNull( device )) {
HXLINE( 611)							_hx_tmp = ::Controls_obj::isDevice(input,device);
            						}
            						else {
HXLINE( 611)							_hx_tmp = true;
            						}
HXDLIN( 611)						if (_hx_tmp) {
HXLINE( 612)							( ( ::flixel::input::actions::FlxActionDigital)(this->byName->get(name)) )->add(( ( ::flixel::input::actions::FlxActionInputDigital)(input) ));
            						}
            					}
            				}
            			}
            		}
HXLINE( 627)		if (::hx::IsNull( device )) {
HXLINE( 632)			{
HXLINE( 632)				int _g = 0;
HXDLIN( 632)				::Array< int > _g1 = controls->gamepadsAdded;
HXDLIN( 632)				while((_g < _g1->length)){
HXLINE( 632)					int gamepad = _g1->__get(_g);
HXDLIN( 632)					_g = (_g + 1);
HXLINE( 633)					if (!(this->gamepadsAdded->contains(gamepad))) {
HXLINE( 634)						this->gamepadsAdded->push(gamepad);
            					}
            				}
            			}
HXLINE( 641)			this->mergeKeyboardScheme(controls->keyboardScheme);
            		}
            		else {
HXLINE( 627)			switch((int)(device->_hx_getIndex())){
            				case (int)0: {
HXLINE( 646)					this->mergeKeyboardScheme(controls->keyboardScheme);
            				}
            				break;
            				case (int)1: {
HXLINE( 643)					int id = device->_hx_getInt(0);
HXLINE( 644)					this->gamepadsAdded->push(id);
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,copyFrom,(void))

void Controls_obj::copyTo( ::Controls controls, ::Device device){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_652_copyTo)
HXDLIN( 652)		controls->copyFrom(::hx::ObjectPtr<OBJ_>(this),device);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,copyTo,(void))

void Controls_obj::mergeKeyboardScheme( ::KeyboardScheme scheme){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_657_mergeKeyboardScheme)
HXDLIN( 657)		if (::hx::IsPointerNotEq( scheme,::KeyboardScheme_obj::None_dyn() )) {
HXLINE( 659)			if ((this->keyboardScheme->_hx_getIndex() == 2)) {
HXLINE( 662)				this->keyboardScheme = scheme;
            			}
            			else {
HXLINE( 664)				this->keyboardScheme = ::KeyboardScheme_obj::Custom_dyn();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,mergeKeyboardScheme,(void))

void Controls_obj::bindKeys( ::Control control,::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_676_bindKeys)
HXDLIN( 676)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 676)				{
HXDLIN( 676)					 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 676)					int state = 1;
HXDLIN( 676)					int _g = 0;
HXDLIN( 676)					while((_g < keys->length)){
HXDLIN( 676)						int key = keys->__get(_g);
HXDLIN( 676)						_g = (_g + 1);
HXDLIN( 676)						action->addKey(key,state);
            					}
            				}
HXDLIN( 676)				{
HXDLIN( 676)					 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 676)					int state1 = 2;
HXDLIN( 676)					int _g1 = 0;
HXDLIN( 676)					while((_g1 < keys->length)){
HXDLIN( 676)						int key = keys->__get(_g1);
HXDLIN( 676)						_g1 = (_g1 + 1);
HXDLIN( 676)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 676)				{
HXDLIN( 676)					 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 676)					int state2 = -1;
HXDLIN( 676)					int _g2 = 0;
HXDLIN( 676)					while((_g2 < keys->length)){
HXDLIN( 676)						int key = keys->__get(_g2);
HXDLIN( 676)						_g2 = (_g2 + 1);
HXDLIN( 676)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXDLIN( 676)				{
HXDLIN( 676)					 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 676)					int state = 1;
HXDLIN( 676)					int _g = 0;
HXDLIN( 676)					while((_g < keys->length)){
HXDLIN( 676)						int key = keys->__get(_g);
HXDLIN( 676)						_g = (_g + 1);
HXDLIN( 676)						action->addKey(key,state);
            					}
            				}
HXDLIN( 676)				{
HXDLIN( 676)					 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 676)					int state1 = 2;
HXDLIN( 676)					int _g1 = 0;
HXDLIN( 676)					while((_g1 < keys->length)){
HXDLIN( 676)						int key = keys->__get(_g1);
HXDLIN( 676)						_g1 = (_g1 + 1);
HXDLIN( 676)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 676)				{
HXDLIN( 676)					 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 676)					int state2 = -1;
HXDLIN( 676)					int _g2 = 0;
HXDLIN( 676)					while((_g2 < keys->length)){
HXDLIN( 676)						int key = keys->__get(_g2);
HXDLIN( 676)						_g2 = (_g2 + 1);
HXDLIN( 676)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXDLIN( 676)				{
HXDLIN( 676)					 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 676)					int state = 1;
HXDLIN( 676)					int _g = 0;
HXDLIN( 676)					while((_g < keys->length)){
HXDLIN( 676)						int key = keys->__get(_g);
HXDLIN( 676)						_g = (_g + 1);
HXDLIN( 676)						action->addKey(key,state);
            					}
            				}
HXDLIN( 676)				{
HXDLIN( 676)					 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 676)					int state1 = 2;
HXDLIN( 676)					int _g1 = 0;
HXDLIN( 676)					while((_g1 < keys->length)){
HXDLIN( 676)						int key = keys->__get(_g1);
HXDLIN( 676)						_g1 = (_g1 + 1);
HXDLIN( 676)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 676)				{
HXDLIN( 676)					 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 676)					int state2 = -1;
HXDLIN( 676)					int _g2 = 0;
HXDLIN( 676)					while((_g2 < keys->length)){
HXDLIN( 676)						int key = keys->__get(_g2);
HXDLIN( 676)						_g2 = (_g2 + 1);
HXDLIN( 676)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXDLIN( 676)				{
HXDLIN( 676)					 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 676)					int state = 1;
HXDLIN( 676)					int _g = 0;
HXDLIN( 676)					while((_g < keys->length)){
HXDLIN( 676)						int key = keys->__get(_g);
HXDLIN( 676)						_g = (_g + 1);
HXDLIN( 676)						action->addKey(key,state);
            					}
            				}
HXDLIN( 676)				{
HXDLIN( 676)					 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 676)					int state1 = 2;
HXDLIN( 676)					int _g1 = 0;
HXDLIN( 676)					while((_g1 < keys->length)){
HXDLIN( 676)						int key = keys->__get(_g1);
HXDLIN( 676)						_g1 = (_g1 + 1);
HXDLIN( 676)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 676)				{
HXDLIN( 676)					 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 676)					int state2 = -1;
HXDLIN( 676)					int _g2 = 0;
HXDLIN( 676)					while((_g2 < keys->length)){
HXDLIN( 676)						int key = keys->__get(_g2);
HXDLIN( 676)						_g2 = (_g2 + 1);
HXDLIN( 676)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXDLIN( 676)				 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 676)				int state = 2;
HXDLIN( 676)				int _g = 0;
HXDLIN( 676)				while((_g < keys->length)){
HXDLIN( 676)					int key = keys->__get(_g);
HXDLIN( 676)					_g = (_g + 1);
HXDLIN( 676)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)5: {
HXDLIN( 676)				 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 676)				int state = 2;
HXDLIN( 676)				int _g = 0;
HXDLIN( 676)				while((_g < keys->length)){
HXDLIN( 676)					int key = keys->__get(_g);
HXDLIN( 676)					_g = (_g + 1);
HXDLIN( 676)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)6: {
HXDLIN( 676)				 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 676)				int state = 2;
HXDLIN( 676)				int _g = 0;
HXDLIN( 676)				while((_g < keys->length)){
HXDLIN( 676)					int key = keys->__get(_g);
HXDLIN( 676)					_g = (_g + 1);
HXDLIN( 676)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)7: {
HXDLIN( 676)				 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 676)				int state = 2;
HXDLIN( 676)				int _g = 0;
HXDLIN( 676)				while((_g < keys->length)){
HXDLIN( 676)					int key = keys->__get(_g);
HXDLIN( 676)					_g = (_g + 1);
HXDLIN( 676)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)8: {
HXDLIN( 676)				 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 676)				int state = 2;
HXDLIN( 676)				int _g = 0;
HXDLIN( 676)				while((_g < keys->length)){
HXDLIN( 676)					int key = keys->__get(_g);
HXDLIN( 676)					_g = (_g + 1);
HXDLIN( 676)					action->addKey(key,state);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,bindKeys,(void))

void Controls_obj::unbindKeys( ::Control control,::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_689_unbindKeys)
HXDLIN( 689)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 689)				::Controls_obj::removeKeys(this->_up,keys);
HXDLIN( 689)				::Controls_obj::removeKeys(this->_upP,keys);
HXDLIN( 689)				::Controls_obj::removeKeys(this->_upR,keys);
            			}
            			break;
            			case (int)1: {
HXDLIN( 689)				::Controls_obj::removeKeys(this->_left,keys);
HXDLIN( 689)				::Controls_obj::removeKeys(this->_leftP,keys);
HXDLIN( 689)				::Controls_obj::removeKeys(this->_leftR,keys);
            			}
            			break;
            			case (int)2: {
HXDLIN( 689)				::Controls_obj::removeKeys(this->_right,keys);
HXDLIN( 689)				::Controls_obj::removeKeys(this->_rightP,keys);
HXDLIN( 689)				::Controls_obj::removeKeys(this->_rightR,keys);
            			}
            			break;
            			case (int)3: {
HXDLIN( 689)				::Controls_obj::removeKeys(this->_down,keys);
HXDLIN( 689)				::Controls_obj::removeKeys(this->_downP,keys);
HXDLIN( 689)				::Controls_obj::removeKeys(this->_downR,keys);
            			}
            			break;
            			case (int)4: {
HXDLIN( 689)				::Controls_obj::removeKeys(this->_reset,keys);
            			}
            			break;
            			case (int)5: {
HXDLIN( 689)				::Controls_obj::removeKeys(this->_accept,keys);
            			}
            			break;
            			case (int)6: {
HXDLIN( 689)				::Controls_obj::removeKeys(this->_back,keys);
            			}
            			break;
            			case (int)7: {
HXDLIN( 689)				::Controls_obj::removeKeys(this->_pause,keys);
            			}
            			break;
            			case (int)8: {
HXDLIN( 689)				::Controls_obj::removeKeys(this->_cheat,keys);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,unbindKeys,(void))

void Controls_obj::setKeyboardScheme( ::KeyboardScheme scheme,::hx::Null< bool >  __o_reset){
            		bool reset = __o_reset.Default(true);
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_715_setKeyboardScheme)
HXDLIN( 715)		this->loadKeyBinds();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,setKeyboardScheme,(void))

void Controls_obj::loadKeyBinds(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_791_loadKeyBinds)
HXLINE( 795)		this->removeKeyboard();
HXLINE( 797)		{
HXLINE( 797)			::String s = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)) );
HXDLIN( 797)			s = s.toUpperCase();
HXDLIN( 797)			int keys;
HXDLIN( 797)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 797)				keys = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            			}
            			else {
HXLINE( 797)				keys = -1;
            			}
HXDLIN( 797)			::Array< int > keys1 = ::Array_obj< int >::__new(2)->init(0,keys)->init(1,38);
HXDLIN( 797)			switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 797)					{
HXLINE( 797)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 797)						int state = 1;
HXDLIN( 797)						int _g = 0;
HXDLIN( 797)						while((_g < keys1->length)){
HXLINE( 797)							int key = keys1->__get(_g);
HXDLIN( 797)							_g = (_g + 1);
HXDLIN( 797)							action->addKey(key,state);
            						}
            					}
HXDLIN( 797)					{
HXLINE( 797)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 797)						int state1 = 2;
HXDLIN( 797)						int _g1 = 0;
HXDLIN( 797)						while((_g1 < keys1->length)){
HXLINE( 797)							int key = keys1->__get(_g1);
HXDLIN( 797)							_g1 = (_g1 + 1);
HXDLIN( 797)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 797)					{
HXLINE( 797)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 797)						int state2 = -1;
HXDLIN( 797)						int _g2 = 0;
HXDLIN( 797)						while((_g2 < keys1->length)){
HXLINE( 797)							int key = keys1->__get(_g2);
HXDLIN( 797)							_g2 = (_g2 + 1);
HXDLIN( 797)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 797)					{
HXLINE( 797)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 797)						int state = 1;
HXDLIN( 797)						int _g = 0;
HXDLIN( 797)						while((_g < keys1->length)){
HXLINE( 797)							int key = keys1->__get(_g);
HXDLIN( 797)							_g = (_g + 1);
HXDLIN( 797)							action->addKey(key,state);
            						}
            					}
HXDLIN( 797)					{
HXLINE( 797)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 797)						int state1 = 2;
HXDLIN( 797)						int _g1 = 0;
HXDLIN( 797)						while((_g1 < keys1->length)){
HXLINE( 797)							int key = keys1->__get(_g1);
HXDLIN( 797)							_g1 = (_g1 + 1);
HXDLIN( 797)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 797)					{
HXLINE( 797)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 797)						int state2 = -1;
HXDLIN( 797)						int _g2 = 0;
HXDLIN( 797)						while((_g2 < keys1->length)){
HXLINE( 797)							int key = keys1->__get(_g2);
HXDLIN( 797)							_g2 = (_g2 + 1);
HXDLIN( 797)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 797)					{
HXLINE( 797)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 797)						int state = 1;
HXDLIN( 797)						int _g = 0;
HXDLIN( 797)						while((_g < keys1->length)){
HXLINE( 797)							int key = keys1->__get(_g);
HXDLIN( 797)							_g = (_g + 1);
HXDLIN( 797)							action->addKey(key,state);
            						}
            					}
HXDLIN( 797)					{
HXLINE( 797)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 797)						int state1 = 2;
HXDLIN( 797)						int _g1 = 0;
HXDLIN( 797)						while((_g1 < keys1->length)){
HXLINE( 797)							int key = keys1->__get(_g1);
HXDLIN( 797)							_g1 = (_g1 + 1);
HXDLIN( 797)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 797)					{
HXLINE( 797)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 797)						int state2 = -1;
HXDLIN( 797)						int _g2 = 0;
HXDLIN( 797)						while((_g2 < keys1->length)){
HXLINE( 797)							int key = keys1->__get(_g2);
HXDLIN( 797)							_g2 = (_g2 + 1);
HXDLIN( 797)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 797)					{
HXLINE( 797)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 797)						int state = 1;
HXDLIN( 797)						int _g = 0;
HXDLIN( 797)						while((_g < keys1->length)){
HXLINE( 797)							int key = keys1->__get(_g);
HXDLIN( 797)							_g = (_g + 1);
HXDLIN( 797)							action->addKey(key,state);
            						}
            					}
HXDLIN( 797)					{
HXLINE( 797)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 797)						int state1 = 2;
HXDLIN( 797)						int _g1 = 0;
HXDLIN( 797)						while((_g1 < keys1->length)){
HXLINE( 797)							int key = keys1->__get(_g1);
HXDLIN( 797)							_g1 = (_g1 + 1);
HXDLIN( 797)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 797)					{
HXLINE( 797)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 797)						int state2 = -1;
HXDLIN( 797)						int _g2 = 0;
HXDLIN( 797)						while((_g2 < keys1->length)){
HXLINE( 797)							int key = keys1->__get(_g2);
HXDLIN( 797)							_g2 = (_g2 + 1);
HXDLIN( 797)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 797)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 797)					int state = 2;
HXDLIN( 797)					int _g = 0;
HXDLIN( 797)					while((_g < keys1->length)){
HXLINE( 797)						int key = keys1->__get(_g);
HXDLIN( 797)						_g = (_g + 1);
HXDLIN( 797)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 797)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 797)					int state = 2;
HXDLIN( 797)					int _g = 0;
HXDLIN( 797)					while((_g < keys1->length)){
HXLINE( 797)						int key = keys1->__get(_g);
HXDLIN( 797)						_g = (_g + 1);
HXDLIN( 797)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 797)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 797)					int state = 2;
HXDLIN( 797)					int _g = 0;
HXDLIN( 797)					while((_g < keys1->length)){
HXLINE( 797)						int key = keys1->__get(_g);
HXDLIN( 797)						_g = (_g + 1);
HXDLIN( 797)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 797)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 797)					int state = 2;
HXDLIN( 797)					int _g = 0;
HXDLIN( 797)					while((_g < keys1->length)){
HXLINE( 797)						int key = keys1->__get(_g);
HXDLIN( 797)						_g = (_g + 1);
HXDLIN( 797)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 797)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 797)					int state = 2;
HXDLIN( 797)					int _g = 0;
HXDLIN( 797)					while((_g < keys1->length)){
HXLINE( 797)						int key = keys1->__get(_g);
HXDLIN( 797)						_g = (_g + 1);
HXDLIN( 797)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 798)		{
HXLINE( 798)			::String s1 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)) );
HXDLIN( 798)			s1 = s1.toUpperCase();
HXDLIN( 798)			int keys2;
HXDLIN( 798)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s1)) {
HXLINE( 798)				keys2 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s1);
            			}
            			else {
HXLINE( 798)				keys2 = -1;
            			}
HXDLIN( 798)			::Array< int > keys3 = ::Array_obj< int >::__new(2)->init(0,keys2)->init(1,40);
HXDLIN( 798)			switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 798)					{
HXLINE( 798)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 798)						int state = 1;
HXDLIN( 798)						int _g = 0;
HXDLIN( 798)						while((_g < keys3->length)){
HXLINE( 798)							int key = keys3->__get(_g);
HXDLIN( 798)							_g = (_g + 1);
HXDLIN( 798)							action->addKey(key,state);
            						}
            					}
HXDLIN( 798)					{
HXLINE( 798)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 798)						int state1 = 2;
HXDLIN( 798)						int _g1 = 0;
HXDLIN( 798)						while((_g1 < keys3->length)){
HXLINE( 798)							int key = keys3->__get(_g1);
HXDLIN( 798)							_g1 = (_g1 + 1);
HXDLIN( 798)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 798)					{
HXLINE( 798)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 798)						int state2 = -1;
HXDLIN( 798)						int _g2 = 0;
HXDLIN( 798)						while((_g2 < keys3->length)){
HXLINE( 798)							int key = keys3->__get(_g2);
HXDLIN( 798)							_g2 = (_g2 + 1);
HXDLIN( 798)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 798)					{
HXLINE( 798)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 798)						int state = 1;
HXDLIN( 798)						int _g = 0;
HXDLIN( 798)						while((_g < keys3->length)){
HXLINE( 798)							int key = keys3->__get(_g);
HXDLIN( 798)							_g = (_g + 1);
HXDLIN( 798)							action->addKey(key,state);
            						}
            					}
HXDLIN( 798)					{
HXLINE( 798)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 798)						int state1 = 2;
HXDLIN( 798)						int _g1 = 0;
HXDLIN( 798)						while((_g1 < keys3->length)){
HXLINE( 798)							int key = keys3->__get(_g1);
HXDLIN( 798)							_g1 = (_g1 + 1);
HXDLIN( 798)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 798)					{
HXLINE( 798)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 798)						int state2 = -1;
HXDLIN( 798)						int _g2 = 0;
HXDLIN( 798)						while((_g2 < keys3->length)){
HXLINE( 798)							int key = keys3->__get(_g2);
HXDLIN( 798)							_g2 = (_g2 + 1);
HXDLIN( 798)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 798)					{
HXLINE( 798)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 798)						int state = 1;
HXDLIN( 798)						int _g = 0;
HXDLIN( 798)						while((_g < keys3->length)){
HXLINE( 798)							int key = keys3->__get(_g);
HXDLIN( 798)							_g = (_g + 1);
HXDLIN( 798)							action->addKey(key,state);
            						}
            					}
HXDLIN( 798)					{
HXLINE( 798)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 798)						int state1 = 2;
HXDLIN( 798)						int _g1 = 0;
HXDLIN( 798)						while((_g1 < keys3->length)){
HXLINE( 798)							int key = keys3->__get(_g1);
HXDLIN( 798)							_g1 = (_g1 + 1);
HXDLIN( 798)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 798)					{
HXLINE( 798)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 798)						int state2 = -1;
HXDLIN( 798)						int _g2 = 0;
HXDLIN( 798)						while((_g2 < keys3->length)){
HXLINE( 798)							int key = keys3->__get(_g2);
HXDLIN( 798)							_g2 = (_g2 + 1);
HXDLIN( 798)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 798)					{
HXLINE( 798)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 798)						int state = 1;
HXDLIN( 798)						int _g = 0;
HXDLIN( 798)						while((_g < keys3->length)){
HXLINE( 798)							int key = keys3->__get(_g);
HXDLIN( 798)							_g = (_g + 1);
HXDLIN( 798)							action->addKey(key,state);
            						}
            					}
HXDLIN( 798)					{
HXLINE( 798)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 798)						int state1 = 2;
HXDLIN( 798)						int _g1 = 0;
HXDLIN( 798)						while((_g1 < keys3->length)){
HXLINE( 798)							int key = keys3->__get(_g1);
HXDLIN( 798)							_g1 = (_g1 + 1);
HXDLIN( 798)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 798)					{
HXLINE( 798)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 798)						int state2 = -1;
HXDLIN( 798)						int _g2 = 0;
HXDLIN( 798)						while((_g2 < keys3->length)){
HXLINE( 798)							int key = keys3->__get(_g2);
HXDLIN( 798)							_g2 = (_g2 + 1);
HXDLIN( 798)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 798)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 798)					int state = 2;
HXDLIN( 798)					int _g = 0;
HXDLIN( 798)					while((_g < keys3->length)){
HXLINE( 798)						int key = keys3->__get(_g);
HXDLIN( 798)						_g = (_g + 1);
HXDLIN( 798)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 798)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 798)					int state = 2;
HXDLIN( 798)					int _g = 0;
HXDLIN( 798)					while((_g < keys3->length)){
HXLINE( 798)						int key = keys3->__get(_g);
HXDLIN( 798)						_g = (_g + 1);
HXDLIN( 798)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 798)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 798)					int state = 2;
HXDLIN( 798)					int _g = 0;
HXDLIN( 798)					while((_g < keys3->length)){
HXLINE( 798)						int key = keys3->__get(_g);
HXDLIN( 798)						_g = (_g + 1);
HXDLIN( 798)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 798)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 798)					int state = 2;
HXDLIN( 798)					int _g = 0;
HXDLIN( 798)					while((_g < keys3->length)){
HXLINE( 798)						int key = keys3->__get(_g);
HXDLIN( 798)						_g = (_g + 1);
HXDLIN( 798)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 798)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 798)					int state = 2;
HXDLIN( 798)					int _g = 0;
HXDLIN( 798)					while((_g < keys3->length)){
HXLINE( 798)						int key = keys3->__get(_g);
HXDLIN( 798)						_g = (_g + 1);
HXDLIN( 798)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 799)		{
HXLINE( 799)			::String s2 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)) );
HXDLIN( 799)			s2 = s2.toUpperCase();
HXDLIN( 799)			int keys4;
HXDLIN( 799)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s2)) {
HXLINE( 799)				keys4 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s2);
            			}
            			else {
HXLINE( 799)				keys4 = -1;
            			}
HXDLIN( 799)			::Array< int > keys5 = ::Array_obj< int >::__new(2)->init(0,keys4)->init(1,37);
HXDLIN( 799)			switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 799)					{
HXLINE( 799)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 799)						int state = 1;
HXDLIN( 799)						int _g = 0;
HXDLIN( 799)						while((_g < keys5->length)){
HXLINE( 799)							int key = keys5->__get(_g);
HXDLIN( 799)							_g = (_g + 1);
HXDLIN( 799)							action->addKey(key,state);
            						}
            					}
HXDLIN( 799)					{
HXLINE( 799)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 799)						int state1 = 2;
HXDLIN( 799)						int _g1 = 0;
HXDLIN( 799)						while((_g1 < keys5->length)){
HXLINE( 799)							int key = keys5->__get(_g1);
HXDLIN( 799)							_g1 = (_g1 + 1);
HXDLIN( 799)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 799)					{
HXLINE( 799)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 799)						int state2 = -1;
HXDLIN( 799)						int _g2 = 0;
HXDLIN( 799)						while((_g2 < keys5->length)){
HXLINE( 799)							int key = keys5->__get(_g2);
HXDLIN( 799)							_g2 = (_g2 + 1);
HXDLIN( 799)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 799)					{
HXLINE( 799)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 799)						int state = 1;
HXDLIN( 799)						int _g = 0;
HXDLIN( 799)						while((_g < keys5->length)){
HXLINE( 799)							int key = keys5->__get(_g);
HXDLIN( 799)							_g = (_g + 1);
HXDLIN( 799)							action->addKey(key,state);
            						}
            					}
HXDLIN( 799)					{
HXLINE( 799)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 799)						int state1 = 2;
HXDLIN( 799)						int _g1 = 0;
HXDLIN( 799)						while((_g1 < keys5->length)){
HXLINE( 799)							int key = keys5->__get(_g1);
HXDLIN( 799)							_g1 = (_g1 + 1);
HXDLIN( 799)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 799)					{
HXLINE( 799)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 799)						int state2 = -1;
HXDLIN( 799)						int _g2 = 0;
HXDLIN( 799)						while((_g2 < keys5->length)){
HXLINE( 799)							int key = keys5->__get(_g2);
HXDLIN( 799)							_g2 = (_g2 + 1);
HXDLIN( 799)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 799)					{
HXLINE( 799)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 799)						int state = 1;
HXDLIN( 799)						int _g = 0;
HXDLIN( 799)						while((_g < keys5->length)){
HXLINE( 799)							int key = keys5->__get(_g);
HXDLIN( 799)							_g = (_g + 1);
HXDLIN( 799)							action->addKey(key,state);
            						}
            					}
HXDLIN( 799)					{
HXLINE( 799)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 799)						int state1 = 2;
HXDLIN( 799)						int _g1 = 0;
HXDLIN( 799)						while((_g1 < keys5->length)){
HXLINE( 799)							int key = keys5->__get(_g1);
HXDLIN( 799)							_g1 = (_g1 + 1);
HXDLIN( 799)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 799)					{
HXLINE( 799)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 799)						int state2 = -1;
HXDLIN( 799)						int _g2 = 0;
HXDLIN( 799)						while((_g2 < keys5->length)){
HXLINE( 799)							int key = keys5->__get(_g2);
HXDLIN( 799)							_g2 = (_g2 + 1);
HXDLIN( 799)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 799)					{
HXLINE( 799)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 799)						int state = 1;
HXDLIN( 799)						int _g = 0;
HXDLIN( 799)						while((_g < keys5->length)){
HXLINE( 799)							int key = keys5->__get(_g);
HXDLIN( 799)							_g = (_g + 1);
HXDLIN( 799)							action->addKey(key,state);
            						}
            					}
HXDLIN( 799)					{
HXLINE( 799)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 799)						int state1 = 2;
HXDLIN( 799)						int _g1 = 0;
HXDLIN( 799)						while((_g1 < keys5->length)){
HXLINE( 799)							int key = keys5->__get(_g1);
HXDLIN( 799)							_g1 = (_g1 + 1);
HXDLIN( 799)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 799)					{
HXLINE( 799)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 799)						int state2 = -1;
HXDLIN( 799)						int _g2 = 0;
HXDLIN( 799)						while((_g2 < keys5->length)){
HXLINE( 799)							int key = keys5->__get(_g2);
HXDLIN( 799)							_g2 = (_g2 + 1);
HXDLIN( 799)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 799)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 799)					int state = 2;
HXDLIN( 799)					int _g = 0;
HXDLIN( 799)					while((_g < keys5->length)){
HXLINE( 799)						int key = keys5->__get(_g);
HXDLIN( 799)						_g = (_g + 1);
HXDLIN( 799)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 799)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 799)					int state = 2;
HXDLIN( 799)					int _g = 0;
HXDLIN( 799)					while((_g < keys5->length)){
HXLINE( 799)						int key = keys5->__get(_g);
HXDLIN( 799)						_g = (_g + 1);
HXDLIN( 799)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 799)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 799)					int state = 2;
HXDLIN( 799)					int _g = 0;
HXDLIN( 799)					while((_g < keys5->length)){
HXLINE( 799)						int key = keys5->__get(_g);
HXDLIN( 799)						_g = (_g + 1);
HXDLIN( 799)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 799)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 799)					int state = 2;
HXDLIN( 799)					int _g = 0;
HXDLIN( 799)					while((_g < keys5->length)){
HXLINE( 799)						int key = keys5->__get(_g);
HXDLIN( 799)						_g = (_g + 1);
HXDLIN( 799)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 799)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 799)					int state = 2;
HXDLIN( 799)					int _g = 0;
HXDLIN( 799)					while((_g < keys5->length)){
HXLINE( 799)						int key = keys5->__get(_g);
HXDLIN( 799)						_g = (_g + 1);
HXDLIN( 799)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 800)		{
HXLINE( 800)			::String s3 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)) );
HXDLIN( 800)			s3 = s3.toUpperCase();
HXDLIN( 800)			int keys6;
HXDLIN( 800)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s3)) {
HXLINE( 800)				keys6 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s3);
            			}
            			else {
HXLINE( 800)				keys6 = -1;
            			}
HXDLIN( 800)			::Array< int > keys7 = ::Array_obj< int >::__new(2)->init(0,keys6)->init(1,39);
HXDLIN( 800)			switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 800)					{
HXLINE( 800)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 800)						int state = 1;
HXDLIN( 800)						int _g = 0;
HXDLIN( 800)						while((_g < keys7->length)){
HXLINE( 800)							int key = keys7->__get(_g);
HXDLIN( 800)							_g = (_g + 1);
HXDLIN( 800)							action->addKey(key,state);
            						}
            					}
HXDLIN( 800)					{
HXLINE( 800)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 800)						int state1 = 2;
HXDLIN( 800)						int _g1 = 0;
HXDLIN( 800)						while((_g1 < keys7->length)){
HXLINE( 800)							int key = keys7->__get(_g1);
HXDLIN( 800)							_g1 = (_g1 + 1);
HXDLIN( 800)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 800)					{
HXLINE( 800)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 800)						int state2 = -1;
HXDLIN( 800)						int _g2 = 0;
HXDLIN( 800)						while((_g2 < keys7->length)){
HXLINE( 800)							int key = keys7->__get(_g2);
HXDLIN( 800)							_g2 = (_g2 + 1);
HXDLIN( 800)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 800)					{
HXLINE( 800)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 800)						int state = 1;
HXDLIN( 800)						int _g = 0;
HXDLIN( 800)						while((_g < keys7->length)){
HXLINE( 800)							int key = keys7->__get(_g);
HXDLIN( 800)							_g = (_g + 1);
HXDLIN( 800)							action->addKey(key,state);
            						}
            					}
HXDLIN( 800)					{
HXLINE( 800)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 800)						int state1 = 2;
HXDLIN( 800)						int _g1 = 0;
HXDLIN( 800)						while((_g1 < keys7->length)){
HXLINE( 800)							int key = keys7->__get(_g1);
HXDLIN( 800)							_g1 = (_g1 + 1);
HXDLIN( 800)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 800)					{
HXLINE( 800)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 800)						int state2 = -1;
HXDLIN( 800)						int _g2 = 0;
HXDLIN( 800)						while((_g2 < keys7->length)){
HXLINE( 800)							int key = keys7->__get(_g2);
HXDLIN( 800)							_g2 = (_g2 + 1);
HXDLIN( 800)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 800)					{
HXLINE( 800)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 800)						int state = 1;
HXDLIN( 800)						int _g = 0;
HXDLIN( 800)						while((_g < keys7->length)){
HXLINE( 800)							int key = keys7->__get(_g);
HXDLIN( 800)							_g = (_g + 1);
HXDLIN( 800)							action->addKey(key,state);
            						}
            					}
HXDLIN( 800)					{
HXLINE( 800)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 800)						int state1 = 2;
HXDLIN( 800)						int _g1 = 0;
HXDLIN( 800)						while((_g1 < keys7->length)){
HXLINE( 800)							int key = keys7->__get(_g1);
HXDLIN( 800)							_g1 = (_g1 + 1);
HXDLIN( 800)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 800)					{
HXLINE( 800)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 800)						int state2 = -1;
HXDLIN( 800)						int _g2 = 0;
HXDLIN( 800)						while((_g2 < keys7->length)){
HXLINE( 800)							int key = keys7->__get(_g2);
HXDLIN( 800)							_g2 = (_g2 + 1);
HXDLIN( 800)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 800)					{
HXLINE( 800)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 800)						int state = 1;
HXDLIN( 800)						int _g = 0;
HXDLIN( 800)						while((_g < keys7->length)){
HXLINE( 800)							int key = keys7->__get(_g);
HXDLIN( 800)							_g = (_g + 1);
HXDLIN( 800)							action->addKey(key,state);
            						}
            					}
HXDLIN( 800)					{
HXLINE( 800)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 800)						int state1 = 2;
HXDLIN( 800)						int _g1 = 0;
HXDLIN( 800)						while((_g1 < keys7->length)){
HXLINE( 800)							int key = keys7->__get(_g1);
HXDLIN( 800)							_g1 = (_g1 + 1);
HXDLIN( 800)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 800)					{
HXLINE( 800)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 800)						int state2 = -1;
HXDLIN( 800)						int _g2 = 0;
HXDLIN( 800)						while((_g2 < keys7->length)){
HXLINE( 800)							int key = keys7->__get(_g2);
HXDLIN( 800)							_g2 = (_g2 + 1);
HXDLIN( 800)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 800)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 800)					int state = 2;
HXDLIN( 800)					int _g = 0;
HXDLIN( 800)					while((_g < keys7->length)){
HXLINE( 800)						int key = keys7->__get(_g);
HXDLIN( 800)						_g = (_g + 1);
HXDLIN( 800)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 800)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 800)					int state = 2;
HXDLIN( 800)					int _g = 0;
HXDLIN( 800)					while((_g < keys7->length)){
HXLINE( 800)						int key = keys7->__get(_g);
HXDLIN( 800)						_g = (_g + 1);
HXDLIN( 800)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 800)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 800)					int state = 2;
HXDLIN( 800)					int _g = 0;
HXDLIN( 800)					while((_g < keys7->length)){
HXLINE( 800)						int key = keys7->__get(_g);
HXDLIN( 800)						_g = (_g + 1);
HXDLIN( 800)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 800)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 800)					int state = 2;
HXDLIN( 800)					int _g = 0;
HXDLIN( 800)					while((_g < keys7->length)){
HXLINE( 800)						int key = keys7->__get(_g);
HXDLIN( 800)						_g = (_g + 1);
HXDLIN( 800)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 800)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 800)					int state = 2;
HXDLIN( 800)					int _g = 0;
HXDLIN( 800)					while((_g < keys7->length)){
HXLINE( 800)						int key = keys7->__get(_g);
HXDLIN( 800)						_g = (_g + 1);
HXDLIN( 800)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 801)		{
HXLINE( 801)			::Array< int > keys8 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_197,3);
HXDLIN( 801)			switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 801)					{
HXLINE( 801)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 801)						int state = 1;
HXDLIN( 801)						int _g = 0;
HXDLIN( 801)						while((_g < keys8->length)){
HXLINE( 801)							int key = keys8->__get(_g);
HXDLIN( 801)							_g = (_g + 1);
HXDLIN( 801)							action->addKey(key,state);
            						}
            					}
HXDLIN( 801)					{
HXLINE( 801)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 801)						int state1 = 2;
HXDLIN( 801)						int _g1 = 0;
HXDLIN( 801)						while((_g1 < keys8->length)){
HXLINE( 801)							int key = keys8->__get(_g1);
HXDLIN( 801)							_g1 = (_g1 + 1);
HXDLIN( 801)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 801)					{
HXLINE( 801)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 801)						int state2 = -1;
HXDLIN( 801)						int _g2 = 0;
HXDLIN( 801)						while((_g2 < keys8->length)){
HXLINE( 801)							int key = keys8->__get(_g2);
HXDLIN( 801)							_g2 = (_g2 + 1);
HXDLIN( 801)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 801)					{
HXLINE( 801)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 801)						int state = 1;
HXDLIN( 801)						int _g = 0;
HXDLIN( 801)						while((_g < keys8->length)){
HXLINE( 801)							int key = keys8->__get(_g);
HXDLIN( 801)							_g = (_g + 1);
HXDLIN( 801)							action->addKey(key,state);
            						}
            					}
HXDLIN( 801)					{
HXLINE( 801)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 801)						int state1 = 2;
HXDLIN( 801)						int _g1 = 0;
HXDLIN( 801)						while((_g1 < keys8->length)){
HXLINE( 801)							int key = keys8->__get(_g1);
HXDLIN( 801)							_g1 = (_g1 + 1);
HXDLIN( 801)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 801)					{
HXLINE( 801)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 801)						int state2 = -1;
HXDLIN( 801)						int _g2 = 0;
HXDLIN( 801)						while((_g2 < keys8->length)){
HXLINE( 801)							int key = keys8->__get(_g2);
HXDLIN( 801)							_g2 = (_g2 + 1);
HXDLIN( 801)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 801)					{
HXLINE( 801)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 801)						int state = 1;
HXDLIN( 801)						int _g = 0;
HXDLIN( 801)						while((_g < keys8->length)){
HXLINE( 801)							int key = keys8->__get(_g);
HXDLIN( 801)							_g = (_g + 1);
HXDLIN( 801)							action->addKey(key,state);
            						}
            					}
HXDLIN( 801)					{
HXLINE( 801)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 801)						int state1 = 2;
HXDLIN( 801)						int _g1 = 0;
HXDLIN( 801)						while((_g1 < keys8->length)){
HXLINE( 801)							int key = keys8->__get(_g1);
HXDLIN( 801)							_g1 = (_g1 + 1);
HXDLIN( 801)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 801)					{
HXLINE( 801)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 801)						int state2 = -1;
HXDLIN( 801)						int _g2 = 0;
HXDLIN( 801)						while((_g2 < keys8->length)){
HXLINE( 801)							int key = keys8->__get(_g2);
HXDLIN( 801)							_g2 = (_g2 + 1);
HXDLIN( 801)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 801)					{
HXLINE( 801)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 801)						int state = 1;
HXDLIN( 801)						int _g = 0;
HXDLIN( 801)						while((_g < keys8->length)){
HXLINE( 801)							int key = keys8->__get(_g);
HXDLIN( 801)							_g = (_g + 1);
HXDLIN( 801)							action->addKey(key,state);
            						}
            					}
HXDLIN( 801)					{
HXLINE( 801)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 801)						int state1 = 2;
HXDLIN( 801)						int _g1 = 0;
HXDLIN( 801)						while((_g1 < keys8->length)){
HXLINE( 801)							int key = keys8->__get(_g1);
HXDLIN( 801)							_g1 = (_g1 + 1);
HXDLIN( 801)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 801)					{
HXLINE( 801)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 801)						int state2 = -1;
HXDLIN( 801)						int _g2 = 0;
HXDLIN( 801)						while((_g2 < keys8->length)){
HXLINE( 801)							int key = keys8->__get(_g2);
HXDLIN( 801)							_g2 = (_g2 + 1);
HXDLIN( 801)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 801)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 801)					int state = 2;
HXDLIN( 801)					int _g = 0;
HXDLIN( 801)					while((_g < keys8->length)){
HXLINE( 801)						int key = keys8->__get(_g);
HXDLIN( 801)						_g = (_g + 1);
HXDLIN( 801)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 801)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 801)					int state = 2;
HXDLIN( 801)					int _g = 0;
HXDLIN( 801)					while((_g < keys8->length)){
HXLINE( 801)						int key = keys8->__get(_g);
HXDLIN( 801)						_g = (_g + 1);
HXDLIN( 801)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 801)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 801)					int state = 2;
HXDLIN( 801)					int _g = 0;
HXDLIN( 801)					while((_g < keys8->length)){
HXLINE( 801)						int key = keys8->__get(_g);
HXDLIN( 801)						_g = (_g + 1);
HXDLIN( 801)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 801)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 801)					int state = 2;
HXDLIN( 801)					int _g = 0;
HXDLIN( 801)					while((_g < keys8->length)){
HXLINE( 801)						int key = keys8->__get(_g);
HXDLIN( 801)						_g = (_g + 1);
HXDLIN( 801)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 801)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 801)					int state = 2;
HXDLIN( 801)					int _g = 0;
HXDLIN( 801)					while((_g < keys8->length)){
HXLINE( 801)						int key = keys8->__get(_g);
HXDLIN( 801)						_g = (_g + 1);
HXDLIN( 801)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 802)		{
HXLINE( 802)			::Array< int > keys9 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_198,2);
HXDLIN( 802)			switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 802)					{
HXLINE( 802)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 802)						int state = 1;
HXDLIN( 802)						int _g = 0;
HXDLIN( 802)						while((_g < keys9->length)){
HXLINE( 802)							int key = keys9->__get(_g);
HXDLIN( 802)							_g = (_g + 1);
HXDLIN( 802)							action->addKey(key,state);
            						}
            					}
HXDLIN( 802)					{
HXLINE( 802)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 802)						int state1 = 2;
HXDLIN( 802)						int _g1 = 0;
HXDLIN( 802)						while((_g1 < keys9->length)){
HXLINE( 802)							int key = keys9->__get(_g1);
HXDLIN( 802)							_g1 = (_g1 + 1);
HXDLIN( 802)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 802)					{
HXLINE( 802)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 802)						int state2 = -1;
HXDLIN( 802)						int _g2 = 0;
HXDLIN( 802)						while((_g2 < keys9->length)){
HXLINE( 802)							int key = keys9->__get(_g2);
HXDLIN( 802)							_g2 = (_g2 + 1);
HXDLIN( 802)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 802)					{
HXLINE( 802)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 802)						int state = 1;
HXDLIN( 802)						int _g = 0;
HXDLIN( 802)						while((_g < keys9->length)){
HXLINE( 802)							int key = keys9->__get(_g);
HXDLIN( 802)							_g = (_g + 1);
HXDLIN( 802)							action->addKey(key,state);
            						}
            					}
HXDLIN( 802)					{
HXLINE( 802)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 802)						int state1 = 2;
HXDLIN( 802)						int _g1 = 0;
HXDLIN( 802)						while((_g1 < keys9->length)){
HXLINE( 802)							int key = keys9->__get(_g1);
HXDLIN( 802)							_g1 = (_g1 + 1);
HXDLIN( 802)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 802)					{
HXLINE( 802)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 802)						int state2 = -1;
HXDLIN( 802)						int _g2 = 0;
HXDLIN( 802)						while((_g2 < keys9->length)){
HXLINE( 802)							int key = keys9->__get(_g2);
HXDLIN( 802)							_g2 = (_g2 + 1);
HXDLIN( 802)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 802)					{
HXLINE( 802)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 802)						int state = 1;
HXDLIN( 802)						int _g = 0;
HXDLIN( 802)						while((_g < keys9->length)){
HXLINE( 802)							int key = keys9->__get(_g);
HXDLIN( 802)							_g = (_g + 1);
HXDLIN( 802)							action->addKey(key,state);
            						}
            					}
HXDLIN( 802)					{
HXLINE( 802)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 802)						int state1 = 2;
HXDLIN( 802)						int _g1 = 0;
HXDLIN( 802)						while((_g1 < keys9->length)){
HXLINE( 802)							int key = keys9->__get(_g1);
HXDLIN( 802)							_g1 = (_g1 + 1);
HXDLIN( 802)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 802)					{
HXLINE( 802)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 802)						int state2 = -1;
HXDLIN( 802)						int _g2 = 0;
HXDLIN( 802)						while((_g2 < keys9->length)){
HXLINE( 802)							int key = keys9->__get(_g2);
HXDLIN( 802)							_g2 = (_g2 + 1);
HXDLIN( 802)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 802)					{
HXLINE( 802)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 802)						int state = 1;
HXDLIN( 802)						int _g = 0;
HXDLIN( 802)						while((_g < keys9->length)){
HXLINE( 802)							int key = keys9->__get(_g);
HXDLIN( 802)							_g = (_g + 1);
HXDLIN( 802)							action->addKey(key,state);
            						}
            					}
HXDLIN( 802)					{
HXLINE( 802)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 802)						int state1 = 2;
HXDLIN( 802)						int _g1 = 0;
HXDLIN( 802)						while((_g1 < keys9->length)){
HXLINE( 802)							int key = keys9->__get(_g1);
HXDLIN( 802)							_g1 = (_g1 + 1);
HXDLIN( 802)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 802)					{
HXLINE( 802)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 802)						int state2 = -1;
HXDLIN( 802)						int _g2 = 0;
HXDLIN( 802)						while((_g2 < keys9->length)){
HXLINE( 802)							int key = keys9->__get(_g2);
HXDLIN( 802)							_g2 = (_g2 + 1);
HXDLIN( 802)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 802)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 802)					int state = 2;
HXDLIN( 802)					int _g = 0;
HXDLIN( 802)					while((_g < keys9->length)){
HXLINE( 802)						int key = keys9->__get(_g);
HXDLIN( 802)						_g = (_g + 1);
HXDLIN( 802)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 802)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 802)					int state = 2;
HXDLIN( 802)					int _g = 0;
HXDLIN( 802)					while((_g < keys9->length)){
HXLINE( 802)						int key = keys9->__get(_g);
HXDLIN( 802)						_g = (_g + 1);
HXDLIN( 802)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 802)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 802)					int state = 2;
HXDLIN( 802)					int _g = 0;
HXDLIN( 802)					while((_g < keys9->length)){
HXLINE( 802)						int key = keys9->__get(_g);
HXDLIN( 802)						_g = (_g + 1);
HXDLIN( 802)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 802)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 802)					int state = 2;
HXDLIN( 802)					int _g = 0;
HXDLIN( 802)					while((_g < keys9->length)){
HXLINE( 802)						int key = keys9->__get(_g);
HXDLIN( 802)						_g = (_g + 1);
HXDLIN( 802)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 802)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 802)					int state = 2;
HXDLIN( 802)					int _g = 0;
HXDLIN( 802)					while((_g < keys9->length)){
HXLINE( 802)						int key = keys9->__get(_g);
HXDLIN( 802)						_g = (_g + 1);
HXDLIN( 802)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 803)		{
HXLINE( 803)			::Array< int > keys10 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_199,3);
HXDLIN( 803)			switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 803)					{
HXLINE( 803)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 803)						int state = 1;
HXDLIN( 803)						int _g = 0;
HXDLIN( 803)						while((_g < keys10->length)){
HXLINE( 803)							int key = keys10->__get(_g);
HXDLIN( 803)							_g = (_g + 1);
HXDLIN( 803)							action->addKey(key,state);
            						}
            					}
HXDLIN( 803)					{
HXLINE( 803)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 803)						int state1 = 2;
HXDLIN( 803)						int _g1 = 0;
HXDLIN( 803)						while((_g1 < keys10->length)){
HXLINE( 803)							int key = keys10->__get(_g1);
HXDLIN( 803)							_g1 = (_g1 + 1);
HXDLIN( 803)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 803)					{
HXLINE( 803)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 803)						int state2 = -1;
HXDLIN( 803)						int _g2 = 0;
HXDLIN( 803)						while((_g2 < keys10->length)){
HXLINE( 803)							int key = keys10->__get(_g2);
HXDLIN( 803)							_g2 = (_g2 + 1);
HXDLIN( 803)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 803)					{
HXLINE( 803)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 803)						int state = 1;
HXDLIN( 803)						int _g = 0;
HXDLIN( 803)						while((_g < keys10->length)){
HXLINE( 803)							int key = keys10->__get(_g);
HXDLIN( 803)							_g = (_g + 1);
HXDLIN( 803)							action->addKey(key,state);
            						}
            					}
HXDLIN( 803)					{
HXLINE( 803)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 803)						int state1 = 2;
HXDLIN( 803)						int _g1 = 0;
HXDLIN( 803)						while((_g1 < keys10->length)){
HXLINE( 803)							int key = keys10->__get(_g1);
HXDLIN( 803)							_g1 = (_g1 + 1);
HXDLIN( 803)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 803)					{
HXLINE( 803)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 803)						int state2 = -1;
HXDLIN( 803)						int _g2 = 0;
HXDLIN( 803)						while((_g2 < keys10->length)){
HXLINE( 803)							int key = keys10->__get(_g2);
HXDLIN( 803)							_g2 = (_g2 + 1);
HXDLIN( 803)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 803)					{
HXLINE( 803)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 803)						int state = 1;
HXDLIN( 803)						int _g = 0;
HXDLIN( 803)						while((_g < keys10->length)){
HXLINE( 803)							int key = keys10->__get(_g);
HXDLIN( 803)							_g = (_g + 1);
HXDLIN( 803)							action->addKey(key,state);
            						}
            					}
HXDLIN( 803)					{
HXLINE( 803)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 803)						int state1 = 2;
HXDLIN( 803)						int _g1 = 0;
HXDLIN( 803)						while((_g1 < keys10->length)){
HXLINE( 803)							int key = keys10->__get(_g1);
HXDLIN( 803)							_g1 = (_g1 + 1);
HXDLIN( 803)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 803)					{
HXLINE( 803)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 803)						int state2 = -1;
HXDLIN( 803)						int _g2 = 0;
HXDLIN( 803)						while((_g2 < keys10->length)){
HXLINE( 803)							int key = keys10->__get(_g2);
HXDLIN( 803)							_g2 = (_g2 + 1);
HXDLIN( 803)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 803)					{
HXLINE( 803)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 803)						int state = 1;
HXDLIN( 803)						int _g = 0;
HXDLIN( 803)						while((_g < keys10->length)){
HXLINE( 803)							int key = keys10->__get(_g);
HXDLIN( 803)							_g = (_g + 1);
HXDLIN( 803)							action->addKey(key,state);
            						}
            					}
HXDLIN( 803)					{
HXLINE( 803)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 803)						int state1 = 2;
HXDLIN( 803)						int _g1 = 0;
HXDLIN( 803)						while((_g1 < keys10->length)){
HXLINE( 803)							int key = keys10->__get(_g1);
HXDLIN( 803)							_g1 = (_g1 + 1);
HXDLIN( 803)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 803)					{
HXLINE( 803)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 803)						int state2 = -1;
HXDLIN( 803)						int _g2 = 0;
HXDLIN( 803)						while((_g2 < keys10->length)){
HXLINE( 803)							int key = keys10->__get(_g2);
HXDLIN( 803)							_g2 = (_g2 + 1);
HXDLIN( 803)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 803)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 803)					int state = 2;
HXDLIN( 803)					int _g = 0;
HXDLIN( 803)					while((_g < keys10->length)){
HXLINE( 803)						int key = keys10->__get(_g);
HXDLIN( 803)						_g = (_g + 1);
HXDLIN( 803)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 803)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 803)					int state = 2;
HXDLIN( 803)					int _g = 0;
HXDLIN( 803)					while((_g < keys10->length)){
HXLINE( 803)						int key = keys10->__get(_g);
HXDLIN( 803)						_g = (_g + 1);
HXDLIN( 803)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 803)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 803)					int state = 2;
HXDLIN( 803)					int _g = 0;
HXDLIN( 803)					while((_g < keys10->length)){
HXLINE( 803)						int key = keys10->__get(_g);
HXDLIN( 803)						_g = (_g + 1);
HXDLIN( 803)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 803)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 803)					int state = 2;
HXDLIN( 803)					int _g = 0;
HXDLIN( 803)					while((_g < keys10->length)){
HXLINE( 803)						int key = keys10->__get(_g);
HXDLIN( 803)						_g = (_g + 1);
HXDLIN( 803)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 803)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 803)					int state = 2;
HXDLIN( 803)					int _g = 0;
HXDLIN( 803)					while((_g < keys10->length)){
HXLINE( 803)						int key = keys10->__get(_g);
HXDLIN( 803)						_g = (_g + 1);
HXDLIN( 803)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 804)		{
HXLINE( 804)			::String s4 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("killBind",7b,28,25,80),::hx::paccDynamic)) );
HXDLIN( 804)			s4 = s4.toUpperCase();
HXDLIN( 804)			int keys11;
HXDLIN( 804)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s4)) {
HXLINE( 804)				keys11 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s4);
            			}
            			else {
HXLINE( 804)				keys11 = -1;
            			}
HXDLIN( 804)			::Array< int > keys12 = ::Array_obj< int >::__new(1)->init(0,keys11);
HXDLIN( 804)			switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 804)					{
HXLINE( 804)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 804)						int state = 1;
HXDLIN( 804)						int _g = 0;
HXDLIN( 804)						while((_g < keys12->length)){
HXLINE( 804)							int key = keys12->__get(_g);
HXDLIN( 804)							_g = (_g + 1);
HXDLIN( 804)							action->addKey(key,state);
            						}
            					}
HXDLIN( 804)					{
HXLINE( 804)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 804)						int state1 = 2;
HXDLIN( 804)						int _g1 = 0;
HXDLIN( 804)						while((_g1 < keys12->length)){
HXLINE( 804)							int key = keys12->__get(_g1);
HXDLIN( 804)							_g1 = (_g1 + 1);
HXDLIN( 804)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 804)					{
HXLINE( 804)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 804)						int state2 = -1;
HXDLIN( 804)						int _g2 = 0;
HXDLIN( 804)						while((_g2 < keys12->length)){
HXLINE( 804)							int key = keys12->__get(_g2);
HXDLIN( 804)							_g2 = (_g2 + 1);
HXDLIN( 804)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 804)					{
HXLINE( 804)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 804)						int state = 1;
HXDLIN( 804)						int _g = 0;
HXDLIN( 804)						while((_g < keys12->length)){
HXLINE( 804)							int key = keys12->__get(_g);
HXDLIN( 804)							_g = (_g + 1);
HXDLIN( 804)							action->addKey(key,state);
            						}
            					}
HXDLIN( 804)					{
HXLINE( 804)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 804)						int state1 = 2;
HXDLIN( 804)						int _g1 = 0;
HXDLIN( 804)						while((_g1 < keys12->length)){
HXLINE( 804)							int key = keys12->__get(_g1);
HXDLIN( 804)							_g1 = (_g1 + 1);
HXDLIN( 804)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 804)					{
HXLINE( 804)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 804)						int state2 = -1;
HXDLIN( 804)						int _g2 = 0;
HXDLIN( 804)						while((_g2 < keys12->length)){
HXLINE( 804)							int key = keys12->__get(_g2);
HXDLIN( 804)							_g2 = (_g2 + 1);
HXDLIN( 804)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 804)					{
HXLINE( 804)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 804)						int state = 1;
HXDLIN( 804)						int _g = 0;
HXDLIN( 804)						while((_g < keys12->length)){
HXLINE( 804)							int key = keys12->__get(_g);
HXDLIN( 804)							_g = (_g + 1);
HXDLIN( 804)							action->addKey(key,state);
            						}
            					}
HXDLIN( 804)					{
HXLINE( 804)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 804)						int state1 = 2;
HXDLIN( 804)						int _g1 = 0;
HXDLIN( 804)						while((_g1 < keys12->length)){
HXLINE( 804)							int key = keys12->__get(_g1);
HXDLIN( 804)							_g1 = (_g1 + 1);
HXDLIN( 804)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 804)					{
HXLINE( 804)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 804)						int state2 = -1;
HXDLIN( 804)						int _g2 = 0;
HXDLIN( 804)						while((_g2 < keys12->length)){
HXLINE( 804)							int key = keys12->__get(_g2);
HXDLIN( 804)							_g2 = (_g2 + 1);
HXDLIN( 804)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 804)					{
HXLINE( 804)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 804)						int state = 1;
HXDLIN( 804)						int _g = 0;
HXDLIN( 804)						while((_g < keys12->length)){
HXLINE( 804)							int key = keys12->__get(_g);
HXDLIN( 804)							_g = (_g + 1);
HXDLIN( 804)							action->addKey(key,state);
            						}
            					}
HXDLIN( 804)					{
HXLINE( 804)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 804)						int state1 = 2;
HXDLIN( 804)						int _g1 = 0;
HXDLIN( 804)						while((_g1 < keys12->length)){
HXLINE( 804)							int key = keys12->__get(_g1);
HXDLIN( 804)							_g1 = (_g1 + 1);
HXDLIN( 804)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 804)					{
HXLINE( 804)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 804)						int state2 = -1;
HXDLIN( 804)						int _g2 = 0;
HXDLIN( 804)						while((_g2 < keys12->length)){
HXLINE( 804)							int key = keys12->__get(_g2);
HXDLIN( 804)							_g2 = (_g2 + 1);
HXDLIN( 804)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 804)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 804)					int state = 2;
HXDLIN( 804)					int _g = 0;
HXDLIN( 804)					while((_g < keys12->length)){
HXLINE( 804)						int key = keys12->__get(_g);
HXDLIN( 804)						_g = (_g + 1);
HXDLIN( 804)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 804)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 804)					int state = 2;
HXDLIN( 804)					int _g = 0;
HXDLIN( 804)					while((_g < keys12->length)){
HXLINE( 804)						int key = keys12->__get(_g);
HXDLIN( 804)						_g = (_g + 1);
HXDLIN( 804)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 804)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 804)					int state = 2;
HXDLIN( 804)					int _g = 0;
HXDLIN( 804)					while((_g < keys12->length)){
HXLINE( 804)						int key = keys12->__get(_g);
HXDLIN( 804)						_g = (_g + 1);
HXDLIN( 804)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 804)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 804)					int state = 2;
HXDLIN( 804)					int _g = 0;
HXDLIN( 804)					while((_g < keys12->length)){
HXLINE( 804)						int key = keys12->__get(_g);
HXDLIN( 804)						_g = (_g + 1);
HXDLIN( 804)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 804)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 804)					int state = 2;
HXDLIN( 804)					int _g = 0;
HXDLIN( 804)					while((_g < keys12->length)){
HXLINE( 804)						int key = keys12->__get(_g);
HXDLIN( 804)						_g = (_g + 1);
HXDLIN( 804)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,loadKeyBinds,(void))

void Controls_obj::removeKeyboard(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_809_removeKeyboard)
HXDLIN( 809)		int _g = 0;
HXDLIN( 809)		::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 809)		while((_g < _g1->length)){
HXDLIN( 809)			 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 809)			_g = (_g + 1);
HXLINE( 811)			int i = action->inputs->length;
HXLINE( 812)			while(true){
HXLINE( 812)				i = (i - 1);
HXDLIN( 812)				if (!(((i + 1) > 0))) {
HXLINE( 812)					goto _hx_goto_201;
            				}
HXLINE( 814)				 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 815)				if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE( 816)					action->remove(input,null());
            				}
            			}
            			_hx_goto_201:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,removeKeyboard,(void))

void Controls_obj::addGamepad(int id, ::haxe::ds::EnumValueMap buttonMap){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_822_addGamepad)
HXLINE( 823)		this->gamepadsAdded->push(id);
HXLINE( 826)		{
HXLINE( 826)			::Dynamic map = buttonMap;
HXDLIN( 826)			::Dynamic _g_map = map;
HXDLIN( 826)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 826)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 826)				 ::Control key = _g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 826)				::Array< int > _g1_value = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 826)				 ::Control _g1_key = key;
HXDLIN( 826)				 ::Control control = _g1_key;
HXDLIN( 826)				::Array< int > buttons = _g1_value;
HXLINE( 827)				{
HXLINE( 827)					int id1 = id;
HXDLIN( 827)					::Array< int > buttons1 = buttons;
HXDLIN( 827)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXLINE( 827)							{
HXLINE( 827)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 827)								int state = 1;
HXDLIN( 827)								int _g = 0;
HXDLIN( 827)								while((_g < buttons1->length)){
HXLINE( 827)									int button = buttons1->__get(_g);
HXDLIN( 827)									_g = (_g + 1);
HXDLIN( 827)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 827)							{
HXLINE( 827)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 827)								int state1 = 2;
HXDLIN( 827)								int _g1 = 0;
HXDLIN( 827)								while((_g1 < buttons1->length)){
HXLINE( 827)									int button = buttons1->__get(_g1);
HXDLIN( 827)									_g1 = (_g1 + 1);
HXDLIN( 827)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 827)							{
HXLINE( 827)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 827)								int state2 = -1;
HXDLIN( 827)								int _g2 = 0;
HXDLIN( 827)								while((_g2 < buttons1->length)){
HXLINE( 827)									int button = buttons1->__get(_g2);
HXDLIN( 827)									_g2 = (_g2 + 1);
HXDLIN( 827)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 827)							{
HXLINE( 827)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 827)								int state = 1;
HXDLIN( 827)								int _g = 0;
HXDLIN( 827)								while((_g < buttons1->length)){
HXLINE( 827)									int button = buttons1->__get(_g);
HXDLIN( 827)									_g = (_g + 1);
HXDLIN( 827)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 827)							{
HXLINE( 827)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 827)								int state1 = 2;
HXDLIN( 827)								int _g1 = 0;
HXDLIN( 827)								while((_g1 < buttons1->length)){
HXLINE( 827)									int button = buttons1->__get(_g1);
HXDLIN( 827)									_g1 = (_g1 + 1);
HXDLIN( 827)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 827)							{
HXLINE( 827)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 827)								int state2 = -1;
HXDLIN( 827)								int _g2 = 0;
HXDLIN( 827)								while((_g2 < buttons1->length)){
HXLINE( 827)									int button = buttons1->__get(_g2);
HXDLIN( 827)									_g2 = (_g2 + 1);
HXDLIN( 827)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 827)							{
HXLINE( 827)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 827)								int state = 1;
HXDLIN( 827)								int _g = 0;
HXDLIN( 827)								while((_g < buttons1->length)){
HXLINE( 827)									int button = buttons1->__get(_g);
HXDLIN( 827)									_g = (_g + 1);
HXDLIN( 827)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 827)							{
HXLINE( 827)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 827)								int state1 = 2;
HXDLIN( 827)								int _g1 = 0;
HXDLIN( 827)								while((_g1 < buttons1->length)){
HXLINE( 827)									int button = buttons1->__get(_g1);
HXDLIN( 827)									_g1 = (_g1 + 1);
HXDLIN( 827)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 827)							{
HXLINE( 827)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 827)								int state2 = -1;
HXDLIN( 827)								int _g2 = 0;
HXDLIN( 827)								while((_g2 < buttons1->length)){
HXLINE( 827)									int button = buttons1->__get(_g2);
HXDLIN( 827)									_g2 = (_g2 + 1);
HXDLIN( 827)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 827)							{
HXLINE( 827)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 827)								int state = 1;
HXDLIN( 827)								int _g = 0;
HXDLIN( 827)								while((_g < buttons1->length)){
HXLINE( 827)									int button = buttons1->__get(_g);
HXDLIN( 827)									_g = (_g + 1);
HXDLIN( 827)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 827)							{
HXLINE( 827)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 827)								int state1 = 2;
HXDLIN( 827)								int _g1 = 0;
HXDLIN( 827)								while((_g1 < buttons1->length)){
HXLINE( 827)									int button = buttons1->__get(_g1);
HXDLIN( 827)									_g1 = (_g1 + 1);
HXDLIN( 827)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 827)							{
HXLINE( 827)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 827)								int state2 = -1;
HXDLIN( 827)								int _g2 = 0;
HXDLIN( 827)								while((_g2 < buttons1->length)){
HXLINE( 827)									int button = buttons1->__get(_g2);
HXDLIN( 827)									_g2 = (_g2 + 1);
HXDLIN( 827)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 827)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 827)							int state = 2;
HXDLIN( 827)							int _g = 0;
HXDLIN( 827)							while((_g < buttons1->length)){
HXLINE( 827)								int button = buttons1->__get(_g);
HXDLIN( 827)								_g = (_g + 1);
HXDLIN( 827)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 827)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 827)							int state = 2;
HXDLIN( 827)							int _g = 0;
HXDLIN( 827)							while((_g < buttons1->length)){
HXLINE( 827)								int button = buttons1->__get(_g);
HXDLIN( 827)								_g = (_g + 1);
HXDLIN( 827)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 827)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 827)							int state = 2;
HXDLIN( 827)							int _g = 0;
HXDLIN( 827)							while((_g < buttons1->length)){
HXLINE( 827)								int button = buttons1->__get(_g);
HXDLIN( 827)								_g = (_g + 1);
HXDLIN( 827)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 827)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 827)							int state = 2;
HXDLIN( 827)							int _g = 0;
HXDLIN( 827)							while((_g < buttons1->length)){
HXLINE( 827)								int button = buttons1->__get(_g);
HXDLIN( 827)								_g = (_g + 1);
HXDLIN( 827)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 827)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 827)							int state = 2;
HXDLIN( 827)							int _g = 0;
HXDLIN( 827)							while((_g < buttons1->length)){
HXLINE( 827)								int button = buttons1->__get(_g);
HXDLIN( 827)								_g = (_g + 1);
HXDLIN( 827)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,addGamepad,(void))

void Controls_obj::addGamepadLiteral(int id, ::haxe::ds::EnumValueMap buttonMap){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_835_addGamepadLiteral)
HXLINE( 836)		this->gamepadsAdded->push(id);
HXLINE( 839)		{
HXLINE( 839)			::Dynamic map = buttonMap;
HXDLIN( 839)			::Dynamic _g_map = map;
HXDLIN( 839)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 839)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 839)				 ::Control key = _g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 839)				::Array< int > _g1_value = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 839)				 ::Control _g1_key = key;
HXDLIN( 839)				 ::Control control = _g1_key;
HXDLIN( 839)				::Array< int > buttons = _g1_value;
HXLINE( 840)				{
HXLINE( 840)					int id1 = id;
HXDLIN( 840)					::Array< int > buttons1 = buttons;
HXDLIN( 840)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXLINE( 840)							{
HXLINE( 840)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 840)								int state = 1;
HXDLIN( 840)								int _g = 0;
HXDLIN( 840)								while((_g < buttons1->length)){
HXLINE( 840)									int button = buttons1->__get(_g);
HXDLIN( 840)									_g = (_g + 1);
HXDLIN( 840)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 840)							{
HXLINE( 840)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 840)								int state1 = 2;
HXDLIN( 840)								int _g1 = 0;
HXDLIN( 840)								while((_g1 < buttons1->length)){
HXLINE( 840)									int button = buttons1->__get(_g1);
HXDLIN( 840)									_g1 = (_g1 + 1);
HXDLIN( 840)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 840)							{
HXLINE( 840)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 840)								int state2 = -1;
HXDLIN( 840)								int _g2 = 0;
HXDLIN( 840)								while((_g2 < buttons1->length)){
HXLINE( 840)									int button = buttons1->__get(_g2);
HXDLIN( 840)									_g2 = (_g2 + 1);
HXDLIN( 840)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 840)							{
HXLINE( 840)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 840)								int state = 1;
HXDLIN( 840)								int _g = 0;
HXDLIN( 840)								while((_g < buttons1->length)){
HXLINE( 840)									int button = buttons1->__get(_g);
HXDLIN( 840)									_g = (_g + 1);
HXDLIN( 840)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 840)							{
HXLINE( 840)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 840)								int state1 = 2;
HXDLIN( 840)								int _g1 = 0;
HXDLIN( 840)								while((_g1 < buttons1->length)){
HXLINE( 840)									int button = buttons1->__get(_g1);
HXDLIN( 840)									_g1 = (_g1 + 1);
HXDLIN( 840)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 840)							{
HXLINE( 840)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 840)								int state2 = -1;
HXDLIN( 840)								int _g2 = 0;
HXDLIN( 840)								while((_g2 < buttons1->length)){
HXLINE( 840)									int button = buttons1->__get(_g2);
HXDLIN( 840)									_g2 = (_g2 + 1);
HXDLIN( 840)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 840)							{
HXLINE( 840)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 840)								int state = 1;
HXDLIN( 840)								int _g = 0;
HXDLIN( 840)								while((_g < buttons1->length)){
HXLINE( 840)									int button = buttons1->__get(_g);
HXDLIN( 840)									_g = (_g + 1);
HXDLIN( 840)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 840)							{
HXLINE( 840)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 840)								int state1 = 2;
HXDLIN( 840)								int _g1 = 0;
HXDLIN( 840)								while((_g1 < buttons1->length)){
HXLINE( 840)									int button = buttons1->__get(_g1);
HXDLIN( 840)									_g1 = (_g1 + 1);
HXDLIN( 840)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 840)							{
HXLINE( 840)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 840)								int state2 = -1;
HXDLIN( 840)								int _g2 = 0;
HXDLIN( 840)								while((_g2 < buttons1->length)){
HXLINE( 840)									int button = buttons1->__get(_g2);
HXDLIN( 840)									_g2 = (_g2 + 1);
HXDLIN( 840)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 840)							{
HXLINE( 840)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 840)								int state = 1;
HXDLIN( 840)								int _g = 0;
HXDLIN( 840)								while((_g < buttons1->length)){
HXLINE( 840)									int button = buttons1->__get(_g);
HXDLIN( 840)									_g = (_g + 1);
HXDLIN( 840)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 840)							{
HXLINE( 840)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 840)								int state1 = 2;
HXDLIN( 840)								int _g1 = 0;
HXDLIN( 840)								while((_g1 < buttons1->length)){
HXLINE( 840)									int button = buttons1->__get(_g1);
HXDLIN( 840)									_g1 = (_g1 + 1);
HXDLIN( 840)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 840)							{
HXLINE( 840)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 840)								int state2 = -1;
HXDLIN( 840)								int _g2 = 0;
HXDLIN( 840)								while((_g2 < buttons1->length)){
HXLINE( 840)									int button = buttons1->__get(_g2);
HXDLIN( 840)									_g2 = (_g2 + 1);
HXDLIN( 840)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 840)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 840)							int state = 2;
HXDLIN( 840)							int _g = 0;
HXDLIN( 840)							while((_g < buttons1->length)){
HXLINE( 840)								int button = buttons1->__get(_g);
HXDLIN( 840)								_g = (_g + 1);
HXDLIN( 840)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 840)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 840)							int state = 2;
HXDLIN( 840)							int _g = 0;
HXDLIN( 840)							while((_g < buttons1->length)){
HXLINE( 840)								int button = buttons1->__get(_g);
HXDLIN( 840)								_g = (_g + 1);
HXDLIN( 840)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 840)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 840)							int state = 2;
HXDLIN( 840)							int _g = 0;
HXDLIN( 840)							while((_g < buttons1->length)){
HXLINE( 840)								int button = buttons1->__get(_g);
HXDLIN( 840)								_g = (_g + 1);
HXDLIN( 840)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 840)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 840)							int state = 2;
HXDLIN( 840)							int _g = 0;
HXDLIN( 840)							while((_g < buttons1->length)){
HXLINE( 840)								int button = buttons1->__get(_g);
HXDLIN( 840)								_g = (_g + 1);
HXDLIN( 840)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 840)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 840)							int state = 2;
HXDLIN( 840)							int _g = 0;
HXDLIN( 840)							while((_g < buttons1->length)){
HXLINE( 840)								int button = buttons1->__get(_g);
HXDLIN( 840)								_g = (_g + 1);
HXDLIN( 840)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,addGamepadLiteral,(void))

void Controls_obj::removeGamepad(::hx::Null< int >  __o_deviceID){
            		int deviceID = __o_deviceID.Default(-1);
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_848_removeGamepad)
HXLINE( 849)		{
HXLINE( 849)			int _g = 0;
HXDLIN( 849)			::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 849)			while((_g < _g1->length)){
HXLINE( 849)				 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 849)				_g = (_g + 1);
HXLINE( 851)				int i = action->inputs->length;
HXLINE( 852)				while(true){
HXLINE( 852)					i = (i - 1);
HXDLIN( 852)					if (!(((i + 1) > 0))) {
HXLINE( 852)						goto _hx_goto_242;
            					}
HXLINE( 854)					 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 855)					bool _hx_tmp;
HXDLIN( 855)					if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE( 855)						if ((deviceID != -1)) {
HXLINE( 855)							_hx_tmp = (input->deviceID == deviceID);
            						}
            						else {
HXLINE( 855)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 855)						_hx_tmp = false;
            					}
HXDLIN( 855)					if (_hx_tmp) {
HXLINE( 856)						action->remove(input,null());
            					}
            				}
            				_hx_goto_242:;
            			}
            		}
HXLINE( 860)		this->gamepadsAdded->remove(deviceID);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,removeGamepad,(void))

void Controls_obj::addDefaultGamepad(int id){
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_866_addDefaultGamepad)
HXDLIN( 866)		 ::haxe::ds::EnumValueMap _g =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN( 866)		_g->set(::Control_obj::ACCEPT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_263,1));
HXDLIN( 866)		_g->set(::Control_obj::BACK_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_264,1));
HXDLIN( 866)		_g->set(::Control_obj::UP_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_265,2));
HXDLIN( 866)		_g->set(::Control_obj::DOWN_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_266,2));
HXDLIN( 866)		_g->set(::Control_obj::LEFT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_267,2));
HXDLIN( 866)		_g->set(::Control_obj::RIGHT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_268,2));
HXDLIN( 866)		_g->set(::Control_obj::PAUSE_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_269,1));
HXDLIN( 866)		_g->set(::Control_obj::RESET_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_270,1));
HXDLIN( 866)		this->gamepadsAdded->push(id);
HXDLIN( 866)		{
HXDLIN( 866)			::Dynamic map = _g;
HXDLIN( 866)			::Dynamic _g_map = map;
HXDLIN( 866)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 866)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN( 866)				 ::Control key = _g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 866)				::Array< int > _g1_value = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 866)				 ::Control _g1_key = key;
HXDLIN( 866)				 ::Control control = _g1_key;
HXDLIN( 866)				::Array< int > buttons = _g1_value;
HXDLIN( 866)				{
HXDLIN( 866)					int id1 = id;
HXDLIN( 866)					::Array< int > buttons1 = buttons;
HXDLIN( 866)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXDLIN( 866)							{
HXDLIN( 866)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 866)								int state = 1;
HXDLIN( 866)								int _g = 0;
HXDLIN( 866)								while((_g < buttons1->length)){
HXDLIN( 866)									int button = buttons1->__get(_g);
HXDLIN( 866)									_g = (_g + 1);
HXDLIN( 866)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 866)							{
HXDLIN( 866)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 866)								int state1 = 2;
HXDLIN( 866)								int _g1 = 0;
HXDLIN( 866)								while((_g1 < buttons1->length)){
HXDLIN( 866)									int button = buttons1->__get(_g1);
HXDLIN( 866)									_g1 = (_g1 + 1);
HXDLIN( 866)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 866)							{
HXDLIN( 866)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 866)								int state2 = -1;
HXDLIN( 866)								int _g2 = 0;
HXDLIN( 866)								while((_g2 < buttons1->length)){
HXDLIN( 866)									int button = buttons1->__get(_g2);
HXDLIN( 866)									_g2 = (_g2 + 1);
HXDLIN( 866)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXDLIN( 866)							{
HXDLIN( 866)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 866)								int state = 1;
HXDLIN( 866)								int _g = 0;
HXDLIN( 866)								while((_g < buttons1->length)){
HXDLIN( 866)									int button = buttons1->__get(_g);
HXDLIN( 866)									_g = (_g + 1);
HXDLIN( 866)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 866)							{
HXDLIN( 866)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 866)								int state1 = 2;
HXDLIN( 866)								int _g1 = 0;
HXDLIN( 866)								while((_g1 < buttons1->length)){
HXDLIN( 866)									int button = buttons1->__get(_g1);
HXDLIN( 866)									_g1 = (_g1 + 1);
HXDLIN( 866)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 866)							{
HXDLIN( 866)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 866)								int state2 = -1;
HXDLIN( 866)								int _g2 = 0;
HXDLIN( 866)								while((_g2 < buttons1->length)){
HXDLIN( 866)									int button = buttons1->__get(_g2);
HXDLIN( 866)									_g2 = (_g2 + 1);
HXDLIN( 866)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXDLIN( 866)							{
HXDLIN( 866)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 866)								int state = 1;
HXDLIN( 866)								int _g = 0;
HXDLIN( 866)								while((_g < buttons1->length)){
HXDLIN( 866)									int button = buttons1->__get(_g);
HXDLIN( 866)									_g = (_g + 1);
HXDLIN( 866)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 866)							{
HXDLIN( 866)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 866)								int state1 = 2;
HXDLIN( 866)								int _g1 = 0;
HXDLIN( 866)								while((_g1 < buttons1->length)){
HXDLIN( 866)									int button = buttons1->__get(_g1);
HXDLIN( 866)									_g1 = (_g1 + 1);
HXDLIN( 866)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 866)							{
HXDLIN( 866)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 866)								int state2 = -1;
HXDLIN( 866)								int _g2 = 0;
HXDLIN( 866)								while((_g2 < buttons1->length)){
HXDLIN( 866)									int button = buttons1->__get(_g2);
HXDLIN( 866)									_g2 = (_g2 + 1);
HXDLIN( 866)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXDLIN( 866)							{
HXDLIN( 866)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 866)								int state = 1;
HXDLIN( 866)								int _g = 0;
HXDLIN( 866)								while((_g < buttons1->length)){
HXDLIN( 866)									int button = buttons1->__get(_g);
HXDLIN( 866)									_g = (_g + 1);
HXDLIN( 866)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 866)							{
HXDLIN( 866)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 866)								int state1 = 2;
HXDLIN( 866)								int _g1 = 0;
HXDLIN( 866)								while((_g1 < buttons1->length)){
HXDLIN( 866)									int button = buttons1->__get(_g1);
HXDLIN( 866)									_g1 = (_g1 + 1);
HXDLIN( 866)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 866)							{
HXDLIN( 866)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 866)								int state2 = -1;
HXDLIN( 866)								int _g2 = 0;
HXDLIN( 866)								while((_g2 < buttons1->length)){
HXDLIN( 866)									int button = buttons1->__get(_g2);
HXDLIN( 866)									_g2 = (_g2 + 1);
HXDLIN( 866)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXDLIN( 866)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 866)							int state = 2;
HXDLIN( 866)							int _g = 0;
HXDLIN( 866)							while((_g < buttons1->length)){
HXDLIN( 866)								int button = buttons1->__get(_g);
HXDLIN( 866)								_g = (_g + 1);
HXDLIN( 866)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXDLIN( 866)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 866)							int state = 2;
HXDLIN( 866)							int _g = 0;
HXDLIN( 866)							while((_g < buttons1->length)){
HXDLIN( 866)								int button = buttons1->__get(_g);
HXDLIN( 866)								_g = (_g + 1);
HXDLIN( 866)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXDLIN( 866)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 866)							int state = 2;
HXDLIN( 866)							int _g = 0;
HXDLIN( 866)							while((_g < buttons1->length)){
HXDLIN( 866)								int button = buttons1->__get(_g);
HXDLIN( 866)								_g = (_g + 1);
HXDLIN( 866)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXDLIN( 866)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 866)							int state = 2;
HXDLIN( 866)							int _g = 0;
HXDLIN( 866)							while((_g < buttons1->length)){
HXDLIN( 866)								int button = buttons1->__get(_g);
HXDLIN( 866)								_g = (_g + 1);
HXDLIN( 866)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXDLIN( 866)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 866)							int state = 2;
HXDLIN( 866)							int _g = 0;
HXDLIN( 866)							while((_g < buttons1->length)){
HXDLIN( 866)								int button = buttons1->__get(_g);
HXDLIN( 866)								_g = (_g + 1);
HXDLIN( 866)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,addDefaultGamepad,(void))

void Controls_obj::bindButtons( ::Control control,int id,::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_900_bindButtons)
HXDLIN( 900)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 900)				{
HXDLIN( 900)					 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 900)					int state = 1;
HXDLIN( 900)					int _g = 0;
HXDLIN( 900)					while((_g < buttons->length)){
HXDLIN( 900)						int button = buttons->__get(_g);
HXDLIN( 900)						_g = (_g + 1);
HXDLIN( 900)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN( 900)				{
HXDLIN( 900)					 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 900)					int state1 = 2;
HXDLIN( 900)					int _g1 = 0;
HXDLIN( 900)					while((_g1 < buttons->length)){
HXDLIN( 900)						int button = buttons->__get(_g1);
HXDLIN( 900)						_g1 = (_g1 + 1);
HXDLIN( 900)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN( 900)				{
HXDLIN( 900)					 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 900)					int state2 = -1;
HXDLIN( 900)					int _g2 = 0;
HXDLIN( 900)					while((_g2 < buttons->length)){
HXDLIN( 900)						int button = buttons->__get(_g2);
HXDLIN( 900)						_g2 = (_g2 + 1);
HXDLIN( 900)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXDLIN( 900)				{
HXDLIN( 900)					 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 900)					int state = 1;
HXDLIN( 900)					int _g = 0;
HXDLIN( 900)					while((_g < buttons->length)){
HXDLIN( 900)						int button = buttons->__get(_g);
HXDLIN( 900)						_g = (_g + 1);
HXDLIN( 900)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN( 900)				{
HXDLIN( 900)					 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 900)					int state1 = 2;
HXDLIN( 900)					int _g1 = 0;
HXDLIN( 900)					while((_g1 < buttons->length)){
HXDLIN( 900)						int button = buttons->__get(_g1);
HXDLIN( 900)						_g1 = (_g1 + 1);
HXDLIN( 900)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN( 900)				{
HXDLIN( 900)					 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 900)					int state2 = -1;
HXDLIN( 900)					int _g2 = 0;
HXDLIN( 900)					while((_g2 < buttons->length)){
HXDLIN( 900)						int button = buttons->__get(_g2);
HXDLIN( 900)						_g2 = (_g2 + 1);
HXDLIN( 900)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXDLIN( 900)				{
HXDLIN( 900)					 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 900)					int state = 1;
HXDLIN( 900)					int _g = 0;
HXDLIN( 900)					while((_g < buttons->length)){
HXDLIN( 900)						int button = buttons->__get(_g);
HXDLIN( 900)						_g = (_g + 1);
HXDLIN( 900)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN( 900)				{
HXDLIN( 900)					 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 900)					int state1 = 2;
HXDLIN( 900)					int _g1 = 0;
HXDLIN( 900)					while((_g1 < buttons->length)){
HXDLIN( 900)						int button = buttons->__get(_g1);
HXDLIN( 900)						_g1 = (_g1 + 1);
HXDLIN( 900)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN( 900)				{
HXDLIN( 900)					 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 900)					int state2 = -1;
HXDLIN( 900)					int _g2 = 0;
HXDLIN( 900)					while((_g2 < buttons->length)){
HXDLIN( 900)						int button = buttons->__get(_g2);
HXDLIN( 900)						_g2 = (_g2 + 1);
HXDLIN( 900)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXDLIN( 900)				{
HXDLIN( 900)					 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 900)					int state = 1;
HXDLIN( 900)					int _g = 0;
HXDLIN( 900)					while((_g < buttons->length)){
HXDLIN( 900)						int button = buttons->__get(_g);
HXDLIN( 900)						_g = (_g + 1);
HXDLIN( 900)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN( 900)				{
HXDLIN( 900)					 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 900)					int state1 = 2;
HXDLIN( 900)					int _g1 = 0;
HXDLIN( 900)					while((_g1 < buttons->length)){
HXDLIN( 900)						int button = buttons->__get(_g1);
HXDLIN( 900)						_g1 = (_g1 + 1);
HXDLIN( 900)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN( 900)				{
HXDLIN( 900)					 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 900)					int state2 = -1;
HXDLIN( 900)					int _g2 = 0;
HXDLIN( 900)					while((_g2 < buttons->length)){
HXDLIN( 900)						int button = buttons->__get(_g2);
HXDLIN( 900)						_g2 = (_g2 + 1);
HXDLIN( 900)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXDLIN( 900)				 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 900)				int state = 2;
HXDLIN( 900)				int _g = 0;
HXDLIN( 900)				while((_g < buttons->length)){
HXDLIN( 900)					int button = buttons->__get(_g);
HXDLIN( 900)					_g = (_g + 1);
HXDLIN( 900)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)5: {
HXDLIN( 900)				 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 900)				int state = 2;
HXDLIN( 900)				int _g = 0;
HXDLIN( 900)				while((_g < buttons->length)){
HXDLIN( 900)					int button = buttons->__get(_g);
HXDLIN( 900)					_g = (_g + 1);
HXDLIN( 900)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)6: {
HXDLIN( 900)				 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 900)				int state = 2;
HXDLIN( 900)				int _g = 0;
HXDLIN( 900)				while((_g < buttons->length)){
HXDLIN( 900)					int button = buttons->__get(_g);
HXDLIN( 900)					_g = (_g + 1);
HXDLIN( 900)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)7: {
HXDLIN( 900)				 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 900)				int state = 2;
HXDLIN( 900)				int _g = 0;
HXDLIN( 900)				while((_g < buttons->length)){
HXDLIN( 900)					int button = buttons->__get(_g);
HXDLIN( 900)					_g = (_g + 1);
HXDLIN( 900)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)8: {
HXDLIN( 900)				 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 900)				int state = 2;
HXDLIN( 900)				int _g = 0;
HXDLIN( 900)				while((_g < buttons->length)){
HXDLIN( 900)					int button = buttons->__get(_g);
HXDLIN( 900)					_g = (_g + 1);
HXDLIN( 900)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,bindButtons,(void))

void Controls_obj::unbindButtons( ::Control control,int gamepadID,::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_913_unbindButtons)
HXDLIN( 913)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 913)				::Controls_obj::removeButtons(this->_up,gamepadID,buttons);
HXDLIN( 913)				::Controls_obj::removeButtons(this->_upP,gamepadID,buttons);
HXDLIN( 913)				::Controls_obj::removeButtons(this->_upR,gamepadID,buttons);
            			}
            			break;
            			case (int)1: {
HXDLIN( 913)				::Controls_obj::removeButtons(this->_left,gamepadID,buttons);
HXDLIN( 913)				::Controls_obj::removeButtons(this->_leftP,gamepadID,buttons);
HXDLIN( 913)				::Controls_obj::removeButtons(this->_leftR,gamepadID,buttons);
            			}
            			break;
            			case (int)2: {
HXDLIN( 913)				::Controls_obj::removeButtons(this->_right,gamepadID,buttons);
HXDLIN( 913)				::Controls_obj::removeButtons(this->_rightP,gamepadID,buttons);
HXDLIN( 913)				::Controls_obj::removeButtons(this->_rightR,gamepadID,buttons);
            			}
            			break;
            			case (int)3: {
HXDLIN( 913)				::Controls_obj::removeButtons(this->_down,gamepadID,buttons);
HXDLIN( 913)				::Controls_obj::removeButtons(this->_downP,gamepadID,buttons);
HXDLIN( 913)				::Controls_obj::removeButtons(this->_downR,gamepadID,buttons);
            			}
            			break;
            			case (int)4: {
HXDLIN( 913)				::Controls_obj::removeButtons(this->_reset,gamepadID,buttons);
            			}
            			break;
            			case (int)5: {
HXDLIN( 913)				::Controls_obj::removeButtons(this->_accept,gamepadID,buttons);
            			}
            			break;
            			case (int)6: {
HXDLIN( 913)				::Controls_obj::removeButtons(this->_back,gamepadID,buttons);
            			}
            			break;
            			case (int)7: {
HXDLIN( 913)				::Controls_obj::removeButtons(this->_pause,gamepadID,buttons);
            			}
            			break;
            			case (int)8: {
HXDLIN( 913)				::Controls_obj::removeButtons(this->_cheat,gamepadID,buttons);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,unbindButtons,(void))

::Array< int > Controls_obj::getInputsFor( ::Control control, ::Device device,::Array< int > list){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_937_getInputsFor)
HXLINE( 938)		if (::hx::IsNull( list )) {
HXLINE( 939)			list = ::Array_obj< int >::__new(0);
            		}
HXLINE( 941)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 944)				int _g = 0;
HXDLIN( 944)				::Array< ::Dynamic> _g1 = this->getActionFromControl(control)->inputs;
HXDLIN( 944)				while((_g < _g1->length)){
HXLINE( 944)					 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 944)					_g = (_g + 1);
HXLINE( 946)					if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE( 947)						list->push(input->inputID);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 949)				int id = device->_hx_getInt(0);
HXLINE( 950)				{
HXLINE( 950)					int _g = 0;
HXDLIN( 950)					::Array< ::Dynamic> _g1 = this->getActionFromControl(control)->inputs;
HXDLIN( 950)					while((_g < _g1->length)){
HXLINE( 950)						 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 950)						_g = (_g + 1);
HXLINE( 952)						if ((input->deviceID == id)) {
HXLINE( 953)							list->push(input->inputID);
            						}
            					}
            				}
            			}
            			break;
            		}
HXLINE( 956)		return list;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,getInputsFor,return )

void Controls_obj::removeDevice( ::Device device){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_961_removeDevice)
HXDLIN( 961)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 964)				this->setKeyboardScheme(::KeyboardScheme_obj::None_dyn(),null());
            			}
            			break;
            			case (int)1: {
HXLINE( 965)				int id = device->_hx_getInt(0);
HXLINE( 966)				this->removeGamepad(id);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,removeDevice,(void))

void Controls_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_539_init)
HXLINE( 540)		 ::flixel::input::actions::FlxActionManager actions =  ::flixel::input::actions::FlxActionManager_obj::__alloc( HX_CTX );
HXLINE( 541)		::flixel::FlxG_obj::inputs->add_flixel_input_actions_FlxActionManager(actions);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,init,(void))

void Controls_obj::addKeys( ::flixel::input::actions::FlxActionDigital action,::Array< int > keys,int state){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_697_addKeys)
HXDLIN( 697)		int _g = 0;
HXDLIN( 697)		while((_g < keys->length)){
HXDLIN( 697)			int key = keys->__get(_g);
HXDLIN( 697)			_g = (_g + 1);
HXLINE( 698)			action->addKey(key,state);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,addKeys,(void))

void Controls_obj::removeKeys( ::flixel::input::actions::FlxActionDigital action,::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_702_removeKeys)
HXLINE( 703)		int i = action->inputs->length;
HXLINE( 704)		while(true){
HXLINE( 704)			i = (i - 1);
HXDLIN( 704)			if (!(((i + 1) > 0))) {
HXLINE( 704)				goto _hx_goto_297;
            			}
HXLINE( 706)			 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 707)			bool _hx_tmp;
HXDLIN( 707)			if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE( 707)				_hx_tmp = (keys->indexOf(input->inputID,null()) != -1);
            			}
            			else {
HXLINE( 707)				_hx_tmp = false;
            			}
HXDLIN( 707)			if (_hx_tmp) {
HXLINE( 708)				action->remove(input,null());
            			}
            		}
            		_hx_goto_297:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,removeKeys,(void))

void Controls_obj::addButtons( ::flixel::input::actions::FlxActionDigital action,::Array< int > buttons,int state,int id){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_921_addButtons)
HXDLIN( 921)		int _g = 0;
HXDLIN( 921)		while((_g < buttons->length)){
HXDLIN( 921)			int button = buttons->__get(_g);
HXDLIN( 921)			_g = (_g + 1);
HXLINE( 922)			action->addGamepad(button,state,id);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Controls_obj,addButtons,(void))

void Controls_obj::removeButtons( ::flixel::input::actions::FlxActionDigital action,int gamepadID,::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_926_removeButtons)
HXLINE( 927)		int i = action->inputs->length;
HXLINE( 928)		while(true){
HXLINE( 928)			i = (i - 1);
HXDLIN( 928)			if (!(((i + 1) > 0))) {
HXLINE( 928)				goto _hx_goto_301;
            			}
HXLINE( 930)			 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 931)			bool _hx_tmp;
HXDLIN( 931)			bool _hx_tmp1;
HXDLIN( 931)			if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE( 931)				if ((gamepadID != -1)) {
HXLINE( 931)					_hx_tmp1 = (input->deviceID == gamepadID);
            				}
            				else {
HXLINE( 931)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE( 931)				_hx_tmp1 = false;
            			}
HXDLIN( 931)			if (_hx_tmp1) {
HXLINE( 931)				_hx_tmp = (buttons->indexOf(input->inputID,null()) != -1);
            			}
            			else {
HXLINE( 931)				_hx_tmp = false;
            			}
HXDLIN( 931)			if (_hx_tmp) {
HXLINE( 932)				action->remove(input,null());
            			}
            		}
            		_hx_goto_301:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,removeButtons,(void))

bool Controls_obj::isDevice( ::flixel::input::actions::FlxActionInput input, ::Device device){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_972_isDevice)
HXDLIN( 972)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 974)				return ::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() );
            			}
            			break;
            			case (int)1: {
HXLINE( 975)				int id = device->_hx_getInt(0);
HXDLIN( 975)				if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE( 975)					if ((id != -1)) {
HXLINE( 975)						return (input->deviceID == id);
            					}
            					else {
HXLINE( 975)						return true;
            					}
            				}
            				else {
HXLINE( 975)					return false;
            				}
            			}
            			break;
            		}
HXLINE( 972)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,isDevice,return )

bool Controls_obj::isGamepad( ::flixel::input::actions::FlxActionInput input,int deviceID){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_981_isGamepad)
HXDLIN( 981)		if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXDLIN( 981)			if ((deviceID != -1)) {
HXDLIN( 981)				return (input->deviceID == deviceID);
            			}
            			else {
HXDLIN( 981)				return true;
            			}
            		}
            		else {
HXDLIN( 981)			return false;
            		}
HXDLIN( 981)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,isGamepad,return )


::hx::ObjectPtr< Controls_obj > Controls_obj::__new(::String name, ::KeyboardScheme __o_scheme) {
	::hx::ObjectPtr< Controls_obj > __this = new Controls_obj();
	__this->__construct(name,__o_scheme);
	return __this;
}

::hx::ObjectPtr< Controls_obj > Controls_obj::__alloc(::hx::Ctx *_hx_ctx,::String name, ::KeyboardScheme __o_scheme) {
	Controls_obj *__this = (Controls_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Controls_obj), true, "Controls"));
	*(void **)__this = Controls_obj::_hx_vtable;
	__this->__construct(name,__o_scheme);
	return __this;
}

Controls_obj::Controls_obj()
{
}

void Controls_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Controls);
	HX_MARK_MEMBER_NAME(_up,"_up");
	HX_MARK_MEMBER_NAME(_left,"_left");
	HX_MARK_MEMBER_NAME(_right,"_right");
	HX_MARK_MEMBER_NAME(_down,"_down");
	HX_MARK_MEMBER_NAME(_upP,"_upP");
	HX_MARK_MEMBER_NAME(_leftP,"_leftP");
	HX_MARK_MEMBER_NAME(_rightP,"_rightP");
	HX_MARK_MEMBER_NAME(_downP,"_downP");
	HX_MARK_MEMBER_NAME(_upR,"_upR");
	HX_MARK_MEMBER_NAME(_leftR,"_leftR");
	HX_MARK_MEMBER_NAME(_rightR,"_rightR");
	HX_MARK_MEMBER_NAME(_downR,"_downR");
	HX_MARK_MEMBER_NAME(_accept,"_accept");
	HX_MARK_MEMBER_NAME(_back,"_back");
	HX_MARK_MEMBER_NAME(_pause,"_pause");
	HX_MARK_MEMBER_NAME(_reset,"_reset");
	HX_MARK_MEMBER_NAME(_cheat,"_cheat");
	HX_MARK_MEMBER_NAME(byName,"byName");
	HX_MARK_MEMBER_NAME(gamepadsAdded,"gamepadsAdded");
	HX_MARK_MEMBER_NAME(keyboardScheme,"keyboardScheme");
	HX_MARK_MEMBER_NAME(trackedinputs,"trackedinputs");
	 ::flixel::input::actions::FlxActionSet_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Controls_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_up,"_up");
	HX_VISIT_MEMBER_NAME(_left,"_left");
	HX_VISIT_MEMBER_NAME(_right,"_right");
	HX_VISIT_MEMBER_NAME(_down,"_down");
	HX_VISIT_MEMBER_NAME(_upP,"_upP");
	HX_VISIT_MEMBER_NAME(_leftP,"_leftP");
	HX_VISIT_MEMBER_NAME(_rightP,"_rightP");
	HX_VISIT_MEMBER_NAME(_downP,"_downP");
	HX_VISIT_MEMBER_NAME(_upR,"_upR");
	HX_VISIT_MEMBER_NAME(_leftR,"_leftR");
	HX_VISIT_MEMBER_NAME(_rightR,"_rightR");
	HX_VISIT_MEMBER_NAME(_downR,"_downR");
	HX_VISIT_MEMBER_NAME(_accept,"_accept");
	HX_VISIT_MEMBER_NAME(_back,"_back");
	HX_VISIT_MEMBER_NAME(_pause,"_pause");
	HX_VISIT_MEMBER_NAME(_reset,"_reset");
	HX_VISIT_MEMBER_NAME(_cheat,"_cheat");
	HX_VISIT_MEMBER_NAME(byName,"byName");
	HX_VISIT_MEMBER_NAME(gamepadsAdded,"gamepadsAdded");
	HX_VISIT_MEMBER_NAME(keyboardScheme,"keyboardScheme");
	HX_VISIT_MEMBER_NAME(trackedinputs,"trackedinputs");
	 ::flixel::input::actions::FlxActionSet_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Controls_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"UP") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { return ::hx::Val( _up ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_upP") ) { return ::hx::Val( _upP ); }
		if (HX_FIELD_EQ(inName,"_upR") ) { return ::hx::Val( _upR ); }
		if (HX_FIELD_EQ(inName,"LEFT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT() ); }
		if (HX_FIELD_EQ(inName,"DOWN") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN() ); }
		if (HX_FIELD_EQ(inName,"UP_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP_P() ); }
		if (HX_FIELD_EQ(inName,"UP_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP_R() ); }
		if (HX_FIELD_EQ(inName,"BACK") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_BACK() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { return ::hx::Val( _left ); }
		if (HX_FIELD_EQ(inName,"_down") ) { return ::hx::Val( _down ); }
		if (HX_FIELD_EQ(inName,"_back") ) { return ::hx::Val( _back ); }
		if (HX_FIELD_EQ(inName,"RIGHT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT() ); }
		if (HX_FIELD_EQ(inName,"PAUSE") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_PAUSE() ); }
		if (HX_FIELD_EQ(inName,"RESET") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RESET() ); }
		if (HX_FIELD_EQ(inName,"CHEAT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_CHEAT() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { return ::hx::Val( _right ); }
		if (HX_FIELD_EQ(inName,"_leftP") ) { return ::hx::Val( _leftP ); }
		if (HX_FIELD_EQ(inName,"_downP") ) { return ::hx::Val( _downP ); }
		if (HX_FIELD_EQ(inName,"_leftR") ) { return ::hx::Val( _leftR ); }
		if (HX_FIELD_EQ(inName,"_downR") ) { return ::hx::Val( _downR ); }
		if (HX_FIELD_EQ(inName,"_pause") ) { return ::hx::Val( _pause ); }
		if (HX_FIELD_EQ(inName,"_reset") ) { return ::hx::Val( _reset ); }
		if (HX_FIELD_EQ(inName,"_cheat") ) { return ::hx::Val( _cheat ); }
		if (HX_FIELD_EQ(inName,"byName") ) { return ::hx::Val( byName ); }
		if (HX_FIELD_EQ(inName,"get_UP") ) { return ::hx::Val( get_UP_dyn() ); }
		if (HX_FIELD_EQ(inName,"LEFT_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT_P() ); }
		if (HX_FIELD_EQ(inName,"DOWN_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN_P() ); }
		if (HX_FIELD_EQ(inName,"LEFT_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT_R() ); }
		if (HX_FIELD_EQ(inName,"DOWN_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN_R() ); }
		if (HX_FIELD_EQ(inName,"ACCEPT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_ACCEPT() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyTo") ) { return ::hx::Val( copyTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rightP") ) { return ::hx::Val( _rightP ); }
		if (HX_FIELD_EQ(inName,"_rightR") ) { return ::hx::Val( _rightR ); }
		if (HX_FIELD_EQ(inName,"_accept") ) { return ::hx::Val( _accept ); }
		if (HX_FIELD_EQ(inName,"RIGHT_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT_P() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT_R() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_LEFT") ) { return ::hx::Val( get_LEFT_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN") ) { return ::hx::Val( get_DOWN_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_UP_P") ) { return ::hx::Val( get_UP_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_UP_R") ) { return ::hx::Val( get_UP_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_BACK") ) { return ::hx::Val( get_BACK_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return ::hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindKeys") ) { return ::hx::Val( bindKeys_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_RIGHT") ) { return ::hx::Val( get_RIGHT_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_PAUSE") ) { return ::hx::Val( get_PAUSE_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_RESET") ) { return ::hx::Val( get_RESET_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_CHEAT") ) { return ::hx::Val( get_CHEAT_dyn() ); }
		if (HX_FIELD_EQ(inName,"addbutton") ) { return ::hx::Val( addbutton_dyn() ); }
		if (HX_FIELD_EQ(inName,"setHitBox") ) { return ::hx::Val( setHitBox_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_LEFT_P") ) { return ::hx::Val( get_LEFT_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN_P") ) { return ::hx::Val( get_DOWN_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_LEFT_R") ) { return ::hx::Val( get_LEFT_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN_R") ) { return ::hx::Val( get_DOWN_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ACCEPT") ) { return ::hx::Val( get_ACCEPT_dyn() ); }
		if (HX_FIELD_EQ(inName,"unbindKeys") ) { return ::hx::Val( unbindKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGamepad") ) { return ::hx::Val( addGamepad_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_RIGHT_P") ) { return ::hx::Val( get_RIGHT_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_RIGHT_R") ) { return ::hx::Val( get_RIGHT_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkByName") ) { return ::hx::Val( checkByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindButtons") ) { return ::hx::Val( bindButtons_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"forEachBound") ) { return ::hx::Val( forEachBound_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadKeyBinds") ) { return ::hx::Val( loadKeyBinds_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInputsFor") ) { return ::hx::Val( getInputsFor_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeDevice") ) { return ::hx::Val( removeDevice_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepadsAdded") ) { return ::hx::Val( gamepadsAdded ); }
		if (HX_FIELD_EQ(inName,"trackedinputs") ) { return ::hx::Val( trackedinputs ); }
		if (HX_FIELD_EQ(inName,"setVirtualPad") ) { return ::hx::Val( setVirtualPad_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeGamepad") ) { return ::hx::Val( removeGamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"unbindButtons") ) { return ::hx::Val( unbindButtons_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keyboardScheme") ) { return ::hx::Val( keyboardScheme ); }
		if (HX_FIELD_EQ(inName,"removeFlxInput") ) { return ::hx::Val( removeFlxInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"addAndroidBack") ) { return ::hx::Val( addAndroidBack_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceBinding") ) { return ::hx::Val( replaceBinding_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeKeyboard") ) { return ::hx::Val( removeKeyboard_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getDialogueName") ) { return ::hx::Val( getDialogueName_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setKeyboardScheme") ) { return ::hx::Val( setKeyboardScheme_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGamepadLiteral") ) { return ::hx::Val( addGamepadLiteral_dyn() ); }
		if (HX_FIELD_EQ(inName,"addDefaultGamepad") ) { return ::hx::Val( addDefaultGamepad_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mergeKeyboardScheme") ) { return ::hx::Val( mergeKeyboardScheme_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getActionFromControl") ) { return ::hx::Val( getActionFromControl_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"getDialogueNameFromToken") ) { return ::hx::Val( getDialogueNameFromToken_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Controls_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addKeys") ) { outValue = addKeys_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isDevice") ) { outValue = isDevice_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isGamepad") ) { outValue = isGamepad_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"removeKeys") ) { outValue = removeKeys_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addButtons") ) { outValue = addButtons_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeButtons") ) { outValue = removeButtons_dyn(); return true; }
	}
	return false;
}

::hx::Val Controls_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { _up=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_upP") ) { _upP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_upR") ) { _upR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { _left=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_down") ) { _down=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_back") ) { _back=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { _right=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftP") ) { _leftP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downP") ) { _downP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftR") ) { _leftR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downR") ) { _downR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pause") ) { _pause=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_reset") ) { _reset=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cheat") ) { _cheat=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"byName") ) { byName=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rightP") ) { _rightP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rightR") ) { _rightR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_accept") ) { _accept=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepadsAdded") ) { gamepadsAdded=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trackedinputs") ) { trackedinputs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keyboardScheme") ) { keyboardScheme=inValue.Cast<  ::KeyboardScheme >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Controls_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_up",7a,7c,48,00));
	outFields->push(HX_("_left",e6,23,c1,fa));
	outFields->push(HX_("_right",1d,53,4b,e5));
	outFields->push(HX_("_down",41,14,7f,f5));
	outFields->push(HX_("_upP",96,6e,24,3f));
	outFields->push(HX_("_leftP",aa,45,3e,6e));
	outFields->push(HX_("_rightP",93,66,9d,bc));
	outFields->push(HX_("_downP",ef,a4,b2,d9));
	outFields->push(HX_("_upR",98,6e,24,3f));
	outFields->push(HX_("_leftR",ac,45,3e,6e));
	outFields->push(HX_("_rightR",95,66,9d,bc));
	outFields->push(HX_("_downR",f1,a4,b2,d9));
	outFields->push(HX_("_accept",a7,a4,7d,79));
	outFields->push(HX_("_back",06,f6,21,f4));
	outFields->push(HX_("_pause",37,1e,3f,b9));
	outFields->push(HX_("_reset",10,91,af,e2));
	outFields->push(HX_("_cheat",54,de,9d,41));
	outFields->push(HX_("byName",c2,2b,4e,0e));
	outFields->push(HX_("gamepadsAdded",ae,52,a9,94));
	outFields->push(HX_("keyboardScheme",2c,c8,f4,c5));
	outFields->push(HX_("UP",5b,4a,00,00));
	outFields->push(HX_("LEFT",07,d0,70,32));
	outFields->push(HX_("RIGHT",bc,43,52,67));
	outFields->push(HX_("DOWN",62,c0,2e,2d));
	outFields->push(HX_("UP_P",2c,2a,6c,38));
	outFields->push(HX_("LEFT_P",d8,72,4a,4c));
	outFields->push(HX_("RIGHT_P",cd,fd,37,93));
	outFields->push(HX_("DOWN_P",f3,6f,a9,e6));
	outFields->push(HX_("UP_R",2e,2a,6c,38));
	outFields->push(HX_("LEFT_R",da,72,4a,4c));
	outFields->push(HX_("RIGHT_R",cf,fd,37,93));
	outFields->push(HX_("DOWN_R",f5,6f,a9,e6));
	outFields->push(HX_("ACCEPT",08,3f,89,bd));
	outFields->push(HX_("BACK",27,a2,d1,2b));
	outFields->push(HX_("PAUSE",d6,0e,46,3b));
	outFields->push(HX_("RESET",af,81,b6,64));
	outFields->push(HX_("CHEAT",f3,ce,a4,c3));
	outFields->push(HX_("trackedinputs",53,c0,a8,a9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Controls_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_up),HX_("_up",7a,7c,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_left),HX_("_left",e6,23,c1,fa)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_right),HX_("_right",1d,53,4b,e5)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_down),HX_("_down",41,14,7f,f5)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_upP),HX_("_upP",96,6e,24,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_leftP),HX_("_leftP",aa,45,3e,6e)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_rightP),HX_("_rightP",93,66,9d,bc)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_downP),HX_("_downP",ef,a4,b2,d9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_upR),HX_("_upR",98,6e,24,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_leftR),HX_("_leftR",ac,45,3e,6e)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_rightR),HX_("_rightR",95,66,9d,bc)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_downR),HX_("_downR",f1,a4,b2,d9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_accept),HX_("_accept",a7,a4,7d,79)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_back),HX_("_back",06,f6,21,f4)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_pause),HX_("_pause",37,1e,3f,b9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_reset),HX_("_reset",10,91,af,e2)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_cheat),HX_("_cheat",54,de,9d,41)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Controls_obj,byName),HX_("byName",c2,2b,4e,0e)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Controls_obj,gamepadsAdded),HX_("gamepadsAdded",ae,52,a9,94)},
	{::hx::fsObject /*  ::KeyboardScheme */ ,(int)offsetof(Controls_obj,keyboardScheme),HX_("keyboardScheme",2c,c8,f4,c5)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Controls_obj,trackedinputs),HX_("trackedinputs",53,c0,a8,a9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Controls_obj_sStaticStorageInfo = 0;
#endif

static ::String Controls_obj_sMemberFields[] = {
	HX_("_up",7a,7c,48,00),
	HX_("_left",e6,23,c1,fa),
	HX_("_right",1d,53,4b,e5),
	HX_("_down",41,14,7f,f5),
	HX_("_upP",96,6e,24,3f),
	HX_("_leftP",aa,45,3e,6e),
	HX_("_rightP",93,66,9d,bc),
	HX_("_downP",ef,a4,b2,d9),
	HX_("_upR",98,6e,24,3f),
	HX_("_leftR",ac,45,3e,6e),
	HX_("_rightR",95,66,9d,bc),
	HX_("_downR",f1,a4,b2,d9),
	HX_("_accept",a7,a4,7d,79),
	HX_("_back",06,f6,21,f4),
	HX_("_pause",37,1e,3f,b9),
	HX_("_reset",10,91,af,e2),
	HX_("_cheat",54,de,9d,41),
	HX_("byName",c2,2b,4e,0e),
	HX_("gamepadsAdded",ae,52,a9,94),
	HX_("keyboardScheme",2c,c8,f4,c5),
	HX_("get_UP",a4,e1,2f,a3),
	HX_("get_LEFT",90,8b,2b,b2),
	HX_("get_RIGHT",13,a0,fb,aa),
	HX_("get_DOWN",eb,7b,e9,ac),
	HX_("get_UP_P",b5,e5,26,b8),
	HX_("get_LEFT_P",a1,e2,d1,3c),
	HX_("get_RIGHT_P",e4,5d,32,19),
	HX_("get_DOWN_P",bc,df,30,d7),
	HX_("get_UP_R",b7,e5,26,b8),
	HX_("get_LEFT_R",a3,e2,d1,3c),
	HX_("get_RIGHT_R",e6,5d,32,19),
	HX_("get_DOWN_R",be,df,30,d7),
	HX_("get_ACCEPT",d1,ae,10,ae),
	HX_("get_BACK",b0,5d,8c,ab),
	HX_("get_PAUSE",2d,6b,ef,7e),
	HX_("get_RESET",06,de,5f,a8),
	HX_("get_CHEAT",4a,2b,4e,07),
	HX_("trackedinputs",53,c0,a8,a9),
	HX_("addbutton",d3,22,70,5d),
	HX_("setHitBox",ba,1a,b7,b6),
	HX_("setVirtualPad",4a,c2,3f,02),
	HX_("removeFlxInput",9c,4e,9c,6b),
	HX_("addAndroidBack",55,6c,24,ac),
	HX_("update",09,86,05,87),
	HX_("checkByName",aa,fe,5f,f0),
	HX_("getDialogueName",39,8d,0f,32),
	HX_("getDialogueNameFromToken",b6,d0,32,d3),
	HX_("getActionFromControl",87,31,3f,3d),
	HX_("forEachBound",34,ae,22,2f),
	HX_("replaceBinding",71,99,ae,a4),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("copyTo",90,1c,33,c9),
	HX_("mergeKeyboardScheme",04,51,83,14),
	HX_("bindKeys",51,26,d1,b4),
	HX_("unbindKeys",aa,0d,95,3a),
	HX_("setKeyboardScheme",6e,4f,d6,5b),
	HX_("loadKeyBinds",3d,a2,d2,b0),
	HX_("removeKeyboard",0b,f9,7f,32),
	HX_("addGamepad",80,0c,10,f1),
	HX_("addGamepadLiteral",cf,54,ef,a8),
	HX_("removeGamepad",bd,3c,40,62),
	HX_("addDefaultGamepad",e1,d7,98,02),
	HX_("bindButtons",04,66,e6,c6),
	HX_("unbindButtons",4b,dc,20,e8),
	HX_("getInputsFor",ea,35,e1,37),
	HX_("removeDevice",fa,77,a5,e0),
	::String(null()) };

::hx::Class Controls_obj::__mClass;

static ::String Controls_obj_sStaticFields[] = {
	HX_("init",10,3b,bb,45),
	HX_("addKeys",b5,24,44,83),
	HX_("removeKeys",58,1c,26,c4),
	HX_("addButtons",20,7e,ff,31),
	HX_("removeButtons",5d,ae,2f,a3),
	HX_("isDevice",20,78,e1,c9),
	HX_("isGamepad",d7,5d,84,8d),
	::String(null())
};

void Controls_obj::__register()
{
	Controls_obj _hx_dummy;
	Controls_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Controls",96,42,6e,11);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Controls_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Controls_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Controls_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Controls_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Controls_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Controls_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

