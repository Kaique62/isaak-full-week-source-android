// Generated by Haxe 4.2.2
#include <hxcpp.h>

#ifndef INCLUDED_CustomControls
#include <CustomControls.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_options_CustomControlsState
#include <options/CustomControlsState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d0d80791801a372f_78_new,"CustomControls","new",0x11e7d7d9,"CustomControls.new","Options.hx",78,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d80791801a372f_83_press,"CustomControls","press",0x6cc7eb3c,"CustomControls.press","Options.hx",83,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d80791801a372f_89_updateDisplay,"CustomControls","updateDisplay",0xd75c07f2,"CustomControls.updateDisplay","Options.hx",89,0x9d9a0240)

void CustomControls_obj::__construct(::String desc){
            	HX_STACKFRAME(&_hx_pos_d0d80791801a372f_78_new)
HXLINE(  79)		super::__construct();
HXLINE(  80)		this->description = desc;
            	}

Dynamic CustomControls_obj::__CreateEmpty() { return new CustomControls_obj; }

void *CustomControls_obj::_hx_vtable = 0;

Dynamic CustomControls_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CustomControls_obj > _hx_result = new CustomControls_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CustomControls_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0dc8828b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0dc8828b;
	} else {
		return inClassId==(int)0x27a70eb9;
	}
}

bool CustomControls_obj::press(){
            	HX_GC_STACKFRAME(&_hx_pos_d0d80791801a372f_83_press)
HXLINE(  84)		{
HXLINE(  84)			 ::flixel::FlxState nextState =  ::options::CustomControlsState_obj::__alloc( HX_CTX );
HXDLIN(  84)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  84)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  85)		return true;
            	}


::String CustomControls_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_d0d80791801a372f_89_updateDisplay)
HXDLIN(  89)		return HX_("controls",76,86,bc,37);
            	}



::hx::ObjectPtr< CustomControls_obj > CustomControls_obj::__new(::String desc) {
	::hx::ObjectPtr< CustomControls_obj > __this = new CustomControls_obj();
	__this->__construct(desc);
	return __this;
}

::hx::ObjectPtr< CustomControls_obj > CustomControls_obj::__alloc(::hx::Ctx *_hx_ctx,::String desc) {
	CustomControls_obj *__this = (CustomControls_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CustomControls_obj), true, "CustomControls"));
	*(void **)__this = CustomControls_obj::_hx_vtable;
	__this->__construct(desc);
	return __this;
}

CustomControls_obj::CustomControls_obj()
{
}

::hx::Val CustomControls_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"press") ) { return ::hx::Val( press_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CustomControls_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CustomControls_obj_sStaticStorageInfo = 0;
#endif

static ::String CustomControls_obj_sMemberFields[] = {
	HX_("press",83,53,88,c8),
	HX_("updateDisplay",39,8f,b8,86),
	::String(null()) };

::hx::Class CustomControls_obj::__mClass;

void CustomControls_obj::__register()
{
	CustomControls_obj _hx_dummy;
	CustomControls_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CustomControls",67,f7,9e,04);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CustomControls_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CustomControls_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CustomControls_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CustomControls_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

