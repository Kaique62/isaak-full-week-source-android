// Generated by Haxe 4.2.2
#include <hxcpp.h>

#ifndef INCLUDED_Config
#include <Config.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ui_FlxVirtualPad
#include <ui/FlxVirtualPad.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_29a0e851121e99c7_12_new,"Config","new",0x57de84d4,"Config.new","Config.hx",12,0x61f8f11c)
HX_LOCAL_STACK_FRAME(_hx_pos_29a0e851121e99c7_17_setdownscroll,"Config","setdownscroll",0xaad7cd85,"Config.setdownscroll","Config.hx",17,0x61f8f11c)
HX_LOCAL_STACK_FRAME(_hx_pos_29a0e851121e99c7_25_getdownscroll,"Config","getdownscroll",0x65d1eb79,"Config.getdownscroll","Config.hx",25,0x61f8f11c)
HX_LOCAL_STACK_FRAME(_hx_pos_29a0e851121e99c7_30_getcontrolmode,"Config","getcontrolmode",0x4aaae476,"Config.getcontrolmode","Config.hx",30,0x61f8f11c)
HX_LOCAL_STACK_FRAME(_hx_pos_29a0e851121e99c7_36_setcontrolmode,"Config","setcontrolmode",0x6acaccea,"Config.setcontrolmode","Config.hx",36,0x61f8f11c)
HX_LOCAL_STACK_FRAME(_hx_pos_29a0e851121e99c7_45_savecustom,"Config","savecustom",0xc48720ba,"Config.savecustom","Config.hx",45,0x61f8f11c)
HX_LOCAL_STACK_FRAME(_hx_pos_29a0e851121e99c7_68_loadcustom,"Config","loadcustom",0x30f8c463,"Config.loadcustom","Config.hx",68,0x61f8f11c)
HX_LOCAL_STACK_FRAME(_hx_pos_29a0e851121e99c7_82_setFrameRate,"Config","setFrameRate",0x42b1eeb7,"Config.setFrameRate","Config.hx",82,0x61f8f11c)
HX_LOCAL_STACK_FRAME(_hx_pos_29a0e851121e99c7_90_getFrameRate,"Config","getFrameRate",0x2db8cb43,"Config.getFrameRate","Config.hx",90,0x61f8f11c)

void Config_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_29a0e851121e99c7_12_new)
HXLINE(  13)		this->save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE(  14)		this->save->bind(HX_("saveconrtol",04,89,7f,a4),null());
            	}

Dynamic Config_obj::__CreateEmpty() { return new Config_obj; }

void *Config_obj::_hx_vtable = 0;

Dynamic Config_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Config_obj > _hx_result = new Config_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Config_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5db18da2;
}

bool Config_obj::setdownscroll( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_29a0e851121e99c7_17_setdownscroll)
HXLINE(  18)		if (::hx::IsNull( this->save->data->__Field(HX_("isdownscroll",59,6a,42,2b),::hx::paccDynamic) )) {
HXLINE(  18)			this->save->data->__SetField(HX_("isdownscroll",59,6a,42,2b),false,::hx::paccDynamic);
            		}
HXLINE(  20)		this->save->data->__SetField(HX_("isdownscroll",59,6a,42,2b),!(( (bool)(this->save->data->__Field(HX_("isdownscroll",59,6a,42,2b),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE(  21)		this->save->flush(null(),null());
HXLINE(  22)		return ( (bool)(this->save->data->__Field(HX_("isdownscroll",59,6a,42,2b),::hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Config_obj,setdownscroll,return )

bool Config_obj::getdownscroll(){
            	HX_STACKFRAME(&_hx_pos_29a0e851121e99c7_25_getdownscroll)
HXLINE(  26)		if (::hx::IsNotNull( this->save->data->__Field(HX_("isdownscroll",59,6a,42,2b),::hx::paccDynamic) )) {
HXLINE(  26)			return ( (bool)(this->save->data->__Field(HX_("isdownscroll",59,6a,42,2b),::hx::paccDynamic)) );
            		}
HXLINE(  27)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Config_obj,getdownscroll,return )

int Config_obj::getcontrolmode(){
            	HX_STACKFRAME(&_hx_pos_29a0e851121e99c7_30_getcontrolmode)
HXLINE(  32)		if (::hx::IsNotNull( this->save->data->__Field(HX_("buttonsmode",24,da,f2,39),::hx::paccDynamic) )) {
HXLINE(  32)			return ( (int)( ::Dynamic(this->save->data->__Field(HX_("buttonsmode",24,da,f2,39),::hx::paccDynamic))->__GetItem(0)) );
            		}
HXLINE(  33)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Config_obj,getcontrolmode,return )

int Config_obj::setcontrolmode(::hx::Null< int >  __o_mode){
            		int mode = __o_mode.Default(0);
            	HX_STACKFRAME(&_hx_pos_29a0e851121e99c7_36_setcontrolmode)
HXLINE(  38)		if (::hx::IsNull( this->save->data->__Field(HX_("buttonsmode",24,da,f2,39),::hx::paccDynamic) )) {
HXLINE(  38)			this->save->data->__SetField(HX_("buttonsmode",24,da,f2,39),::cpp::VirtualArray_obj::__new(),::hx::paccDynamic);
            		}
HXLINE(  39)		 ::Dynamic(this->save->data->__Field(HX_("buttonsmode",24,da,f2,39),::hx::paccDynamic))->__SetItem(0,mode);
HXLINE(  40)		this->save->flush(null(),null());
HXLINE(  42)		return ( (int)( ::Dynamic(this->save->data->__Field(HX_("buttonsmode",24,da,f2,39),::hx::paccDynamic))->__GetItem(0)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Config_obj,setcontrolmode,return )

void Config_obj::savecustom( ::ui::FlxVirtualPad _pad){
            	HX_GC_STACKFRAME(&_hx_pos_29a0e851121e99c7_45_savecustom)
HXLINE(  46)		::haxe::Log_obj::trace(HX_("saved",87,4a,8c,77),::hx::SourceInfo(HX_("source/Config.hx",a8,63,18,11),46,HX_("Config",e2,ca,66,fc),HX_("savecustom",ae,9e,b7,53)));
HXLINE(  48)		if (::hx::IsNull( this->save->data->__Field(HX_("buttons",41,52,75,ca),::hx::paccDynamic) )) {
HXLINE(  50)			this->save->data->__SetField(HX_("buttons",41,52,75,ca),::cpp::VirtualArray_obj::__new(),::hx::paccDynamic);
HXLINE(  52)			{
HXLINE(  52)				 ::Dynamic filter = null();
HXDLIN(  52)				 ::flixel::group::FlxTypedGroupIterator buttons =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_pad->group->members,filter);
HXDLIN(  52)				while(buttons->hasNext()){
HXLINE(  52)					 ::flixel::FlxSprite buttons1 = buttons->next().StaticCast<  ::flixel::FlxSprite >();
HXLINE(  54)					 ::Dynamic _hx_tmp =  ::Dynamic( ::Dynamic(this->save->data->__Field(HX_("buttons",41,52,75,ca),::hx::paccDynamic))->__Field(HX_("push",da,11,61,4a),::hx::paccDynamic));
HXDLIN(  54)					Float X = buttons1->x;
HXDLIN(  54)					Float Y = buttons1->y;
HXDLIN(  54)					 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN(  54)					point->_inPool = false;
HXDLIN(  54)					_hx_tmp(point);
            				}
            			}
            		}
            		else {
HXLINE(  58)			int tempCount = 0;
HXLINE(  59)			{
HXLINE(  59)				 ::Dynamic filter = null();
HXDLIN(  59)				 ::flixel::group::FlxTypedGroupIterator buttons =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_pad->group->members,filter);
HXDLIN(  59)				while(buttons->hasNext()){
HXLINE(  59)					 ::flixel::FlxSprite buttons1 = buttons->next().StaticCast<  ::flixel::FlxSprite >();
HXLINE(  61)					 ::Dynamic _hx_tmp =  ::Dynamic(this->save->data->__Field(HX_("buttons",41,52,75,ca),::hx::paccDynamic));
HXDLIN(  61)					Float X = buttons1->x;
HXDLIN(  61)					Float Y = buttons1->y;
HXDLIN(  61)					 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN(  61)					point->_inPool = false;
HXDLIN(  61)					_hx_tmp->__SetItem(tempCount,point);
HXLINE(  62)					tempCount = (tempCount + 1);
            				}
            			}
            		}
HXLINE(  65)		this->save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Config_obj,savecustom,(void))

 ::ui::FlxVirtualPad Config_obj::loadcustom( ::ui::FlxVirtualPad _pad){
            	HX_GC_STACKFRAME(&_hx_pos_29a0e851121e99c7_68_loadcustom)
HXLINE(  70)		if (::hx::IsNull( this->save->data->__Field(HX_("buttons",41,52,75,ca),::hx::paccDynamic) )) {
HXLINE(  70)			return _pad;
            		}
HXLINE(  71)		int tempCount = 0;
HXLINE(  73)		{
HXLINE(  73)			 ::Dynamic filter = null();
HXDLIN(  73)			 ::flixel::group::FlxTypedGroupIterator buttons =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_pad->group->members,filter);
HXDLIN(  73)			while(buttons->hasNext()){
HXLINE(  73)				 ::flixel::FlxSprite buttons1 = buttons->next().StaticCast<  ::flixel::FlxSprite >();
HXLINE(  75)				buttons1->set_x(( (Float)( ::Dynamic(this->save->data->__Field(HX_("buttons",41,52,75,ca),::hx::paccDynamic))->__GetItem(tempCount)->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) ));
HXLINE(  76)				buttons1->set_y(( (Float)( ::Dynamic(this->save->data->__Field(HX_("buttons",41,52,75,ca),::hx::paccDynamic))->__GetItem(tempCount)->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ));
HXLINE(  77)				tempCount = (tempCount + 1);
            			}
            		}
HXLINE(  79)		return _pad;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Config_obj,loadcustom,return )

void Config_obj::setFrameRate(::hx::Null< int >  __o_fps){
            		int fps = __o_fps.Default(60);
            	HX_STACKFRAME(&_hx_pos_29a0e851121e99c7_82_setFrameRate)
HXLINE(  83)		if ((fps < 10)) {
HXLINE(  83)			return;
            		}
HXLINE(  85)		::openfl::Lib_obj::get_current()->stage->set_frameRate(( (Float)(fps) ));
HXLINE(  86)		this->save->data->__SetField(HX_("framerate",8d,e5,4b,4e),fps,::hx::paccDynamic);
HXLINE(  87)		this->save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Config_obj,setFrameRate,(void))

int Config_obj::getFrameRate(){
            	HX_STACKFRAME(&_hx_pos_29a0e851121e99c7_90_getFrameRate)
HXLINE(  91)		if (::hx::IsNotNull( this->save->data->__Field(HX_("framerate",8d,e5,4b,4e),::hx::paccDynamic) )) {
HXLINE(  91)			return ( (int)(this->save->data->__Field(HX_("framerate",8d,e5,4b,4e),::hx::paccDynamic)) );
            		}
HXLINE(  92)		return 60;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Config_obj,getFrameRate,return )


::hx::ObjectPtr< Config_obj > Config_obj::__new() {
	::hx::ObjectPtr< Config_obj > __this = new Config_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Config_obj > Config_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Config_obj *__this = (Config_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Config_obj), true, "Config"));
	*(void **)__this = Config_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Config_obj::Config_obj()
{
}

void Config_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Config);
	HX_MARK_MEMBER_NAME(save,"save");
	HX_MARK_END_CLASS();
}

void Config_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(save,"save");
}

::hx::Val Config_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"save") ) { return ::hx::Val( save ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"savecustom") ) { return ::hx::Val( savecustom_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadcustom") ) { return ::hx::Val( loadcustom_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setFrameRate") ) { return ::hx::Val( setFrameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFrameRate") ) { return ::hx::Val( getFrameRate_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setdownscroll") ) { return ::hx::Val( setdownscroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"getdownscroll") ) { return ::hx::Val( getdownscroll_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getcontrolmode") ) { return ::hx::Val( getcontrolmode_dyn() ); }
		if (HX_FIELD_EQ(inName,"setcontrolmode") ) { return ::hx::Val( setcontrolmode_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Config_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"save") ) { save=inValue.Cast<  ::flixel::util::FlxSave >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Config_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("save",3d,8b,4d,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Config_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::util::FlxSave */ ,(int)offsetof(Config_obj,save),HX_("save",3d,8b,4d,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Config_obj_sStaticStorageInfo = 0;
#endif

static ::String Config_obj_sMemberFields[] = {
	HX_("save",3d,8b,4d,4c),
	HX_("setdownscroll",11,80,9b,fa),
	HX_("getdownscroll",05,9e,95,b5),
	HX_("getcontrolmode",6a,6c,23,c6),
	HX_("setcontrolmode",de,54,43,e6),
	HX_("savecustom",ae,9e,b7,53),
	HX_("loadcustom",57,42,29,c0),
	HX_("setFrameRate",ab,d1,74,5d),
	HX_("getFrameRate",37,ae,7b,48),
	::String(null()) };

::hx::Class Config_obj::__mClass;

void Config_obj::__register()
{
	Config_obj _hx_dummy;
	Config_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Config",e2,ca,66,fc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Config_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Config_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Config_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Config_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

