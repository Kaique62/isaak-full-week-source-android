// Generated by Haxe 4.2.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_AnimationDebug
#include <AnimationDebug.h>
#endif
#ifndef INCLUDED_BackgroundDancer
#include <BackgroundDancer.h>
#endif
#ifndef INCLUDED_BackgroundGirls
#include <BackgroundGirls.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_ConvertScore
#include <ConvertScore.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DialogueBox
#include <DialogueBox.h>
#endif
#ifndef INCLUDED_EtternaFunctions
#include <EtternaFunctions.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_GameOverSubstate
#include <GameOverSubstate.h>
#endif
#ifndef INCLUDED_GitarooPause
#include <GitarooPause.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_ModchartState
#include <ModchartState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Ratings
#include <Ratings.h>
#endif
#ifndef INCLUDED_Replay
#include <Replay.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_VideoState
#include <VideoState.h>
#endif
#ifndef INCLUDED_WiggleEffect
#include <WiggleEffect.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveDirection
#include <flixel/addons/effects/chainable/FlxWaveDirection.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveEffect
#include <flixel/addons/effects/chainable/FlxWaveEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveMode
#include <flixel/addons/effects/chainable/FlxWaveMode.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_IFlxEffect
#include <flixel/addons/effects/chainable/IFlxEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_android_FlxAndroidKeyList
#include <flixel/input/android/FlxAndroidKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_android_FlxAndroidKeys
#include <flixel/input/android/FlxAndroidKeys.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_ui_ControlsGroup
#include <ui/ControlsGroup.h>
#endif
#ifndef INCLUDED_ui_FlxActionMode
#include <ui/FlxActionMode.h>
#endif
#ifndef INCLUDED_ui_FlxDPadMode
#include <ui/FlxDPadMode.h>
#endif
#ifndef INCLUDED_ui_FlxVirtualPad
#include <ui/FlxVirtualPad.h>
#endif
#ifndef INCLUDED_ui_Hitbox
#include <ui/Hitbox.h>
#endif
#ifndef INCLUDED_ui_Mobilecontrols
#include <ui/Mobilecontrols.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_70_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",70,0xb30d7781)
static const ::String _hx_array_data_46c2835d_1[] = {
	HX_("dad:blah blah blah",24,b6,5d,84),HX_("bf:coolswag",c9,19,15,c1),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_229_addObject,"PlayState","addObject",0x09b6776f,"PlayState.addObject","PlayState.hx",229,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_230_removeObject,"PlayState","removeObject",0x9fa28dd4,"PlayState.removeObject","PlayState.hx",230,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_234_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",234,0xb30d7781)
static const ::String _hx_array_data_46c2835d_11[] = {
	HX_("HEY!",e5,05,cc,2f),HX_("You think you can just sing\nwith my daughter like that?",06,7c,81,d3),HX_("If you want to date her...",32,0f,35,a9),HX_("You're going to have to go \nthrough ME first!",25,9e,05,cd),
};
static const ::String _hx_array_data_46c2835d_12[] = {
	HX_("gah you think you're hot stuff?",e2,4c,78,fe),HX_("If you can beat me here...",ac,b1,a2,9f),HX_("Only then I will even CONSIDER letting you\ndate my daughter!",ac,04,01,81),
};
static const ::String _hx_array_data_46c2835d_13[] = {
	HX_("Not too shabby boy.",dc,48,a8,f0),HX_("",00,00,00,00),
};
static const ::String _hx_array_data_46c2835d_14[] = {
	HX_("Hey you're pretty cute.",02,ae,61,fa),HX_("Use the arrow keys to keep up \nwith me singing.",91,5e,d0,ea),
};
static const int _hx_array_data_46c2835d_15[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,(int)16,(int)17,(int)18,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1148_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1148,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1141_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1141,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1132_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1132,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1218_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1218,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1236_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1236,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1251_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1251,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1246_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1246,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1256_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1256,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1191_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1191,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1307_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1307,0xb30d7781)
static const ::String _hx_array_data_46c2835d_27[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_46c2835d_28[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
static const ::String _hx_array_data_46c2835d_29[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1356_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1356,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1373_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1373,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1392_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1392,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1282_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1282,0xb30d7781)
static const int _hx_array_data_46c2835d_34[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1412_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",1412,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1477_generateSong,"PlayState","generateSong",0x3a61615b,"PlayState.generateSong","PlayState.hx",1477,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1595_sortByShit,"PlayState","sortByShit",0xfa9f74a6,"PlayState.sortByShit","PlayState.hx",1595,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1600_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1600,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1737_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1737,0xb30d7781)
static const int _hx_array_data_46c2835d_49[] = {
	(int)6,
};
static const int _hx_array_data_46c2835d_50[] = {
	(int)7,
};
static const int _hx_array_data_46c2835d_51[] = {
	(int)5,
};
static const int _hx_array_data_46c2835d_52[] = {
	(int)4,
};
static const int _hx_array_data_46c2835d_53[] = {
	(int)0,
};
static const int _hx_array_data_46c2835d_54[] = {
	(int)4,(int)8,
};
static const int _hx_array_data_46c2835d_55[] = {
	(int)12,(int)16,
};
static const int _hx_array_data_46c2835d_56[] = {
	(int)1,
};
static const int _hx_array_data_46c2835d_57[] = {
	(int)5,(int)9,
};
static const int _hx_array_data_46c2835d_58[] = {
	(int)13,(int)17,
};
static const int _hx_array_data_46c2835d_59[] = {
	(int)2,
};
static const int _hx_array_data_46c2835d_60[] = {
	(int)6,(int)10,
};
static const int _hx_array_data_46c2835d_61[] = {
	(int)14,(int)18,
};
static const int _hx_array_data_46c2835d_62[] = {
	(int)3,
};
static const int _hx_array_data_46c2835d_63[] = {
	(int)7,(int)11,
};
static const int _hx_array_data_46c2835d_64[] = {
	(int)15,(int)19,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1746_tweenCamIn,"PlayState","tweenCamIn",0x8478acda,"PlayState.tweenCamIn","PlayState.hx",1746,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1750_openSubState,"PlayState","openSubState",0x527dda0c,"PlayState.openSubState","PlayState.hx",1750,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1770_closeSubState,"PlayState","closeSubState",0xb7c1df78,"PlayState.closeSubState","PlayState.hx",1770,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1799_resyncVocals,"PlayState","resyncVocals",0x86228a3d,"PlayState.resyncVocals","PlayState.hx",1799,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1821_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",1821,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2321_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2321,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2433_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2433,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2519_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2519,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2538_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",2538,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2655_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2655,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2902_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2902,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2911_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2911,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2884_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2884,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2930_NearlyEquals,"PlayState","NearlyEquals",0x84760165,"PlayState.NearlyEquals","PlayState.hx",2930,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3082_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",3082,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3112_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",3112,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2939_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2939,0xb30d7781)
static const bool _hx_array_data_46c2835d_99[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_100[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_101[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2974_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2974,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2990_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2990,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3026_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",3026,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3131_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",3131,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3194_updateAccuracy,"PlayState","updateAccuracy",0x9f2d7b53,"PlayState.updateAccuracy","PlayState.hx",3194,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3202_fly,"PlayState","fly",0xf8b98ae2,"PlayState.fly","PlayState.hx",3202,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3211_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",3211,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3214_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",3214,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3206_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",3206,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3228_noteCheck,"PlayState","noteCheck",0xbf96a725,"PlayState.noteCheck","PlayState.hx",3228,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3275_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",3275,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3327_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",3327,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3349_resetFastCar,"PlayState","resetFastCar",0x6b33ac7a,"PlayState.resetFastCar","PlayState.hx",3349,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3358_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",3358,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3366_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",3366,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3380_trainStart,"PlayState","trainStart",0x6a3d10eb,"PlayState.trainStart","PlayState.hx",3380,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3391_updateTrainPos,"PlayState","updateTrainPos",0x957683c6,"PlayState.updateTrainPos","PlayState.hx",3391,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3420_trainReset,"PlayState","trainReset",0xccf9e658,"PlayState.trainReset","PlayState.hx",3420,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3433_lightningStrikeShit,"PlayState","lightningStrikeShit",0xdc0ca52b,"PlayState.lightningStrikeShit","PlayState.hx",3433,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3447_stepHit,"PlayState","stepHit",0xcb82d856,"PlayState.stepHit","PlayState.hx",3447,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3556_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",3556,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3561_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",3561,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3653_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",3653,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3670_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",3670,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_72_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",72,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_78_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",78,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_80_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",80,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_81_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",81,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_82_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",82,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_83_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",83,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_84_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",84,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_85_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",85,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_86_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",86,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_87_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",87,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_88_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",88,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_94_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",94,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_96_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",96,0xb30d7781)
static const bool _hx_array_data_46c2835d_140[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_131_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",131,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_132_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",132,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_133_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",133,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_141_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",141,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_163_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",163,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_198_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",198,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_202_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",202,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_204_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",204,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_207_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",207,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_208_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",208,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_210_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",210,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_211_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",211,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_219_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",219,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1279_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1279,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1818_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1818,0xb30d7781)

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_70_new)
HXLINE(3698)		this->curLight = 0;
HXLINE(3553)		this->lightningOffset = 8;
HXLINE(3552)		this->lightningStrikeBeat = 0;
HXLINE(3444)		this->danced = false;
HXLINE(3387)		this->startedMoving = false;
HXLINE(3376)		this->trainCooldown = 0;
HXLINE(3375)		this->trainFinishing = false;
HXLINE(3374)		this->trainCars = 8;
HXLINE(3372)		this->trainFrameTiming = ((Float)0);
HXLINE(3371)		this->trainMoving = false;
HXLINE(3345)		this->fastCarCanDrive = true;
HXLINE(3225)		this->etternaModeScore = 0;
HXLINE(3223)		this->mashViolations = 0;
HXLINE(3222)		this->mashing = 0;
HXLINE(2936)		this->leftHold = false;
HXLINE(2935)		this->rightHold = false;
HXLINE(2934)		this->downHold = false;
HXLINE(2933)		this->upHold = false;
HXLINE(2652)		this->currentTimingShown = null();
HXLINE(2651)		this->timeShown = 0;
HXLINE(2649)		this->offsetTest = ((Float)0);
HXLINE(2648)		this->hits = ::Array_obj< Float >::__new(0);
HXLINE(2646)		this->endingSong = false;
HXLINE(1816)		this->maxNPS = 0;
HXLINE(1815)		this->nps = 0;
HXLINE(1814)		this->canPause = true;
HXLINE(1813)		this->startedCountdown = false;
HXLINE(1812)		this->paused = false;
HXLINE(1474)		this->debugNum = 0;
HXLINE(1409)		this->songStarted = false;
HXLINE(1406)		this->songTime = ((Float)0);
HXLINE(1405)		this->lastReportedPlayheadPosition = 0;
HXLINE(1404)		this->previousFrameTime = 0;
HXLINE(1277)		this->luaWiggles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1275)		this->perfectMode = false;
HXLINE( 225)		this->executeModchart = false;
HXLINE( 223)		this->saveNotes = ::Array_obj< Float >::__new(0);
HXLINE( 217)		this->allowedToHeadbang = false;
HXLINE( 214)		this->triggeredAlready = false;
HXLINE( 206)		this->inCutscene = false;
HXLINE( 200)		this->defaultCamZoom = ((Float)1.05);
HXLINE( 194)		this->songScoreDef = 0;
HXLINE( 193)		this->songScore = 0;
HXLINE( 192)		this->talking = true;
HXLINE( 190)		this->wiggleShit =  ::WiggleEffect_obj::__alloc( HX_CTX );
HXLINE( 187)		this->fc = true;
HXLINE( 171)		this->isHalloween = false;
HXLINE( 168)		this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_1,2);
HXLINE( 166)		this->currentFrames = 0;
HXLINE( 165)		this->notesHitArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 156)		this->startingSong = false;
HXLINE( 155)		this->shakeEffect = false;
HXLINE( 154)		this->generatedMusic = false;
HXLINE( 152)		this->songPositionBar = ((Float)0);
HXLINE( 147)		this->ss = false;
HXLINE( 146)		this->totalPlayed = 0;
HXLINE( 145)		this->totalNotesHitDefault = ((Float)0);
HXLINE( 144)		this->totalNotesHit = ((Float)0);
HXLINE( 143)		this->accuracyDefault = ((Float)0.00);
HXLINE( 142)		this->accuracy = ((Float)0.00);
HXLINE( 140)		this->combo = 0;
HXLINE( 139)		this->health = ((Float)1);
HXLINE( 138)		this->gfSpeed = 1;
HXLINE( 136)		this->curSong = HX_("",00,00,00,00);
HXLINE( 135)		this->camZooming = false;
HXLINE( 121)		this->curSection = 0;
HXLINE( 118)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 100)		this->songLength = ((Float)0);
HXLINE(  98)		this->halloweenLevel = false;
HXLINE(  70)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::addObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_229_addObject)
HXDLIN( 229)		this->add(object);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addObject,(void))

void PlayState_obj::removeObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_230_removeObject)
HXDLIN( 230)		this->remove(object,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,removeObject,(void))

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_234_create)
HXDLIN( 234)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 235)		::PlayState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 237)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic),290 )) {
HXLINE( 238)			::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(800) ));
            		}
HXLINE( 240)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 241)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 241)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 243)		::PlayState_obj::sicks = 0;
HXLINE( 244)		::PlayState_obj::bads = 0;
HXLINE( 245)		::PlayState_obj::shits = 0;
HXLINE( 246)		::PlayState_obj::goods = 0;
HXLINE( 248)		::PlayState_obj::misses = 0;
HXLINE( 250)		::PlayState_obj::repPresses = 0;
HXLINE( 251)		::PlayState_obj::repReleases = 0;
HXLINE( 253)		::String key = (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() + HX_("/modchart",0b,0e,ff,5d));
HXDLIN( 253)		::String library = null();
HXDLIN( 253)		::String _hx_tmp = ::Main_obj::path;
HXDLIN( 253)		this->executeModchart = ::sys::FileSystem_obj::exists((_hx_tmp + ::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + key) + HX_(".lua",4a,2a,ba,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 255)		bool _hx_tmp1;
HXDLIN( 255)		if (!(this->executeModchart)) {
HXLINE( 255)			_hx_tmp1 = ::openfl::utils::Assets_obj::exists(((HX_("assets/data/",f9,10,73,a0) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/modchart.lua",d5,99,c0,d9)),null());
            		}
            		else {
HXLINE( 255)			_hx_tmp1 = false;
            		}
HXDLIN( 255)		if (_hx_tmp1) {
HXLINE( 257)			::String library = null();
HXDLIN( 257)			::String path = ::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() + HX_("/modchart",0b,0e,ff,5d))) + HX_(".lua",4a,2a,ba,1e)),HX_("TEXT",ad,94,ba,37),library);
HXLINE( 258)			 ::openfl::utils::ByteArrayData luaFile = ::openfl::utils::Assets_obj::getBytes(path);
HXLINE( 260)			::sys::FileSystem_obj::createDirectory((::Main_obj::path + HX_("assets",83,48,03,4c)));
HXLINE( 261)			::sys::FileSystem_obj::createDirectory((::Main_obj::path + HX_("assets/data",76,96,10,ae)));
HXLINE( 262)			::String _hx_tmp = (::Main_obj::path + HX_("assets/data/",f9,10,73,a0));
HXDLIN( 262)			::sys::FileSystem_obj::createDirectory((_hx_tmp + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()));
HXLINE( 265)			::String key = (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() + HX_("/modchart",0b,0e,ff,5d));
HXDLIN( 265)			::String library1 = null();
HXDLIN( 265)			::String _hx_tmp1 = ::Main_obj::path;
HXDLIN( 265)			::String _hx_tmp2 = (_hx_tmp1 + ::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + key) + HX_(".lua",4a,2a,ba,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXDLIN( 265)			::sys::io::File_obj::saveBytes(_hx_tmp2,::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytes(luaFile));
HXLINE( 267)			::String key1 = (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() + HX_("/modchart",0b,0e,ff,5d));
HXDLIN( 267)			::String library2 = null();
HXDLIN( 267)			::String _hx_tmp3 = ::Main_obj::path;
HXDLIN( 267)			this->executeModchart = ::sys::FileSystem_obj::exists((_hx_tmp3 + ::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + key1) + HX_(".lua",4a,2a,ba,1e)),HX_("TEXT",ad,94,ba,37),library2)));
            		}
HXLINE( 314)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 315)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 316)		{
HXLINE( 316)			 ::flixel::FlxCamera _hx_tmp2 = this->camHUD;
HXDLIN( 316)			_hx_tmp2->bgColor = (_hx_tmp2->bgColor & 16777215);
HXDLIN( 316)			 ::flixel::FlxCamera _hx_tmp3 = this->camHUD;
HXDLIN( 316)			_hx_tmp3->bgColor = (_hx_tmp3->bgColor | 0);
            		}
HXLINE( 318)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE( 319)		::flixel::FlxG_obj::cameras->add(this->camHUD,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 321)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE( 323)		this->persistentUpdate = true;
HXLINE( 324)		this->persistentDraw = true;
HXLINE( 326)		if (::hx::IsNull( ::PlayState_obj::SONG )) {
HXLINE( 327)			::PlayState_obj::SONG = ::Song_obj::loadFromJson(HX_("tutorial",9e,8f,b5,82),null());
            		}
HXLINE( 329)		::Conductor_obj::mapBPMChanges(::PlayState_obj::SONG);
HXLINE( 330)		::Conductor_obj::changeBPM(( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 332)		 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN( 332)		::String _hx_tmp5 = ((((((HX_("INFORMATION ABOUT WHAT U PLAYIN WIT:\nFRAMES: ",17,b9,8d,a9) + ::Conductor_obj::safeFrames) + HX_("\nZONE: ",5c,23,60,4c)) + ::Conductor_obj::safeZoneOffset) + HX_("\nTS: ",ef,e6,c6,f9)) + ::Conductor_obj::timeScale) + HX_("\nBotPlay : ",b5,fa,9c,54));
HXDLIN( 332)		::String _hx_tmp6 = (_hx_tmp5 + ::Std_obj::string( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic))));
HXDLIN( 332)		_hx_tmp4(_hx_tmp6,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),332,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
HXLINE( 335)		::String _hx_switch_0 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
            		if (  (_hx_switch_0==HX_("bopeebo",b0,01,c5,0c)) ){
HXLINE( 340)			this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_11,4);
HXDLIN( 340)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("dad battle",f1,cd,cf,ea)) ){
HXLINE( 349)			this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_12,3);
HXDLIN( 349)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("fresh",6e,86,86,06)) ){
HXLINE( 347)			this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_13,2);
HXDLIN( 347)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("roses",04,6c,64,ed)) ){
HXLINE( 357)			::String library = null();
HXDLIN( 357)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("roses/rosesDialogue",b1,32,46,e4)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXDLIN( 357)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 355)			::String library = null();
HXDLIN( 355)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("senpai/senpaiDialogue",27,5d,40,15)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXDLIN( 355)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("thorns",9c,bf,c7,8c)) ){
HXLINE( 359)			::String library = null();
HXDLIN( 359)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("thorns/thornsDialogue",27,29,d3,ea)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXDLIN( 359)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("tutorial",9e,8f,b5,82)) ){
HXLINE( 338)			this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_14,2);
HXDLIN( 338)			goto _hx_goto_4;
            		}
            		_hx_goto_4:;
HXLINE( 362)		::String _hx_switch_1 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
            		if (  (_hx_switch_1==HX_("basement",2f,0a,ce,11)) ){
HXLINE( 367)			::PlayState_obj::curStage = HX_("basement",2f,0a,ce,11);
HXLINE( 369)			 ::flixel::FlxSprite basement =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-520,-420,null());
HXDLIN( 369)			::String library = null();
HXDLIN( 369)			 ::flixel::FlxSprite basement1 = basement->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("basement",2f,0a,ce,11)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 370)			basement1->setGraphicSize(::Std_obj::_hx_int((basement1->get_width() * ((Float)0.85))),null());
HXLINE( 371)			basement1->updateHitbox();
HXLINE( 372)			basement1->set_antialiasing(true);
HXLINE( 373)			basement1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 374)			basement1->set_active(false);
HXLINE( 375)			this->add(basement1);
HXLINE( 387)			 ::flixel::FlxSprite gapers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 387)			::String library1 = null();
HXDLIN( 387)			 ::flixel::FlxSprite gapers1 = gapers->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("gapers",10,5c,f5,52)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 388)			gapers1->setGraphicSize(::Std_obj::_hx_int((gapers1->get_width() * ((Float)0.8))),null());
HXLINE( 389)			gapers1->updateHitbox();
HXLINE( 390)			gapers1->set_antialiasing(true);
HXLINE( 391)			gapers1->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE( 392)			gapers1->set_active(false);
HXLINE( 393)			this->add(gapers1);
HXLINE( 395)			this->defaultCamZoom = ((Float)0.80);
HXLINE( 366)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("cathedral",0c,f2,38,16)) ){
HXLINE( 399)			::PlayState_obj::curStage = HX_("cathedral",0c,f2,38,16);
HXLINE( 401)			 ::flixel::FlxSprite cathedral =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-520,-230,null());
HXDLIN( 401)			::String library = null();
HXDLIN( 401)			 ::flixel::FlxSprite cathedral1 = cathedral->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("cathedral",0c,f2,38,16)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 402)			cathedral1->setGraphicSize(::Std_obj::_hx_int((cathedral1->get_width() * ((Float)0.85))),null());
HXLINE( 403)			cathedral1->updateHitbox();
HXLINE( 404)			cathedral1->set_antialiasing(true);
HXLINE( 405)			cathedral1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 406)			cathedral1->set_active(false);
HXLINE( 407)			this->add(cathedral1);
HXLINE( 409)			this->holylight =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-100,null());
HXLINE( 410)			 ::flixel::FlxSprite _hx_tmp = this->holylight;
HXDLIN( 410)			::String library1 = null();
HXDLIN( 410)			::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("holylight",02,77,2b,e0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1);
HXDLIN( 410)			_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("holylight",02,77,2b,e0)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library1)));
HXLINE( 411)			this->holylight->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("holylight",02,77,2b,e0),24,false,null(),null());
HXLINE( 412)			 ::flixel::FlxSprite _hx_tmp2 = this->holylight;
HXDLIN( 412)			_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->holylight->get_width() * ((Float)1.2))),null());
HXLINE( 413)			this->holylight->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 414)			this->holylight->set_antialiasing(true);
HXLINE( 415)			this->add(this->holylight);
HXLINE( 417)			this->defaultCamZoom = ((Float)0.80);
HXLINE( 398)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("halloween",8d,bb,38,50)) ){
HXLINE( 421)			::PlayState_obj::curStage = HX_("spooky",eb,bd,9e,c1);
HXLINE( 422)			this->halloweenLevel = true;
HXLINE( 424)			::String hallowTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("halloween_bg",77,a6,29,9b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week2",be,95,be,c7));
HXDLIN( 424)			 ::flixel::graphics::frames::FlxAtlasFrames hallowTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(hallowTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("halloween_bg",77,a6,29,9b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week2",be,95,be,c7)));
HXLINE( 426)			this->halloweenBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-100,null());
HXLINE( 427)			this->halloweenBG->set_frames(hallowTex1);
HXLINE( 428)			this->halloweenBG->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("halloweem bg0",37,fc,3c,6c),null(),null(),null(),null());
HXLINE( 429)			this->halloweenBG->animation->addByPrefix(HX_("lightning",0a,39,4a,d7),HX_("halloweem bg lightning strike",af,54,50,5b),24,false,null(),null());
HXLINE( 430)			this->halloweenBG->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 431)			this->halloweenBG->set_antialiasing(true);
HXLINE( 432)			this->add(this->halloweenBG);
HXLINE( 434)			this->isHalloween = true;
HXLINE( 420)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("limo",1f,17,b3,47)) ){
HXLINE( 484)			::PlayState_obj::curStage = HX_("limo",1f,17,b3,47);
HXLINE( 485)			this->defaultCamZoom = ((Float)0.90);
HXLINE( 487)			 ::flixel::FlxSprite skyBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-120,-50,null());
HXDLIN( 487)			 ::flixel::FlxSprite skyBG1 = skyBG->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoSunset",45,de,4f,6e)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 488)			skyBG1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 489)			this->add(skyBG1);
HXLINE( 491)			 ::flixel::FlxSprite bgLimo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,480,null());
HXLINE( 492)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/bgLimo",b4,c7,45,2c)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7));
HXDLIN( 492)			bgLimo->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/bgLimo",b4,c7,45,2c)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week4",c0,95,be,c7))));
HXLINE( 493)			bgLimo->animation->addByPrefix(HX_("drive",0a,69,bc,df),HX_("background limo pink",65,40,fe,9c),24,null(),null(),null());
HXLINE( 494)			bgLimo->animation->play(HX_("drive",0a,69,bc,df),null(),null(),null());
HXLINE( 495)			bgLimo->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 496)			this->add(bgLimo);
HXLINE( 497)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 498)				this->grpLimoDancers =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 499)				this->add(this->grpLimoDancers);
HXLINE( 501)				{
HXLINE( 502)					{
HXLINE( 503)						 ::BackgroundDancer dancer =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(130) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 504)						dancer->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 505)						this->grpLimoDancers->add(dancer).StaticCast<  ::BackgroundDancer >();
            					}
HXLINE( 502)					{
HXLINE( 503)						 ::BackgroundDancer dancer1 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(500) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 504)						dancer1->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 505)						this->grpLimoDancers->add(dancer1).StaticCast<  ::BackgroundDancer >();
            					}
HXLINE( 502)					{
HXLINE( 503)						 ::BackgroundDancer dancer2 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(870) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 504)						dancer2->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 505)						this->grpLimoDancers->add(dancer2).StaticCast<  ::BackgroundDancer >();
            					}
HXLINE( 502)					{
HXLINE( 503)						 ::BackgroundDancer dancer3 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(1240) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 504)						dancer3->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 505)						this->grpLimoDancers->add(dancer3).StaticCast<  ::BackgroundDancer >();
            					}
HXLINE( 502)					{
HXLINE( 503)						 ::BackgroundDancer dancer4 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(1610) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 504)						dancer4->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 505)						this->grpLimoDancers->add(dancer4).StaticCast<  ::BackgroundDancer >();
            					}
            				}
            			}
HXLINE( 509)			 ::flixel::FlxSprite overlayShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-600,null());
HXDLIN( 509)			 ::flixel::FlxSprite overlayShit1 = overlayShit->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoOverlay",01,f0,58,a8)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 510)			overlayShit1->set_alpha(((Float)0.5));
HXLINE( 519)			::String limoTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoDrive",3b,67,64,e6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7));
HXDLIN( 519)			 ::flixel::graphics::frames::FlxAtlasFrames limoTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(limoTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoDrive",3b,67,64,e6)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week4",c0,95,be,c7)));
HXLINE( 521)			this->limo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-120,550,null());
HXLINE( 522)			this->limo->set_frames(limoTex1);
HXLINE( 523)			this->limo->animation->addByPrefix(HX_("drive",0a,69,bc,df),HX_("Limo stage",1d,b3,df,4c),24,null(),null(),null());
HXLINE( 524)			this->limo->animation->play(HX_("drive",0a,69,bc,df),null(),null(),null());
HXLINE( 525)			this->limo->set_antialiasing(true);
HXLINE( 527)			 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,160,null());
HXDLIN( 527)			this->fastCar = _hx_tmp1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/fastCarLol",c1,b0,ed,94)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 483)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("mall",d4,3a,56,48)) ){
HXLINE( 532)			::PlayState_obj::curStage = HX_("mall",d4,3a,56,48);
HXLINE( 534)			this->defaultCamZoom = ((Float)0.80);
HXLINE( 536)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-1000,-500,null());
HXDLIN( 536)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bgWalls",57,9f,1b,51)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 537)			bg1->set_antialiasing(true);
HXLINE( 538)			bg1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 539)			bg1->set_active(false);
HXLINE( 540)			bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)0.8))),null());
HXLINE( 541)			bg1->updateHitbox();
HXLINE( 542)			this->add(bg1);
HXLINE( 544)			this->upperBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-240,-90,null());
HXLINE( 545)			 ::flixel::FlxSprite _hx_tmp = this->upperBoppers;
HXDLIN( 545)			::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/upperBop",2e,2f,6d,ac)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 545)			_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/upperBop",2e,2f,6d,ac)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 546)			this->upperBoppers->animation->addByPrefix(HX_("bop",03,be,4a,00),HX_("Upper Crowd Bob",a4,72,cf,77),24,false,null(),null());
HXLINE( 547)			this->upperBoppers->set_antialiasing(true);
HXLINE( 548)			this->upperBoppers->scrollFactor->set(((Float)0.33),((Float)0.33));
HXLINE( 549)			 ::flixel::FlxSprite _hx_tmp2 = this->upperBoppers;
HXDLIN( 549)			_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->upperBoppers->get_width() * ((Float)0.85))),null());
HXLINE( 550)			this->upperBoppers->updateHitbox();
HXLINE( 551)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 552)				this->add(this->upperBoppers);
            			}
HXLINE( 556)			 ::flixel::FlxSprite bgEscalator =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-1100,-600,null());
HXDLIN( 556)			 ::flixel::FlxSprite bgEscalator1 = bgEscalator->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bgEscalator",64,1f,c0,d5)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 557)			bgEscalator1->set_antialiasing(true);
HXLINE( 558)			bgEscalator1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 559)			bgEscalator1->set_active(false);
HXLINE( 560)			bgEscalator1->setGraphicSize(::Std_obj::_hx_int((bgEscalator1->get_width() * ((Float)0.9))),null());
HXLINE( 561)			bgEscalator1->updateHitbox();
HXLINE( 562)			this->add(bgEscalator1);
HXLINE( 564)			 ::flixel::FlxSprite tree =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,370,-250,null());
HXDLIN( 564)			 ::flixel::FlxSprite tree1 = tree->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/christmasTree",73,57,6d,7b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 565)			tree1->set_antialiasing(true);
HXLINE( 566)			tree1->scrollFactor->set(((Float)0.40),((Float)0.40));
HXLINE( 567)			this->add(tree1);
HXLINE( 569)			this->bottomBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,140,null());
HXLINE( 570)			 ::flixel::FlxSprite _hx_tmp3 = this->bottomBoppers;
HXDLIN( 570)			::String _hx_tmp4 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bottomBop",cb,69,c5,59)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 570)			_hx_tmp3->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp4,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bottomBop",cb,69,c5,59)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 571)			this->bottomBoppers->animation->addByPrefix(HX_("bop",03,be,4a,00),HX_("Bottom Level Boppers",c8,41,25,54),24,false,null(),null());
HXLINE( 572)			this->bottomBoppers->set_antialiasing(true);
HXLINE( 573)			this->bottomBoppers->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 574)			 ::flixel::FlxSprite _hx_tmp5 = this->bottomBoppers;
HXDLIN( 574)			_hx_tmp5->setGraphicSize(::Std_obj::_hx_int(this->bottomBoppers->get_width()),null());
HXLINE( 575)			this->bottomBoppers->updateHitbox();
HXLINE( 576)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 577)				this->add(this->bottomBoppers);
            			}
HXLINE( 581)			 ::flixel::FlxSprite fgSnow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,700,null());
HXDLIN( 581)			 ::flixel::FlxSprite fgSnow1 = fgSnow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/fgSnow",91,40,e7,37)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 582)			fgSnow1->set_active(false);
HXLINE( 583)			fgSnow1->set_antialiasing(true);
HXLINE( 584)			this->add(fgSnow1);
HXLINE( 586)			this->santa =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-840,150,null());
HXLINE( 587)			 ::flixel::FlxSprite _hx_tmp6 = this->santa;
HXDLIN( 587)			::String _hx_tmp7 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/santa",00,86,f4,2d)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 587)			_hx_tmp6->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp7,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/santa",00,86,f4,2d)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 588)			this->santa->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("santa idle in fear",72,07,31,fd),24,false,null(),null());
HXLINE( 589)			this->santa->set_antialiasing(true);
HXLINE( 590)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 591)				this->add(this->santa);
            			}
HXLINE( 531)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 596)			::PlayState_obj::curStage = HX_("mallEvil",88,d3,e3,a7);
HXLINE( 597)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-400,-500,null());
HXDLIN( 597)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/evilBG",86,9d,17,83)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 598)			bg1->set_antialiasing(true);
HXLINE( 599)			bg1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 600)			bg1->set_active(false);
HXLINE( 601)			bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)0.8))),null());
HXLINE( 602)			bg1->updateHitbox();
HXLINE( 603)			this->add(bg1);
HXLINE( 605)			 ::flixel::FlxSprite evilTree =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,300,-300,null());
HXDLIN( 605)			 ::flixel::FlxSprite evilTree1 = evilTree->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/evilTree",7f,5b,65,3a)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 606)			evilTree1->set_antialiasing(true);
HXLINE( 607)			evilTree1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 608)			this->add(evilTree1);
HXLINE( 610)			 ::flixel::FlxSprite evilSnow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,700,null());
HXDLIN( 610)			 ::flixel::FlxSprite evilSnow1 = evilSnow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/evilSnow",a4,24,b9,39)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 611)			evilSnow1->set_antialiasing(true);
HXLINE( 612)			this->add(evilSnow1);
HXLINE( 595)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("philly",28,77,5e,ef)) ){
HXLINE( 438)			::PlayState_obj::curStage = HX_("philly",28,77,5e,ef);
HXLINE( 440)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 440)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/sky",3a,d3,d5,cc)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 441)			bg1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 442)			this->add(bg1);
HXLINE( 444)			 ::flixel::FlxSprite city =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-10,null(),null());
HXDLIN( 444)			 ::flixel::FlxSprite city1 = city->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/city",32,0d,ae,63)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 445)			city1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 446)			city1->setGraphicSize(::Std_obj::_hx_int((city1->get_width() * ((Float)0.85))),null());
HXLINE( 447)			city1->updateHitbox();
HXLINE( 448)			this->add(city1);
HXLINE( 450)			this->phillyCityLights =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 451)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 452)				this->add(this->phillyCityLights);
            			}
HXLINE( 455)			{
HXLINE( 456)				{
HXLINE( 457)					 ::flixel::FlxSprite light =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 457)					 ::flixel::FlxSprite light1 = light->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 458)					light1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 459)					light1->set_visible(false);
HXLINE( 460)					light1->setGraphicSize(::Std_obj::_hx_int((light1->get_width() * ((Float)0.85))),null());
HXLINE( 461)					light1->updateHitbox();
HXLINE( 462)					light1->set_antialiasing(true);
HXLINE( 463)					this->phillyCityLights->add(light1).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 456)				{
HXLINE( 457)					 ::flixel::FlxSprite light2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 457)					 ::flixel::FlxSprite light3 = light2->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 458)					light3->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 459)					light3->set_visible(false);
HXLINE( 460)					light3->setGraphicSize(::Std_obj::_hx_int((light3->get_width() * ((Float)0.85))),null());
HXLINE( 461)					light3->updateHitbox();
HXLINE( 462)					light3->set_antialiasing(true);
HXLINE( 463)					this->phillyCityLights->add(light3).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 456)				{
HXLINE( 457)					 ::flixel::FlxSprite light4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 457)					 ::flixel::FlxSprite light5 = light4->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 458)					light5->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 459)					light5->set_visible(false);
HXLINE( 460)					light5->setGraphicSize(::Std_obj::_hx_int((light5->get_width() * ((Float)0.85))),null());
HXLINE( 461)					light5->updateHitbox();
HXLINE( 462)					light5->set_antialiasing(true);
HXLINE( 463)					this->phillyCityLights->add(light5).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 456)				{
HXLINE( 457)					 ::flixel::FlxSprite light6 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 457)					 ::flixel::FlxSprite light7 = light6->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 3)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 458)					light7->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 459)					light7->set_visible(false);
HXLINE( 460)					light7->setGraphicSize(::Std_obj::_hx_int((light7->get_width() * ((Float)0.85))),null());
HXLINE( 461)					light7->updateHitbox();
HXLINE( 462)					light7->set_antialiasing(true);
HXLINE( 463)					this->phillyCityLights->add(light7).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 456)				{
HXLINE( 457)					 ::flixel::FlxSprite light8 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 457)					 ::flixel::FlxSprite light9 = light8->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 458)					light9->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 459)					light9->set_visible(false);
HXLINE( 460)					light9->setGraphicSize(::Std_obj::_hx_int((light9->get_width() * ((Float)0.85))),null());
HXLINE( 461)					light9->updateHitbox();
HXLINE( 462)					light9->set_antialiasing(true);
HXLINE( 463)					this->phillyCityLights->add(light9).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
HXLINE( 466)			 ::flixel::FlxSprite streetBehind =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,50,null());
HXDLIN( 466)			 ::flixel::FlxSprite streetBehind1 = streetBehind->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/behindTrain",07,a4,6d,d4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 467)			this->add(streetBehind1);
HXLINE( 469)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,2000,360,null());
HXDLIN( 469)			this->phillyTrain = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/train",61,ce,51,a4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 470)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 471)				this->add(this->phillyTrain);
            			}
HXLINE( 474)			 ::flixel::_hx_system::FlxSound _hx_tmp1 =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 474)			this->trainSound = _hx_tmp1->loadEmbedded(::Paths_obj::sound(HX_("train_passes",56,da,5a,7f),HX_("week3",bf,95,be,c7)),null(),null(),null());
HXLINE( 475)			::flixel::FlxG_obj::sound->list->add(this->trainSound).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 479)			 ::flixel::FlxSprite street =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,streetBehind1->y,null());
HXDLIN( 479)			 ::flixel::FlxSprite street1 = street->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/street",4a,23,ee,ee)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 480)			this->add(street1);
HXLINE( 437)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("school",74,b8,c8,40)) ){
HXLINE( 616)			::PlayState_obj::curStage = HX_("school",74,b8,c8,40);
HXLINE( 620)			 ::flixel::FlxSprite bgSky =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 620)			 ::flixel::FlxSprite bgSky1 = bgSky->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebSky",52,34,cf,a4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 621)			bgSky1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 622)			this->add(bgSky1);
HXLINE( 624)			int repositionShit = -200;
HXLINE( 626)			 ::flixel::FlxSprite bgSchool =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,0,null());
HXDLIN( 626)			 ::flixel::FlxSprite bgSchool1 = bgSchool->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebSchool",a3,21,c0,f5)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 627)			bgSchool1->scrollFactor->set(((Float)0.6),((Float)0.90));
HXLINE( 628)			this->add(bgSchool1);
HXLINE( 630)			 ::flixel::FlxSprite bgStreet =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,null(),null());
HXDLIN( 630)			 ::flixel::FlxSprite bgStreet1 = bgStreet->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebStreet",32,81,24,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 631)			bgStreet1->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 632)			this->add(bgStreet1);
HXLINE( 634)			 ::flixel::FlxSprite fgTrees =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(repositionShit + 170),130,null());
HXDLIN( 634)			 ::flixel::FlxSprite fgTrees1 = fgTrees->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTreesBack",4d,ac,bd,40)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 635)			fgTrees1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 636)			this->add(fgTrees1);
HXLINE( 638)			 ::flixel::FlxSprite bgTrees =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(repositionShit - 380),-800,null());
HXLINE( 639)			::String treetex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTrees",06,ab,3a,76)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 639)			 ::flixel::graphics::frames::FlxAtlasFrames treetex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(treetex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTrees",06,ab,3a,76)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7)));
HXLINE( 640)			bgTrees->set_frames(treetex1);
HXLINE( 641)			bgTrees->animation->add(HX_("treeLoop",e2,72,7f,2b),::Array_obj< int >::fromData( _hx_array_data_46c2835d_15,19),12,null(),null(),null());
HXLINE( 642)			bgTrees->animation->play(HX_("treeLoop",e2,72,7f,2b),null(),null(),null());
HXLINE( 643)			bgTrees->scrollFactor->set(((Float)0.85),((Float)0.85));
HXLINE( 644)			this->add(bgTrees);
HXLINE( 646)			 ::flixel::FlxSprite treeLeaves =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,-40,null());
HXLINE( 647)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/petals",8d,ca,2b,c2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 647)			treeLeaves->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/petals",8d,ca,2b,c2)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7))));
HXLINE( 648)			treeLeaves->animation->addByPrefix(HX_("leaves",9c,23,7b,96),HX_("PETALS ALL",0a,57,91,88),24,true,null(),null());
HXLINE( 649)			treeLeaves->animation->play(HX_("leaves",9c,23,7b,96),null(),null(),null());
HXLINE( 650)			treeLeaves->scrollFactor->set(((Float)0.85),((Float)0.85));
HXLINE( 651)			this->add(treeLeaves);
HXLINE( 653)			int widShit = ::Std_obj::_hx_int((bgSky1->get_width() * ( (Float)(6) )));
HXLINE( 655)			bgSky1->setGraphicSize(widShit,null());
HXLINE( 656)			bgSchool1->setGraphicSize(widShit,null());
HXLINE( 657)			bgStreet1->setGraphicSize(widShit,null());
HXLINE( 658)			bgTrees->setGraphicSize(::Std_obj::_hx_int((( (Float)(widShit) ) * ((Float)1.4))),null());
HXLINE( 659)			fgTrees1->setGraphicSize(::Std_obj::_hx_int((( (Float)(widShit) ) * ((Float)0.8))),null());
HXLINE( 660)			treeLeaves->setGraphicSize(widShit,null());
HXLINE( 662)			fgTrees1->updateHitbox();
HXLINE( 663)			bgSky1->updateHitbox();
HXLINE( 664)			bgSchool1->updateHitbox();
HXLINE( 665)			bgStreet1->updateHitbox();
HXLINE( 666)			bgTrees->updateHitbox();
HXLINE( 667)			treeLeaves->updateHitbox();
HXLINE( 669)			this->bgGirls =  ::BackgroundGirls_obj::__alloc( HX_CTX ,( (Float)(-100) ),( (Float)(190) ));
HXLINE( 670)			this->bgGirls->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 672)			if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("roses",04,6c,64,ed))) {
HXLINE( 674)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 675)					this->bgGirls->getScared();
            				}
            			}
HXLINE( 679)			 ::BackgroundGirls _hx_tmp1 = this->bgGirls;
HXDLIN( 679)			Float _hx_tmp2 = this->bgGirls->get_width();
HXDLIN( 679)			_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((_hx_tmp2 * ::PlayState_obj::daPixelZoom)),null());
HXLINE( 680)			this->bgGirls->updateHitbox();
HXLINE( 681)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 682)				this->add(this->bgGirls);
            			}
HXLINE( 615)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 687)			::PlayState_obj::curStage = HX_("schoolEvil",28,a1,f5,f7);
HXLINE( 689)			 ::flixel::addons::effects::chainable::FlxWaveEffect waveEffectBG =  ::flixel::addons::effects::chainable::FlxWaveEffect_obj::__alloc( HX_CTX ,::flixel::addons::effects::chainable::FlxWaveMode_obj::ALL_dyn(),2,-1,3,2,null(),null());
HXLINE( 690)			 ::flixel::addons::effects::chainable::FlxWaveEffect waveEffectFG =  ::flixel::addons::effects::chainable::FlxWaveEffect_obj::__alloc( HX_CTX ,::flixel::addons::effects::chainable::FlxWaveMode_obj::ALL_dyn(),2,-1,5,2,null(),null());
HXLINE( 692)			int posX = 400;
HXLINE( 693)			int posY = 200;
HXLINE( 695)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,posX,posY,null());
HXLINE( 696)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/animatedEvilSchool",8f,dd,53,cd)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 696)			bg->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/animatedEvilSchool",8f,dd,53,cd)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7))));
HXLINE( 697)			bg->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("background 2",80,07,9d,17),24,null(),null(),null());
HXLINE( 698)			bg->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 699)			bg->scrollFactor->set(((Float)0.8),((Float)0.9));
HXLINE( 700)			bg->scale->set(6,6);
HXLINE( 701)			this->add(bg);
HXLINE( 686)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("stage",be,6a,0b,84)) ){
HXLINE( 743)			this->defaultCamZoom = ((Float)0.9);
HXLINE( 744)			::PlayState_obj::curStage = HX_("stage",be,6a,0b,84);
HXLINE( 745)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-200,null());
HXDLIN( 745)			::String library = null();
HXDLIN( 745)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stageback",e5,7b,3b,06)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 746)			bg1->set_antialiasing(true);
HXLINE( 747)			bg1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 748)			bg1->set_active(false);
HXLINE( 749)			this->add(bg1);
HXLINE( 751)			 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 751)			::String library1 = null();
HXDLIN( 751)			 ::flixel::FlxSprite stageFront1 = stageFront->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagefront",2b,fd,b0,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 752)			stageFront1->setGraphicSize(::Std_obj::_hx_int((stageFront1->get_width() * ((Float)1.1))),null());
HXLINE( 753)			stageFront1->updateHitbox();
HXLINE( 754)			stageFront1->set_antialiasing(true);
HXLINE( 755)			stageFront1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 756)			stageFront1->set_active(false);
HXLINE( 757)			this->add(stageFront1);
HXLINE( 759)			 ::flixel::FlxSprite stageCurtains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN( 759)			::String library2 = null();
HXDLIN( 759)			 ::flixel::FlxSprite stageCurtains1 = stageCurtains->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagecurtains",df,ec,1a,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE( 760)			stageCurtains1->setGraphicSize(::Std_obj::_hx_int((stageCurtains1->get_width() * ((Float)0.9))),null());
HXLINE( 761)			stageCurtains1->updateHitbox();
HXLINE( 762)			stageCurtains1->set_antialiasing(true);
HXLINE( 763)			stageCurtains1->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE( 764)			stageCurtains1->set_active(false);
HXLINE( 766)			this->add(stageCurtains1);
HXLINE( 742)			goto _hx_goto_5;
            		}
            		/* default */{
HXLINE( 770)			this->defaultCamZoom = ((Float)0.9);
HXLINE( 771)			::PlayState_obj::curStage = HX_("stage",be,6a,0b,84);
HXLINE( 772)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-200,null());
HXDLIN( 772)			::String library = null();
HXDLIN( 772)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stageback",e5,7b,3b,06)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 773)			bg1->set_antialiasing(true);
HXLINE( 774)			bg1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 775)			bg1->set_active(false);
HXLINE( 776)			this->add(bg1);
HXLINE( 778)			 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 778)			::String library1 = null();
HXDLIN( 778)			 ::flixel::FlxSprite stageFront1 = stageFront->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagefront",2b,fd,b0,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 779)			stageFront1->setGraphicSize(::Std_obj::_hx_int((stageFront1->get_width() * ((Float)1.1))),null());
HXLINE( 780)			stageFront1->updateHitbox();
HXLINE( 781)			stageFront1->set_antialiasing(true);
HXLINE( 782)			stageFront1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 783)			stageFront1->set_active(false);
HXLINE( 784)			this->add(stageFront1);
HXLINE( 786)			 ::flixel::FlxSprite stageCurtains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN( 786)			::String library2 = null();
HXDLIN( 786)			 ::flixel::FlxSprite stageCurtains1 = stageCurtains->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagecurtains",df,ec,1a,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE( 787)			stageCurtains1->setGraphicSize(::Std_obj::_hx_int((stageCurtains1->get_width() * ((Float)0.9))),null());
HXLINE( 788)			stageCurtains1->updateHitbox();
HXLINE( 789)			stageCurtains1->set_antialiasing(true);
HXLINE( 790)			stageCurtains1->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE( 791)			stageCurtains1->set_active(false);
HXLINE( 793)			this->add(stageCurtains1);
            		}
            		_hx_goto_5:;
HXLINE( 796)		::String gfVersion = HX_("gf",1f,5a,00,00);
HXLINE( 798)		::String _hx_switch_2 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
            		if (  (_hx_switch_2==HX_("gf-car",a6,63,ab,07)) ){
HXLINE( 801)			gfVersion = HX_("gf-car",a6,63,ab,07);
HXDLIN( 801)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_2==HX_("gf-christmas",94,26,b1,6d)) ){
HXLINE( 803)			gfVersion = HX_("gf-christmas",94,26,b1,6d);
HXDLIN( 803)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_2==HX_("gf-pixel",98,3e,8c,55)) ){
HXLINE( 805)			gfVersion = HX_("gf-pixel",98,3e,8c,55);
HXDLIN( 805)			goto _hx_goto_6;
            		}
            		/* default */{
HXLINE( 807)			gfVersion = HX_("gf",1f,5a,00,00);
            		}
            		_hx_goto_6:;
HXLINE( 810)		::PlayState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),gfVersion,null());
HXLINE( 811)		::PlayState_obj::gf->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 813)		::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 815)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("innocence-glitched",b9,cf,a8,6b))) {
HXLINE( 817)			::String daStrangePath = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("characters/isaacshifting",14,7d,a4,d0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d));
HXDLIN( 817)			 ::flixel::graphics::frames::FlxAtlasFrames daStrangePath1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(daStrangePath,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("characters/isaacshifting",14,7d,a4,d0)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("shared",a5,5e,2b,1d)));
HXLINE( 818)			this->isaakPreload =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE( 819)			this->isaakPreload->set_frames(daStrangePath1);
HXLINE( 820)			this->isaakPreload->set_visible(false);
HXLINE( 821)			this->isaakPreload->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("ShiftingIdle",f4,cc,64,09),24,null(),null(),null());
HXLINE( 822)			this->isaakPreload->animation->addByPrefix(HX_("singUP",6a,52,21,b9),HX_("ShiftingUp",3b,54,f2,30),24,null(),null(),null());
HXLINE( 823)			this->isaakPreload->animation->addByPrefix(HX_("singRIGHT",0d,6f,70,ac),HX_("ShiftingRight",fc,09,b4,60),24,null(),null(),null());
HXLINE( 824)			this->isaakPreload->animation->addByPrefix(HX_("singDOWN",31,2a,ad,36),HX_("ShiftingDown",42,1e,1f,06),24,null(),null(),null());
HXLINE( 825)			this->isaakPreload->animation->addByPrefix(HX_("singLEFT",d6,39,ef,3b),HX_("ShiftingLeft",e7,2d,61,0b),24,null(),null(),null());
HXLINE( 826)			this->isaakPreload->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 827)			this->add(this->isaakPreload);
            		}
HXLINE( 830)		Float camPos = ::PlayState_obj::dad->getGraphicMidpoint(null())->x;
HXDLIN( 830)		 ::flixel::math::FlxPoint camPos1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,camPos,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 832)		::String _hx_switch_3 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
            		if (  (_hx_switch_3==HX_("dad",47,36,4c,00)) ){
HXLINE( 850)			camPos1->set_x((camPos1->x + 400));
HXDLIN( 850)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("funkyisaac",0c,77,b5,1d)) ){
HXLINE( 869)			 ::Character fh = ::PlayState_obj::dad;
HXDLIN( 869)			fh->set_y((fh->y + 380));
HXLINE( 868)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("gf",1f,5a,00,00)) ){
HXLINE( 835)			::PlayState_obj::dad->setPosition(::PlayState_obj::gf->x,::PlayState_obj::gf->y);
HXLINE( 836)			::PlayState_obj::gf->set_visible(false);
HXLINE( 837)			if (::PlayState_obj::isStoryMode) {
HXLINE( 839)				camPos1->set_x((camPos1->x + 600));
HXLINE( 840)				this->tweenCamIn();
            			}
HXLINE( 834)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("isaacangel",48,89,f3,c6)) ){
HXLINE( 873)			 ::Character fh = ::PlayState_obj::dad;
HXDLIN( 873)			fh->set_y((fh->y + 100));
HXLINE( 874)			 ::Character fh1 = ::PlayState_obj::dad;
HXDLIN( 874)			fh1->set_x((fh1->x - ( (Float)(260) )));
HXLINE( 872)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("isaacshifting",79,c0,81,02)) ){
HXLINE( 871)			 ::Character fh = ::PlayState_obj::dad;
HXDLIN( 871)			fh->set_y((fh->y + 380));
HXLINE( 870)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("monster",1a,54,b0,b8)) ){
HXLINE( 846)			 ::Character fh = ::PlayState_obj::dad;
HXDLIN( 846)			fh->set_y((fh->y + 100));
HXLINE( 845)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 848)			 ::Character fh = ::PlayState_obj::dad;
HXDLIN( 848)			fh->set_y((fh->y + 130));
HXLINE( 847)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("parents-christmas",fe,94,c5,32)) ){
HXLINE( 855)			 ::Character fh = ::PlayState_obj::dad;
HXDLIN( 855)			fh->set_x((fh->x - ( (Float)(500) )));
HXLINE( 854)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 852)			camPos1->set_x((camPos1->x + 600));
HXLINE( 853)			 ::Character fh = ::PlayState_obj::dad;
HXDLIN( 853)			fh->set_y((fh->y + 300));
HXLINE( 851)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 857)			 ::Character fh = ::PlayState_obj::dad;
HXDLIN( 857)			fh->set_x((fh->x + 150));
HXLINE( 858)			 ::Character fh1 = ::PlayState_obj::dad;
HXDLIN( 858)			fh1->set_y((fh1->y + 360));
HXLINE( 859)			Float _hx_tmp = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 859)			camPos1->set(_hx_tmp,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 856)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 861)			 ::Character fh = ::PlayState_obj::dad;
HXDLIN( 861)			fh->set_x((fh->x + 150));
HXLINE( 862)			 ::Character fh1 = ::PlayState_obj::dad;
HXDLIN( 862)			fh1->set_y((fh1->y + 360));
HXLINE( 863)			Float _hx_tmp = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 863)			camPos1->set(_hx_tmp,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 860)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("spirit",31,bb,a9,bd)) ){
HXLINE( 865)			 ::Character fh = ::PlayState_obj::dad;
HXDLIN( 865)			fh->set_x((fh->x - ( (Float)(150) )));
HXLINE( 866)			 ::Character fh1 = ::PlayState_obj::dad;
HXDLIN( 866)			fh1->set_y((fh1->y + 100));
HXLINE( 867)			Float _hx_tmp = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 867)			camPos1->set(_hx_tmp,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 864)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE( 844)			 ::Character fh = ::PlayState_obj::dad;
HXDLIN( 844)			fh->set_y((fh->y + 200));
HXLINE( 843)			goto _hx_goto_7;
            		}
            		_hx_goto_7:;
HXLINE( 879)		::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 882)		::String _hx_switch_4 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_4==HX_("limo",1f,17,b3,47)) ){
HXLINE( 885)			 ::Boyfriend fh = ::PlayState_obj::boyfriend;
HXDLIN( 885)			fh->set_y((fh->y - ( (Float)(220) )));
HXLINE( 886)			 ::Boyfriend fh1 = ::PlayState_obj::boyfriend;
HXDLIN( 886)			fh1->set_x((fh1->x + 260));
HXLINE( 887)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 888)				this->resetFastCar();
HXLINE( 889)				this->add(this->fastCar);
            			}
HXLINE( 884)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("mall",d4,3a,56,48)) ){
HXLINE( 893)			 ::Boyfriend fh = ::PlayState_obj::boyfriend;
HXDLIN( 893)			fh->set_x((fh->x + 200));
HXLINE( 892)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 896)			 ::Boyfriend fh = ::PlayState_obj::boyfriend;
HXDLIN( 896)			fh->set_x((fh->x + 320));
HXLINE( 897)			 ::Character fh1 = ::PlayState_obj::dad;
HXDLIN( 897)			fh1->set_y((fh1->y - ( (Float)(80) )));
HXLINE( 895)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("school",74,b8,c8,40)) ){
HXLINE( 899)			 ::Boyfriend fh = ::PlayState_obj::boyfriend;
HXDLIN( 899)			fh->set_x((fh->x + 200));
HXLINE( 900)			 ::Boyfriend fh1 = ::PlayState_obj::boyfriend;
HXDLIN( 900)			fh1->set_y((fh1->y + 220));
HXLINE( 901)			 ::Character fh2 = ::PlayState_obj::gf;
HXDLIN( 901)			fh2->set_x((fh2->x + 180));
HXLINE( 902)			 ::Character fh3 = ::PlayState_obj::gf;
HXDLIN( 902)			fh3->set_y((fh3->y + 300));
HXLINE( 898)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 904)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 906)				 ::flixel::addons::effects::FlxTrail evilTrail =  ::flixel::addons::effects::FlxTrail_obj::__alloc( HX_CTX ,::PlayState_obj::dad,null(),4,24,((Float)0.3),((Float)0.069));
HXLINE( 909)				this->add(evilTrail);
            			}
HXLINE( 914)			 ::Boyfriend fh = ::PlayState_obj::boyfriend;
HXDLIN( 914)			fh->set_x((fh->x + 200));
HXLINE( 915)			 ::Boyfriend fh1 = ::PlayState_obj::boyfriend;
HXDLIN( 915)			fh1->set_y((fh1->y + 220));
HXLINE( 916)			 ::Character fh2 = ::PlayState_obj::gf;
HXDLIN( 916)			fh2->set_x((fh2->x + 180));
HXLINE( 917)			 ::Character fh3 = ::PlayState_obj::gf;
HXDLIN( 917)			fh3->set_y((fh3->y + 300));
HXLINE( 903)			goto _hx_goto_8;
            		}
            		_hx_goto_8:;
HXLINE( 920)		this->add(::PlayState_obj::gf);
HXLINE( 923)		if ((::PlayState_obj::curStage == HX_("limo",1f,17,b3,47))) {
HXLINE( 924)			this->add(this->limo);
            		}
HXLINE( 926)		this->add(::PlayState_obj::dad);
HXLINE( 927)		this->add(::PlayState_obj::boyfriend);
HXLINE( 928)		if (::PlayState_obj::loadRep) {
HXLINE( 933)			::flixel::FlxG_obj::save->data->__SetField(HX_("botplay",7b,fb,a9,61),true,::hx::paccDynamic);
HXLINE( 934)			::flixel::FlxG_obj::save->data->__SetField(HX_("scrollSpeed",3a,e0,46,cb),::PlayState_obj::rep->replay->__Field(HX_("noteSpeed",35,e2,f6,be),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 935)			::flixel::FlxG_obj::save->data->__SetField(HX_("downscroll",ef,45,d4,4f),::PlayState_obj::rep->replay->__Field(HX_("isDownscroll",79,6e,f3,21),::hx::paccDynamic),::hx::paccDynamic);
            		}
HXLINE( 939)		 ::DialogueBox doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,this->dialogue);
HXLINE( 942)		doof->scrollFactor->set(null(),null());
HXLINE( 943)		doof->finishThing = this->startCountdown_dyn();
HXLINE( 945)		::Conductor_obj::songPosition = ( (Float)(-5000) );
HXLINE( 947)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 948)		this->strumLine->scrollFactor->set(null(),null());
HXLINE( 950)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE( 951)			this->strumLine->set_y(( (Float)((::flixel::FlxG_obj::height - 165)) ));
            		}
HXLINE( 953)		::PlayState_obj::strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 954)		this->add(::PlayState_obj::strumLineNotes);
HXLINE( 956)		::PlayState_obj::playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 957)		::PlayState_obj::cpuStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 961)		this->generateSong(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 965)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 967)		this->camFollow->setPosition(camPos1->x,camPos1->y);
HXLINE( 969)		if (::hx::IsNotNull( ::PlayState_obj::prevCamFollow )) {
HXLINE( 971)			this->camFollow = ::PlayState_obj::prevCamFollow;
HXLINE( 972)			::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 975)		this->add(this->camFollow);
HXLINE( 977)		 ::flixel::FlxCamera _hx_tmp7 = ::flixel::FlxG_obj::camera;
HXDLIN( 977)		 ::flixel::FlxObject _hx_tmp8 = this->camFollow;
HXDLIN( 977)		_hx_tmp7->follow(_hx_tmp8,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),(((Float)0.04) * (( (Float)(30) ) / ::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->getFPS())));
HXLINE( 979)		::flixel::FlxG_obj::camera->set_zoom(this->defaultCamZoom);
HXLINE( 980)		{
HXLINE( 980)			 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN( 980)			 ::flixel::math::FlxPoint point = this->camFollow->getPosition(null());
HXDLIN( 980)			_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN( 980)			if (point->_weak) {
HXLINE( 980)				point->put();
            			}
            		}
HXLINE( 982)		{
HXLINE( 982)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 982)			_this1->x = ( (Float)(0) );
HXDLIN( 982)			_this1->y = ( (Float)(0) );
HXDLIN( 982)			_this1->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN( 982)			_this1->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE( 984)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE( 986)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE( 988)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,10,null());
HXDLIN( 988)			::String library = null();
HXDLIN( 988)			::PlayState_obj::songPosBG = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 989)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE( 990)				::PlayState_obj::songPosBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            			}
HXLINE( 991)			::PlayState_obj::songPosBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 992)			::PlayState_obj::songPosBG->scrollFactor->set(null(),null());
HXLINE( 993)			this->add(::PlayState_obj::songPosBG);
HXLINE( 995)			Float _hx_tmp1 = (::PlayState_obj::songPosBG->x + 4);
HXDLIN( 995)			Float _hx_tmp2 = (::PlayState_obj::songPosBG->y + 4);
HXDLIN( 995)			int _hx_tmp3 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(8) )));
HXDLIN( 995)			::PlayState_obj::songPosBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp3,::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("songPositionBar",d5,62,6e,a6),0,90000,null());
HXLINE( 997)			::PlayState_obj::songPosBar->scrollFactor->set(null(),null());
HXLINE( 998)			::PlayState_obj::songPosBar->createFilledBar(-8355712,-16711936,null(),null());
HXLINE( 999)			this->add(::PlayState_obj::songPosBar);
HXLINE(1001)			Float songName = ::PlayState_obj::songPosBG->x;
HXDLIN(1001)			Float songName1 = ((songName + (::PlayState_obj::songPosBG->get_width() / ( (Float)(2) ))) - ( (Float)(20) ));
HXDLIN(1001)			 ::flixel::text::FlxText songName2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,songName1,::PlayState_obj::songPosBG->y,0,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),16,null());
HXLINE(1002)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1003)				songName2->set_y((songName2->y - ( (Float)(3) )));
            			}
HXLINE(1004)			songName2->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1005)			songName2->scrollFactor->set(null(),null());
HXLINE(1006)			this->add(songName2);
HXLINE(1007)			songName2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1010)		 ::flixel::FlxSprite _hx_tmp9 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)),null());
HXDLIN(1010)		::String library1 = null();
HXDLIN(1010)		this->healthBarBG = _hx_tmp9->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(1011)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1012)			this->healthBarBG->set_y(( (Float)(50) ));
            		}
HXLINE(1013)		this->healthBarBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(1014)		this->healthBarBG->scrollFactor->set(null(),null());
HXLINE(1015)		this->add(this->healthBarBG);
HXLINE(1017)		Float _hx_tmp10 = (this->healthBarBG->x + 4);
HXDLIN(1017)		Float _hx_tmp11 = (this->healthBarBG->y + 4);
HXDLIN(1017)		int _hx_tmp12 = ::Std_obj::_hx_int((this->healthBarBG->get_width() - ( (Float)(8) )));
HXDLIN(1017)		this->healthBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp10,_hx_tmp11,::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn(),_hx_tmp12,::Std_obj::_hx_int((this->healthBarBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("health",9c,28,06,fd),0,2,null());
HXLINE(1019)		this->healthBar->scrollFactor->set(null(),null());
HXLINE(1020)		this->healthBar->createFilledBar(-65536,-10027213,null(),null());
HXLINE(1022)		this->add(this->healthBar);
HXLINE(1025)		 ::flixel::FlxSprite _hx_tmp13 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,860,690,null());
HXDLIN(1025)		this->unknown = _hx_tmp13->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("unknown",8a,23,7b,e1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(1026)		 ::flixel::FlxSprite _hx_tmp14 = this->unknown;
HXDLIN(1026)		_hx_tmp14->setGraphicSize(::Std_obj::_hx_int((this->unknown->get_width() * ((Float)0.5))),null());
HXLINE(1027)		this->unknown->updateHitbox();
HXLINE(1028)		this->unknown->set_antialiasing(true);
HXLINE(1029)		this->unknown->scrollFactor->set(null(),null());
HXLINE(1030)		this->unknown->set_visible(false);
HXLINE(1031)		this->add(this->unknown);
HXLINE(1034)		::String _hx_tmp15;
HXDLIN(1034)		if ((::PlayState_obj::storyDifficulty == 2)) {
HXLINE(1034)			_hx_tmp15 = HX_("Hard",0b,5b,e1,2f);
            		}
            		else {
HXLINE(1034)			if ((::PlayState_obj::storyDifficulty == 1)) {
HXLINE(1034)				_hx_tmp15 = HX_("Normal",47,e6,fd,64);
            			}
            			else {
HXLINE(1034)				_hx_tmp15 = HX_("Easy",22,b8,e5,2d);
            			}
            		}
HXDLIN(1034)		::String _hx_tmp16;
HXDLIN(1034)		if (::Main_obj::watermarks) {
HXLINE(1034)			_hx_tmp16 = (HX_(" - KE ",b3,9f,d3,c9) + ::MainMenuState_obj::kadeEngineVer);
            		}
            		else {
HXLINE(1034)			_hx_tmp16 = HX_("",00,00,00,00);
            		}
HXDLIN(1034)		this->kadeEngineWatermark =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,4,(this->healthBarBG->y + 50),0,( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" ",20,00,00,00)) + _hx_tmp15) + _hx_tmp16)) ),16,null());
HXLINE(1035)		this->kadeEngineWatermark->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1036)		this->kadeEngineWatermark->scrollFactor->set(null(),null());
HXLINE(1037)		this->add(this->kadeEngineWatermark);
HXLINE(1039)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1040)			this->kadeEngineWatermark->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            		}
HXLINE(1042)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(235) )),(this->healthBarBG->y + 50),0,HX_("",00,00,00,00),20,null());
HXLINE(1043)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("accuracyDisplay",09,75,5e,26),::hx::paccDynamic)) ))) {
HXLINE(1044)			 ::flixel::text::FlxText _hx_tmp = this->scoreTxt;
HXDLIN(1044)			Float _hx_tmp1 = this->healthBarBG->x;
HXDLIN(1044)			_hx_tmp->set_x((_hx_tmp1 + (this->healthBarBG->get_width() / ( (Float)(2) ))));
            		}
HXLINE(1045)		this->scoreTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1046)		this->scoreTxt->scrollFactor->set(null(),null());
HXLINE(1047)		if (::PlayState_obj::offsetTesting) {
HXLINE(1048)			 ::flixel::text::FlxText fh = this->scoreTxt;
HXDLIN(1048)			fh->set_x((fh->x + 300));
            		}
HXLINE(1049)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(1049)			this->scoreTxt->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(20) )));
            		}
HXLINE(1050)		this->add(this->scoreTxt);
HXLINE(1052)		Float _hx_tmp17 = this->healthBarBG->x;
HXDLIN(1052)		Float _hx_tmp18 = ((_hx_tmp17 + (this->healthBarBG->get_width() / ( (Float)(2) ))) - ( (Float)(75) ));
HXDLIN(1052)		int _hx_tmp19;
HXDLIN(1052)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1052)			_hx_tmp19 = 100;
            		}
            		else {
HXLINE(1052)			_hx_tmp19 = -100;
            		}
HXDLIN(1052)		this->replayTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp18,(this->healthBarBG->y + _hx_tmp19),0,HX_("REPLAY",27,93,04,b9),20,null());
HXLINE(1053)		this->replayTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),42,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1054)		this->replayTxt->scrollFactor->set(null(),null());
HXLINE(1055)		if (::PlayState_obj::loadRep) {
HXLINE(1057)			this->add(this->replayTxt);
            		}
HXLINE(1060)		Float _hx_tmp20 = this->healthBarBG->x;
HXDLIN(1060)		Float _hx_tmp21 = ((_hx_tmp20 + (this->healthBarBG->get_width() / ( (Float)(2) ))) - ( (Float)(75) ));
HXDLIN(1060)		int _hx_tmp22;
HXDLIN(1060)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1060)			_hx_tmp22 = 100;
            		}
            		else {
HXLINE(1060)			_hx_tmp22 = -100;
            		}
HXDLIN(1060)		this->botPlayState =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp21,(this->healthBarBG->y + _hx_tmp22),0,HX_("BOTPLAY",5b,cf,7d,e1),20,null());
HXLINE(1061)		this->botPlayState->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),42,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1062)		this->botPlayState->scrollFactor->set(null(),null());
HXLINE(1064)		bool _hx_tmp23;
HXDLIN(1064)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(1064)			_hx_tmp23 = !(::PlayState_obj::loadRep);
            		}
            		else {
HXLINE(1064)			_hx_tmp23 = false;
            		}
HXDLIN(1064)		if (_hx_tmp23) {
HXLINE(1064)			this->add(this->botPlayState);
            		}
HXLINE(1066)		this->iconP1 =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),true);
HXLINE(1067)		 ::HealthIcon _hx_tmp24 = this->iconP1;
HXDLIN(1067)		Float _hx_tmp25 = this->healthBar->y;
HXDLIN(1067)		_hx_tmp24->set_y((_hx_tmp25 - (this->iconP1->get_height() / ( (Float)(2) ))));
HXLINE(1068)		this->add(this->iconP1);
HXLINE(1070)		this->iconP2 =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),false);
HXLINE(1071)		 ::HealthIcon _hx_tmp26 = this->iconP2;
HXDLIN(1071)		Float _hx_tmp27 = this->healthBar->y;
HXDLIN(1071)		_hx_tmp26->set_y((_hx_tmp27 - (this->iconP2->get_height() / ( (Float)(2) ))));
HXLINE(1072)		this->add(this->iconP2);
HXLINE(1074)		::PlayState_obj::strumLineNotes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1075)		this->notes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1076)		this->healthBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1077)		this->healthBarBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1078)		this->iconP1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1079)		this->iconP2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1080)		this->scoreTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1081)		doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1082)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(1084)			::PlayState_obj::songPosBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1085)			::PlayState_obj::songPosBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1087)		this->kadeEngineWatermark->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1088)		if (::PlayState_obj::loadRep) {
HXLINE(1089)			this->replayTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1092)		this->mcontrols =  ::ui::Mobilecontrols_obj::__alloc( HX_CTX );
HXLINE(1093)		switch((int)(this->mcontrols->mode->_hx_getIndex())){
            			case (int)0: case (int)1: case (int)3: {
HXLINE(1096)				::PlayerSettings_obj::player1->controls->setVirtualPad(this->mcontrols->_virtualPad,::ui::FlxDPadMode_obj::FULL_dyn(),::ui::FlxActionMode_obj::NONE_dyn());
            			}
            			break;
            			case (int)4: {
HXLINE(1098)				::PlayerSettings_obj::player1->controls->setHitBox(this->mcontrols->_hitbox);
            			}
            			break;
            			default:{
            			}
            		}
HXLINE(1101)		this->trackedinputs = ::PlayerSettings_obj::player1->controls->trackedinputs;
HXLINE(1102)		::PlayerSettings_obj::player1->controls->trackedinputs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1104)		 ::flixel::FlxCamera camcontrol =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(1105)		::flixel::FlxG_obj::cameras->add(camcontrol,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE(1106)		{
HXLINE(1106)			 ::flixel::FlxCamera camcontrol1 = camcontrol;
HXDLIN(1106)			camcontrol1->bgColor = (camcontrol1->bgColor & 16777215);
HXDLIN(1106)			 ::flixel::FlxCamera camcontrol2 = camcontrol;
HXDLIN(1106)			camcontrol2->bgColor = (camcontrol2->bgColor | 0);
            		}
HXLINE(1107)		this->mcontrols->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,camcontrol));
HXLINE(1109)		this->mcontrols->set_visible(false);
HXLINE(1111)		this->add(this->mcontrols);
HXLINE(1119)		this->startingSong = true;
HXLINE(1121)		if (::PlayState_obj::isStoryMode) {
HXLINE(1123)			::String _hx_switch_5 = this->curSong.toLowerCase();
            			if (  (_hx_switch_5==HX_("roses",04,6c,64,ed)) ){
HXLINE(1156)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1156)				_hx_tmp->play(::Paths_obj::sound(HX_("ANGRY",01,81,d0,a0),null()),null(),null(),null(),null(),null());
HXLINE(1157)				this->schoolIntro(doof);
HXLINE(1155)				goto _hx_goto_9;
            			}
            			if (  (_hx_switch_5==HX_("senpai",3c,df,8d,6b)) ){
HXLINE(1154)				this->schoolIntro(doof);
HXDLIN(1154)				goto _hx_goto_9;
            			}
            			if (  (_hx_switch_5==HX_("thorns",9c,bf,c7,8c)) ){
HXLINE(1159)				this->schoolIntro(doof);
HXDLIN(1159)				goto _hx_goto_9;
            			}
            			if (  (_hx_switch_5==HX_("winter-horrorland",9d,39,f4,1e)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1148_create)
HXLINE(1148)							_gthis->startCountdown();
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1141_create)
HXLINE(1142)						_gthis->camHUD->set_visible(true);
HXLINE(1143)						_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1144)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),_gthis->defaultCamZoom)),((Float)2.5), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1132_create)
HXLINE(1133)					_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1134)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1134)					_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Turn_On",5f,e1,29,ad),null()),null(),null(),null(),null(),null());
HXLINE(1135)					_gthis->camFollow->set_y(( (Float)(-2050) ));
HXLINE(1136)					 ::flixel::FlxObject fh = _gthis->camFollow;
HXDLIN(1136)					fh->set_x((fh->x + 200));
HXLINE(1137)					{
HXLINE(1137)						 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN(1137)						 ::flixel::math::FlxPoint point = _gthis->camFollow->getPosition(null());
HXDLIN(1137)						_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN(1137)						if (point->_weak) {
HXLINE(1137)							point->put();
            						}
            					}
HXLINE(1138)					::flixel::FlxG_obj::camera->set_zoom(((Float)1.5));
HXLINE(1140)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.8), ::Dynamic(new _hx_Closure_1(_gthis,blackScreen2)),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1126)				 ::flixel::FlxSprite blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(1126)				int blackScreen1 = ::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::width * 2)) ));
HXDLIN(1126)				 ::flixel::FlxSprite blackScreen2 = blackScreen->makeGraphic(blackScreen1,::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::height * 2)) )),-16777216,null(),null());
HXLINE(1127)				this->add(blackScreen2);
HXLINE(1128)				blackScreen2->scrollFactor->set(null(),null());
HXLINE(1129)				this->camHUD->set_visible(false);
HXLINE(1131)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_2(_gthis,blackScreen2)),null());
HXLINE(1125)				goto _hx_goto_9;
            			}
            			/* default */{
HXLINE(1161)				this->startCountdown();
            			}
            			_hx_goto_9:;
            		}
            		else {
HXLINE(1166)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic),HX_("basement",2f,0a,ce,11) )) {
HXLINE(1168)				this->staticlol =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1169)				 ::flixel::FlxSprite _hx_tmp = this->staticlol;
HXDLIN(1169)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("staticlol",9b,18,2b,87)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d));
HXDLIN(1169)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("staticlol",9b,18,2b,87)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("shared",a5,5e,2b,1d))));
HXLINE(1170)				this->staticlol->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Static",ce,50,90,3a),24,false,null(),null());
HXLINE(1171)				 ::flixel::FlxSprite _hx_tmp2 = this->staticlol;
HXDLIN(1171)				_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->staticlol->get_width() * ( (Float)(8) ))),null());
HXLINE(1172)				this->staticlol->set_antialiasing(true);
HXLINE(1173)				this->staticlol->screenCenter(null());
HXLINE(1174)				this->staticlol->set_visible(false);
HXLINE(1175)				this->add(this->staticlol);
            			}
HXLINE(1177)			{
HXLINE(1177)				::String _g = this->curSong.toLowerCase();
HXLINE(1180)				this->startCountdown();
            			}
            		}
HXLINE(1184)		if (!(::PlayState_obj::loadRep)) {
HXLINE(1185)			::PlayState_obj::rep =  ::Replay_obj::__alloc( HX_CTX ,HX_("na",33,60,00,00));
            		}
HXLINE(1187)		this->super::create();
            	}


void PlayState_obj::schoolIntro( ::DialogueBox dialogueBox){
            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,black1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1218_schoolIntro)
HXLINE(1219)			black1->set_alpha((black1->alpha - ((Float)0.15)));
HXLINE(1221)			if ((black1->alpha > 0)) {
HXLINE(1223)				tmr->reset(((Float)0.3));
            			}
            			else {
HXLINE(1227)				if (::hx::IsNotNull( dialogueBox )) {
HXLINE(1229)					_gthis->inCutscene = true;
HXLINE(1231)					if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
            						HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer swagTimer){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1236_schoolIntro)
HXLINE(1237)							senpaiEvil->set_alpha((senpaiEvil->alpha + ((Float)0.15)));
HXLINE(1238)							if ((senpaiEvil->alpha < 1)) {
HXLINE(1240)								swagTimer->reset(null());
            							}
            							else {
            								HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(0)
            								void _hx_run(){
            									HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::DialogueBox,dialogueBox) HXARGC(0)
            									void _hx_run(){
            										HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1251_schoolIntro)
HXLINE(1251)										_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            									}
            									HX_END_LOCAL_FUNC0((void))

            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1246_schoolIntro)
HXLINE(1247)									_gthis->remove(senpaiEvil,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1248)									_gthis->remove(red1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1249)									::flixel::FlxG_obj::camera->fade(-1,((Float)0.01),true, ::Dynamic(new _hx_Closure_0(_gthis,dialogueBox)),true);
            								}
            								HX_END_LOCAL_FUNC0((void))

            								HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer deadTime){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1256_schoolIntro)
HXLINE(1256)									::flixel::FlxG_obj::camera->fade(-1,((Float)1.6),false,null(),null());
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(1244)								senpaiEvil->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1245)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1245)								_hx_tmp->play(::Paths_obj::sound(HX_("Senpai_Dies",56,a2,b9,ec),null()),1,false,null(),true, ::Dynamic(new _hx_Closure_1(_gthis,dialogueBox,red1,senpaiEvil)));
HXLINE(1254)								 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)3.2), ::Dynamic(new _hx_Closure_2()),null());
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1233)						_gthis->add(senpaiEvil).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1234)						senpaiEvil->set_alpha(( (Float)(0) ));
HXLINE(1235)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_3(_gthis,dialogueBox,red1,senpaiEvil)),null());
            					}
            					else {
HXLINE(1263)						_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            				else {
HXLINE(1267)					_gthis->startCountdown();
            				}
HXLINE(1269)				_gthis->remove(black1,null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1191_schoolIntro)
HXDLIN(1191)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1192)		 ::flixel::FlxSprite black =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1192)		 ::flixel::FlxSprite black1 = black->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-16777216,null(),null());
HXLINE(1193)		black1->scrollFactor->set(null(),null());
HXLINE(1194)		this->add(black1);
HXLINE(1196)		 ::flixel::FlxSprite red =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1196)		 ::flixel::FlxSprite red1 = red->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-58575,null(),null());
HXLINE(1197)		red1->scrollFactor->set(null(),null());
HXLINE(1199)		 ::flixel::FlxSprite senpaiEvil =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1200)		 ::flixel::FlxSprite senpaiEvil1 = senpaiEvil;
HXDLIN(1200)		::String library = null();
HXDLIN(1200)		::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1200)		senpaiEvil1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(1201)		senpaiEvil->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Senpai Pre Explosion",54,71,6e,81),24,false,null(),null());
HXLINE(1202)		 ::flixel::FlxSprite senpaiEvil2 = senpaiEvil;
HXDLIN(1202)		senpaiEvil2->setGraphicSize(::Std_obj::_hx_int((senpaiEvil->get_width() * ( (Float)(6) ))),null());
HXLINE(1203)		senpaiEvil->scrollFactor->set(null(),null());
HXLINE(1204)		senpaiEvil->updateHitbox();
HXLINE(1205)		senpaiEvil->screenCenter(null());
HXLINE(1207)		bool _hx_tmp1;
HXDLIN(1207)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() != HX_("roses",04,6c,64,ed))) {
HXLINE(1207)			_hx_tmp1 = (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c));
            		}
            		else {
HXLINE(1207)			_hx_tmp1 = true;
            		}
HXDLIN(1207)		if (_hx_tmp1) {
HXLINE(1209)			this->remove(black1,null());
HXLINE(1211)			if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
HXLINE(1213)				this->add(red1);
            			}
            		}
HXLINE(1217)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_4(_gthis,dialogueBox,red1,black1,senpaiEvil)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,schoolIntro,(void))

void PlayState_obj::startCountdown(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis,::Array< int >,swagCounter) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1307_startCountdown)
HXLINE(1308)			::PlayState_obj::dad->dance();
HXLINE(1309)			::PlayState_obj::gf->dance();
HXLINE(1310)			::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1312)			 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1313)			introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_27,3));
HXLINE(1314)			introAssets->set(HX_("school",74,b8,c8,40),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_28,3));
HXLINE(1319)			introAssets->set(HX_("schoolEvil",28,a1,f5,f7),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_29,3));
HXLINE(1325)			::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE(1326)			::String altSuffix = HX_("",00,00,00,00);
HXLINE(1328)			{
HXLINE(1328)				 ::Dynamic value = introAssets->keys();
HXDLIN(1328)				while(( (bool)(value->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1328)					::String value1 = ( (::String)(value->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1330)					if ((value1 == ::PlayState_obj::curStage)) {
HXLINE(1332)						introAlts = ( (::Array< ::String >)(introAssets->get(value1)) );
HXLINE(1333)						altSuffix = HX_("-pixel",39,03,b3,c0);
            					}
            				}
            			}
HXLINE(1337)			switch((int)(swagCounter->__get(0))){
            				case (int)0: {
HXLINE(1341)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1341)					_hx_tmp->play(::Paths_obj::sound((HX_("intro3",47,54,90,9e) + altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,ready1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1356_startCountdown)
HXLINE(1356)						ready1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1343)					 ::flixel::FlxSprite ready =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1343)					::String library = null();
HXDLIN(1343)					 ::flixel::FlxSprite ready1 = ready->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1344)					ready1->scrollFactor->set(null(),null());
HXLINE(1345)					ready1->updateHitbox();
HXLINE(1347)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1348)						 ::flixel::FlxSprite ready = ready1;
HXDLIN(1348)						Float _hx_tmp = ready1->get_width();
HXDLIN(1348)						ready->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1350)					ready1->screenCenter(null());
HXLINE(1351)					_gthis->add(ready1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1352)					 ::flixel::FlxSprite ready2 = ready1;
HXDLIN(1352)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),ready1->set_y((ready1->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1352)					::flixel::tweens::FlxTween_obj::tween(ready2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(ready1)))));
HXLINE(1359)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1359)					_hx_tmp1->play(::Paths_obj::sound((HX_("intro2",46,54,90,9e) + altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,set1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1373_startCountdown)
HXLINE(1373)						set1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1361)					 ::flixel::FlxSprite set =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1361)					::String library = null();
HXDLIN(1361)					 ::flixel::FlxSprite set1 = set->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1362)					set1->scrollFactor->set(null(),null());
HXLINE(1364)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1365)						 ::flixel::FlxSprite set = set1;
HXDLIN(1365)						Float _hx_tmp = set1->get_width();
HXDLIN(1365)						set->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1367)					set1->screenCenter(null());
HXLINE(1368)					_gthis->add(set1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1369)					 ::flixel::FlxSprite set2 = set1;
HXDLIN(1369)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),set1->set_y((set1->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1369)					::flixel::tweens::FlxTween_obj::tween(set2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(set1)))));
HXLINE(1376)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1376)					_hx_tmp1->play(::Paths_obj::sound((HX_("intro1",45,54,90,9e) + altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)3: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::FlxSprite,go1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1392_startCountdown)
HXLINE(1392)						go1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1378)					 ::flixel::FlxSprite go =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1378)					::String library = null();
HXDLIN(1378)					 ::flixel::FlxSprite go1 = go->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1379)					go1->scrollFactor->set(null(),null());
HXLINE(1381)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1382)						 ::flixel::FlxSprite go = go1;
HXDLIN(1382)						Float _hx_tmp = go1->get_width();
HXDLIN(1382)						go->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1384)					go1->updateHitbox();
HXLINE(1386)					go1->screenCenter(null());
HXLINE(1387)					_gthis->add(go1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1388)					 ::flixel::FlxSprite go2 = go1;
HXDLIN(1388)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),go1->set_y((go1->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1388)					::flixel::tweens::FlxTween_obj::tween(go2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(go1)))));
HXLINE(1395)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1395)					_hx_tmp1->play(::Paths_obj::sound((HX_("introGo",b4,7b,b9,1f) + altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)4: {
            				}
            				break;
            			}
HXLINE(1399)			::Array< int > swagCounter1 = swagCounter;
HXDLIN(1399)			int _hx_tmp = 0;
HXDLIN(1399)			swagCounter1[_hx_tmp] = (swagCounter1->__get(_hx_tmp) + 1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1282_startCountdown)
HXDLIN(1282)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1284)		this->mcontrols->set_visible(true);
HXLINE(1287)		this->inCutscene = false;
HXLINE(1289)		this->generateStaticArrows(0);
HXLINE(1290)		this->generateStaticArrows(1);
HXLINE(1293)		if (this->executeModchart) {
HXLINE(1295)			::PlayState_obj::luaModchart = ::ModchartState_obj::createModchartState();
HXLINE(1296)			::PlayState_obj::luaModchart->executeState(HX_("start",62,74,0b,84),::cpp::VirtualArray_obj::__new(1)->init(0, ::Dynamic(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic))));
            		}
HXLINE(1299)		this->talking = false;
HXLINE(1300)		this->startedCountdown = true;
HXLINE(1301)		::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE(1302)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(1302)		::Conductor_obj::songPosition = (::Conductor_obj::songPosition - (::Conductor_obj::crochet * ( (Float)(5) )));
HXLINE(1304)		::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_34,1);
HXLINE(1306)		 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1306)		this->startTimer = _hx_tmp1->start((::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_3(_gthis,swagCounter)),5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,(void))

void PlayState_obj::startSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1412_startSong)
HXLINE(1413)		this->startingSong = false;
HXLINE(1414)		this->songStarted = true;
HXLINE(1415)		this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1416)		this->lastReportedPlayheadPosition = 0;
HXLINE(1418)		if (!(this->paused)) {
HXLINE(1420)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1420)			::String song = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1420)			song = ::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXDLIN(1420)			_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + song.toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),1,false,null());
            		}
HXLINE(1423)		::flixel::FlxG_obj::sound->music->onComplete = this->endSong_dyn();
HXLINE(1424)		this->vocals->play(null(),null(),null());
HXLINE(1427)		this->songLength = ::flixel::FlxG_obj::sound->music->_length;
HXLINE(1429)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(1431)			this->remove(::PlayState_obj::songPosBG,null());
HXLINE(1432)			this->remove(::PlayState_obj::songPosBar,null());
HXLINE(1433)			this->remove(this->songName,null());
HXLINE(1435)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,10,null());
HXDLIN(1435)			::String library = null();
HXDLIN(1435)			::PlayState_obj::songPosBG = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1436)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1437)				::PlayState_obj::songPosBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            			}
HXLINE(1438)			::PlayState_obj::songPosBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(1439)			::PlayState_obj::songPosBG->scrollFactor->set(null(),null());
HXLINE(1440)			this->add(::PlayState_obj::songPosBG);
HXLINE(1442)			Float _hx_tmp1 = (::PlayState_obj::songPosBG->x + 4);
HXDLIN(1442)			Float _hx_tmp2 = (::PlayState_obj::songPosBG->y + 4);
HXDLIN(1442)			int _hx_tmp3 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(8) )));
HXDLIN(1442)			int _hx_tmp4 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_height() - ( (Float)(8) )));
HXDLIN(1442)			::PlayState_obj::songPosBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp3,_hx_tmp4,::hx::ObjectPtr<OBJ_>(this),HX_("songPositionBar",d5,62,6e,a6),0,(this->songLength - ( (Float)(1000) )),null());
HXLINE(1444)			::PlayState_obj::songPosBar->set_numDivisions(1000);
HXLINE(1445)			::PlayState_obj::songPosBar->scrollFactor->set(null(),null());
HXLINE(1446)			::PlayState_obj::songPosBar->createFilledBar(-8355712,-16711936,null(),null());
HXLINE(1447)			this->add(::PlayState_obj::songPosBar);
HXLINE(1449)			Float songName = ::PlayState_obj::songPosBG->x;
HXDLIN(1449)			Float songName1 = ((songName + (::PlayState_obj::songPosBG->get_width() / ( (Float)(2) ))) - ( (Float)(20) ));
HXDLIN(1449)			 ::flixel::text::FlxText songName2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,songName1,::PlayState_obj::songPosBG->y,0,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),16,null());
HXLINE(1450)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1451)				songName2->set_y((songName2->y - ( (Float)(3) )));
            			}
HXLINE(1452)			songName2->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1453)			songName2->scrollFactor->set(null(),null());
HXLINE(1454)			this->add(songName2);
HXLINE(1456)			::PlayState_obj::songPosBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1457)			::PlayState_obj::songPosBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1458)			songName2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1462)		::String _hx_switch_0 = this->curSong;
            		if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ||  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ||  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ||  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ||  (_hx_switch_0==HX_("Philly",48,eb,f2,23)) ){
HXLINE(1464)			this->allowedToHeadbang = true;
HXDLIN(1464)			goto _hx_goto_35;
            		}
            		/* default */{
HXLINE(1465)			this->allowedToHeadbang = false;
            		}
            		_hx_goto_35:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1477_generateSong)
HXLINE(1480)		 ::Dynamic songData = ::PlayState_obj::SONG;
HXLINE(1481)		::Conductor_obj::changeBPM(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(1483)		this->curSong = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(1485)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1486)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1486)			::String song = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1486)			song = ::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXDLIN(1486)			this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + song.toLowerCase()) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
            		}
            		else {
HXLINE(1488)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE(1490)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1492)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(1493)		this->add(this->notes);
HXLINE(1495)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE(1500)		int playerCounter = 0;
HXLINE(1522)		int daBeats = 0;
HXLINE(1523)		{
HXLINE(1523)			int _g = 0;
HXDLIN(1523)			while((_g < noteData->length)){
HXLINE(1523)				 ::Dynamic section = noteData->__get(_g);
HXDLIN(1523)				_g = (_g + 1);
HXLINE(1525)				int coolSection = ::Std_obj::_hx_int((( (Float)(section->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) / ( (Float)(4) )));
HXLINE(1527)				{
HXLINE(1527)					int _g1 = 0;
HXDLIN(1527)					::cpp::VirtualArray _g2 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1527)					while((_g1 < _g2->get_length())){
HXLINE(1527)						 ::Dynamic songNotes = _g2->__get(_g1);
HXDLIN(1527)						_g1 = (_g1 + 1);
HXLINE(1529)						Float daStrumTime = ( (Float)(((songNotes->__GetItem(0) + ::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)) + ::PlayState_obj::songOffset)) );
HXLINE(1530)						if ((daStrumTime < 0)) {
HXLINE(1531)							daStrumTime = ( (Float)(0) );
            						}
HXLINE(1532)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__GetItem(1),4));
HXLINE(1534)						bool gottaHitNote = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(1536)						if (::hx::IsGreater( songNotes->__GetItem(1),3 )) {
HXLINE(1538)							gottaHitNote = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            						}
HXLINE(1541)						 ::Note oldNote;
HXLINE(1542)						if ((this->unspawnNotes->length > 0)) {
HXLINE(1543)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(1545)							oldNote = null();
            						}
HXLINE(1547)						 ::Note swagNote =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,oldNote,null());
HXLINE(1548)						swagNote->sustainLength = ( (Float)(songNotes->__GetItem(2)) );
HXLINE(1549)						swagNote->scrollFactor->set(0,0);
HXLINE(1551)						Float susLength = swagNote->sustainLength;
HXLINE(1553)						susLength = (susLength / ::Conductor_obj::stepCrochet);
HXLINE(1554)						this->unspawnNotes->push(swagNote);
HXLINE(1556)						{
HXLINE(1556)							int _g = 0;
HXDLIN(1556)							int _g3 = ::Math_obj::floor(susLength);
HXDLIN(1556)							while((_g < _g3)){
HXLINE(1556)								_g = (_g + 1);
HXDLIN(1556)								int susNote = (_g - 1);
HXLINE(1558)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
HXLINE(1560)								 ::Note sustainNote =  ::Note_obj::__alloc( HX_CTX ,((daStrumTime + (::Conductor_obj::stepCrochet * ( (Float)(susNote) ))) + ::Conductor_obj::stepCrochet),daNoteData,oldNote,true);
HXLINE(1561)								sustainNote->scrollFactor->set(null(),null());
HXLINE(1562)								this->unspawnNotes->push(sustainNote);
HXLINE(1564)								sustainNote->mustPress = gottaHitNote;
HXLINE(1566)								if (sustainNote->mustPress) {
HXLINE(1568)									sustainNote->set_x((sustainNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
            							}
            						}
HXLINE(1572)						swagNote->mustPress = gottaHitNote;
HXLINE(1574)						if (swagNote->mustPress) {
HXLINE(1576)							swagNote->set_x((swagNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            					}
            				}
HXLINE(1582)				daBeats = (daBeats + 1);
            			}
            		}
HXLINE(1588)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE(1590)		this->generatedMusic = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

int PlayState_obj::sortByShit( ::Note Obj1, ::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1595_sortByShit)
HXDLIN(1595)		Float Value1 = Obj1->strumTime;
HXDLIN(1595)		Float Value2 = Obj2->strumTime;
HXDLIN(1595)		int result = 0;
HXDLIN(1595)		if ((Value1 < Value2)) {
HXDLIN(1595)			result = -1;
            		}
            		else {
HXDLIN(1595)			if ((Value1 > Value2)) {
HXDLIN(1595)				result = 1;
            			}
            		}
HXDLIN(1595)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByShit,return )

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1600_generateStaticArrows)
HXDLIN(1600)		int _g = 0;
HXDLIN(1600)		while((_g < 4)){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1737_generateStaticArrows)
HXLINE(1737)				spr->centerOffsets(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXDLIN(1600)			_g = (_g + 1);
HXDLIN(1600)			int i = (_g - 1);
HXLINE(1603)			 ::flixel::FlxSprite babyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,this->strumLine->y,null());
HXLINE(1605)			::String _hx_switch_0 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) );
            			if (  (_hx_switch_0==HX_("normal",27,72,69,30)) ){
HXLINE(1643)				::String library = null();
HXDLIN(1643)				::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1643)				babyArrow->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(1644)				babyArrow->animation->addByPrefix(HX_("green",c3,0e,ed,99),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1645)				babyArrow->animation->addByPrefix(HX_("blue",9a,42,19,41),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1646)				babyArrow->animation->addByPrefix(HX_("purple",3c,f6,89,71),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1647)				babyArrow->animation->addByPrefix(HX_("red",51,d9,56,00),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1649)				babyArrow->set_antialiasing(true);
HXLINE(1650)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
HXLINE(1652)				Float _hx_switch_1 = ::Math_obj::abs(( (Float)(i) ));
            				if (  (_hx_switch_1==( (Float)(0) )) ){
HXLINE(1655)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
HXLINE(1656)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1657)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("left press",aa,26,70,8e),24,false,null(),null());
HXLINE(1658)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("left confirm",e7,c7,19,fe),24,false,null(),null());
HXLINE(1654)					goto _hx_goto_45;
            				}
            				if (  (_hx_switch_1==( (Float)(1) )) ){
HXLINE(1660)					babyArrow->set_x((babyArrow->x + ::Note_obj::swagWidth));
HXLINE(1661)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1662)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("down press",45,4d,63,9c),24,false,null(),null());
HXLINE(1663)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("down confirm",42,0b,18,cc),24,false,null(),null());
HXLINE(1659)					goto _hx_goto_45;
            				}
            				if (  (_hx_switch_1==( (Float)(2) )) ){
HXLINE(1665)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
HXLINE(1666)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1667)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("up press",fe,fb,65,e9),24,false,null(),null());
HXLINE(1668)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("up confirm",3b,9a,2e,62),24,false,null(),null());
HXLINE(1664)					goto _hx_goto_45;
            				}
            				if (  (_hx_switch_1==( (Float)(3) )) ){
HXLINE(1670)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
HXLINE(1671)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1672)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("right press",3f,38,e4,c8),24,false,null(),null());
HXLINE(1673)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("right confirm",bc,28,e5,ca),24,false,null(),null());
HXLINE(1669)					goto _hx_goto_45;
            				}
            				_hx_goto_45:;
HXLINE(1642)				goto _hx_goto_44;
            			}
            			if (  (_hx_switch_0==HX_("pixel",86,c6,a3,c2)) ){
HXLINE(1608)				::String library = null();
HXDLIN(1608)				babyArrow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/pixelUI/arrows-pixels",b7,c3,c7,09)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),true,17,17,null(),null());
HXLINE(1609)				babyArrow->animation->add(HX_("green",c3,0e,ed,99),::Array_obj< int >::fromData( _hx_array_data_46c2835d_49,1),null(),null(),null(),null());
HXLINE(1610)				babyArrow->animation->add(HX_("red",51,d9,56,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_50,1),null(),null(),null(),null());
HXLINE(1611)				babyArrow->animation->add(HX_("blue",9a,42,19,41),::Array_obj< int >::fromData( _hx_array_data_46c2835d_51,1),null(),null(),null(),null());
HXLINE(1612)				babyArrow->animation->add(HX_("purplel",b0,7e,2d,e7),::Array_obj< int >::fromData( _hx_array_data_46c2835d_52,1),null(),null(),null(),null());
HXLINE(1614)				Float _hx_tmp = babyArrow->get_width();
HXDLIN(1614)				babyArrow->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
HXLINE(1615)				babyArrow->updateHitbox();
HXLINE(1616)				babyArrow->set_antialiasing(false);
HXLINE(1618)				Float _hx_switch_2 = ::Math_obj::abs(( (Float)(i) ));
            				if (  (_hx_switch_2==( (Float)(0) )) ){
HXLINE(1621)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
HXLINE(1622)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_53,1),null(),null(),null(),null());
HXLINE(1623)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_54,2),12,false,null(),null());
HXLINE(1624)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_55,2),24,false,null(),null());
HXLINE(1620)					goto _hx_goto_46;
            				}
            				if (  (_hx_switch_2==( (Float)(1) )) ){
HXLINE(1626)					babyArrow->set_x((babyArrow->x + ::Note_obj::swagWidth));
HXLINE(1627)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_56,1),null(),null(),null(),null());
HXLINE(1628)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_57,2),12,false,null(),null());
HXLINE(1629)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_58,2),24,false,null(),null());
HXLINE(1625)					goto _hx_goto_46;
            				}
            				if (  (_hx_switch_2==( (Float)(2) )) ){
HXLINE(1631)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
HXLINE(1632)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_59,1),null(),null(),null(),null());
HXLINE(1633)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_60,2),12,false,null(),null());
HXLINE(1634)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_61,2),12,false,null(),null());
HXLINE(1630)					goto _hx_goto_46;
            				}
            				if (  (_hx_switch_2==( (Float)(3) )) ){
HXLINE(1636)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
HXLINE(1637)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_62,1),null(),null(),null(),null());
HXLINE(1638)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_63,2),12,false,null(),null());
HXLINE(1639)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_64,2),24,false,null(),null());
HXLINE(1635)					goto _hx_goto_46;
            				}
            				_hx_goto_46:;
HXLINE(1607)				goto _hx_goto_44;
            			}
            			/* default */{
HXLINE(1677)				::String library = null();
HXDLIN(1677)				::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1677)				babyArrow->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(1678)				babyArrow->animation->addByPrefix(HX_("green",c3,0e,ed,99),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1679)				babyArrow->animation->addByPrefix(HX_("blue",9a,42,19,41),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1680)				babyArrow->animation->addByPrefix(HX_("purple",3c,f6,89,71),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1681)				babyArrow->animation->addByPrefix(HX_("red",51,d9,56,00),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1683)				babyArrow->set_antialiasing(true);
HXLINE(1684)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
HXLINE(1686)				Float _hx_switch_3 = ::Math_obj::abs(( (Float)(i) ));
            				if (  (_hx_switch_3==( (Float)(0) )) ){
HXLINE(1689)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
HXLINE(1690)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1691)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("left press",aa,26,70,8e),24,false,null(),null());
HXLINE(1692)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("left confirm",e7,c7,19,fe),24,false,null(),null());
HXLINE(1688)					goto _hx_goto_43;
            				}
            				if (  (_hx_switch_3==( (Float)(1) )) ){
HXLINE(1694)					babyArrow->set_x((babyArrow->x + ::Note_obj::swagWidth));
HXLINE(1695)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1696)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("down press",45,4d,63,9c),24,false,null(),null());
HXLINE(1697)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("down confirm",42,0b,18,cc),24,false,null(),null());
HXLINE(1693)					goto _hx_goto_43;
            				}
            				if (  (_hx_switch_3==( (Float)(2) )) ){
HXLINE(1699)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
HXLINE(1700)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1701)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("up press",fe,fb,65,e9),24,false,null(),null());
HXLINE(1702)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("up confirm",3b,9a,2e,62),24,false,null(),null());
HXLINE(1698)					goto _hx_goto_43;
            				}
            				if (  (_hx_switch_3==( (Float)(3) )) ){
HXLINE(1704)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
HXLINE(1705)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1706)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("right press",3f,38,e4,c8),24,false,null(),null());
HXLINE(1707)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("right confirm",bc,28,e5,ca),24,false,null(),null());
HXLINE(1703)					goto _hx_goto_43;
            				}
            				_hx_goto_43:;
            			}
            			_hx_goto_44:;
HXLINE(1711)			babyArrow->updateHitbox();
HXLINE(1712)			babyArrow->scrollFactor->set(null(),null());
HXLINE(1714)			if (!(::PlayState_obj::isStoryMode)) {
HXLINE(1716)				babyArrow->set_y((babyArrow->y - ( (Float)(10) )));
HXLINE(1717)				babyArrow->set_alpha(( (Float)(0) ));
HXLINE(1718)				::flixel::tweens::FlxTween_obj::tween(babyArrow, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("y",79,00,00,00),(babyArrow->y + 10))
            					->setFixed(1,HX_("alpha",5e,a7,96,21),1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (((Float)0.2) * ( (Float)(i) ))))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            			}
HXLINE(1721)			babyArrow->ID = i;
HXLINE(1723)			switch((int)(player)){
            				case (int)0: {
HXLINE(1726)					::PlayState_obj::cpuStrums->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            				}
            				break;
            				case (int)1: {
HXLINE(1728)					::PlayState_obj::playerStrums->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            				}
            				break;
            			}
HXLINE(1731)			babyArrow->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
HXLINE(1732)			babyArrow->set_x((babyArrow->x + 50));
HXLINE(1733)			babyArrow->set_x((babyArrow->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) * ( (Float)(player) ))));
HXLINE(1735)			::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE(1740)			::PlayState_obj::strumLineNotes->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::tweenCamIn(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1746_tweenCamIn)
HXDLIN(1746)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.3))),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,tweenCamIn,(void))

void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1750_openSubState)
HXLINE(1751)		if (this->paused) {
HXLINE(1753)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1755)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1756)				this->vocals->pause();
            			}
HXLINE(1762)			if (!(this->startTimer->finished)) {
HXLINE(1763)				this->startTimer->active = false;
            			}
            		}
HXLINE(1766)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1770_closeSubState)
HXLINE(1771)		if (this->paused) {
HXLINE(1773)			bool _hx_tmp;
HXDLIN(1773)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1773)				_hx_tmp = !(this->startingSong);
            			}
            			else {
HXLINE(1773)				_hx_tmp = false;
            			}
HXDLIN(1773)			if (_hx_tmp) {
HXLINE(1775)				this->resyncVocals();
            			}
HXLINE(1778)			if (!(this->startTimer->finished)) {
HXLINE(1779)				this->startTimer->active = true;
            			}
HXLINE(1780)			this->paused = false;
            		}
HXLINE(1794)		this->super::closeSubState();
            	}


void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1799_resyncVocals)
HXLINE(1800)		this->vocals->pause();
HXLINE(1802)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1803)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1804)		this->vocals->set_time(::Conductor_obj::songPosition);
HXLINE(1805)		this->vocals->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1821_update)
HXDLIN(1821)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1823)		if (this->shakeEffect) {
HXLINE(1825)			::flixel::FlxG_obj::camera->shake(((Float)0.03),((Float)0.03),null(),null(),null());
            		}
HXLINE(1829)		this->perfectMode = false;
HXLINE(1832)		bool _hx_tmp;
HXDLIN(1832)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(1832)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1832)			_hx_tmp = _this->keyManager->checkStatus(49,_this->status);
            		}
            		else {
HXLINE(1832)			_hx_tmp = false;
            		}
HXDLIN(1832)		if (_hx_tmp) {
HXLINE(1833)			this->camHUD->set_visible(!(this->camHUD->visible));
            		}
HXLINE(1835)		bool _hx_tmp1;
HXDLIN(1835)		bool _hx_tmp2;
HXDLIN(1835)		if (this->executeModchart) {
HXLINE(1835)			_hx_tmp2 = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(1835)			_hx_tmp2 = false;
            		}
HXDLIN(1835)		if (_hx_tmp2) {
HXLINE(1835)			_hx_tmp1 = this->songStarted;
            		}
            		else {
HXLINE(1835)			_hx_tmp1 = false;
            		}
HXDLIN(1835)		if (_hx_tmp1) {
HXLINE(1837)			::PlayState_obj::luaModchart->setVar(HX_("songPos",bf,44,27,aa),::Conductor_obj::songPosition);
HXLINE(1838)			::PlayState_obj::luaModchart->setVar(HX_("hudZoom",6a,47,5d,7c),this->camHUD->zoom);
HXLINE(1839)			::PlayState_obj::luaModchart->setVar(HX_("cameraZoom",58,cc,16,b7),::flixel::FlxG_obj::camera->zoom);
HXLINE(1840)			::PlayState_obj::luaModchart->executeState(HX_("update",09,86,05,87),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed));
HXLINE(1842)			{
HXLINE(1842)				int _g = 0;
HXDLIN(1842)				::Array< ::Dynamic> _g1 = this->luaWiggles;
HXDLIN(1842)				while((_g < _g1->length)){
HXLINE(1842)					 ::WiggleEffect i = _g1->__get(_g).StaticCast<  ::WiggleEffect >();
HXDLIN(1842)					_g = (_g + 1);
HXLINE(1844)					::haxe::Log_obj::trace(HX_("wiggle le gaming",c1,21,03,c7),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),1844,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
HXLINE(1845)					i->update(elapsed);
            				}
            			}
HXLINE(1855)			 ::flixel::FlxCamera _hx_tmp = ::flixel::FlxG_obj::camera;
HXDLIN(1855)			_hx_tmp->set_angle(( (Float)(::PlayState_obj::luaModchart->getVar(HX_("cameraAngle",ee,36,28,17),HX_("float",9c,c5,96,02))) ));
HXLINE(1856)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN(1856)			_hx_tmp1->set_angle(( (Float)(::PlayState_obj::luaModchart->getVar(HX_("camHudAngle",cb,c2,43,4c),HX_("float",9c,c5,96,02))) ));
HXLINE(1858)			if (( (bool)(::PlayState_obj::luaModchart->getVar(HX_("showOnlyStrums",f3,ec,e4,3c),HX_("bool",2a,84,1b,41))) )) {
HXLINE(1860)				this->healthBarBG->set_visible(false);
HXLINE(1861)				this->kadeEngineWatermark->set_visible(false);
HXLINE(1862)				this->healthBar->set_visible(false);
HXLINE(1863)				this->iconP1->set_visible(false);
HXLINE(1864)				this->iconP2->set_visible(false);
HXLINE(1865)				this->scoreTxt->set_visible(false);
            			}
            			else {
HXLINE(1869)				this->healthBarBG->set_visible(true);
HXLINE(1870)				this->kadeEngineWatermark->set_visible(true);
HXLINE(1871)				this->healthBar->set_visible(true);
HXLINE(1872)				this->iconP1->set_visible(true);
HXLINE(1873)				this->iconP2->set_visible(true);
HXLINE(1874)				this->scoreTxt->set_visible(true);
            			}
HXLINE(1877)			bool p1 = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("strumLine1Visible",1e,97,fd,b5),HX_("bool",2a,84,1b,41))) );
HXLINE(1878)			bool p2 = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("strumLine2Visible",3d,09,30,ef),HX_("bool",2a,84,1b,41))) );
HXLINE(1880)			{
HXLINE(1881)				{
HXLINE(1882)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p1);
HXLINE(1883)					if ((0 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(1884)						Dynamic( ::PlayState_obj::playerStrums->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p2);
            					}
            				}
HXLINE(1881)				{
HXLINE(1882)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(1)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p1);
HXLINE(1883)					if ((1 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(1884)						Dynamic( ::PlayState_obj::playerStrums->members->__get(1)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p2);
            					}
            				}
HXLINE(1881)				{
HXLINE(1882)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(2)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p1);
HXLINE(1883)					if ((2 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(1884)						Dynamic( ::PlayState_obj::playerStrums->members->__get(2)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p2);
            					}
            				}
HXLINE(1881)				{
HXLINE(1882)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(3)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p1);
HXLINE(1883)					if ((3 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(1884)						Dynamic( ::PlayState_obj::playerStrums->members->__get(3)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p2);
            					}
            				}
            			}
            		}
HXLINE(1891)		{
HXLINE(1892)			int balls = (this->notesHitArray->length - 1);
HXLINE(1893)			while((balls >= 0)){
HXLINE(1895)				 ::Date cock = this->notesHitArray->__get(balls).StaticCast<  ::Date >();
HXLINE(1896)				bool _hx_tmp;
HXDLIN(1896)				if (::hx::IsNotNull( cock )) {
HXLINE(1896)					Float _hx_tmp1 = (cock->getTime() + 1000);
HXDLIN(1896)					_hx_tmp = (_hx_tmp1 < ::Date_obj::now()->getTime());
            				}
            				else {
HXLINE(1896)					_hx_tmp = false;
            				}
HXDLIN(1896)				if (_hx_tmp) {
HXLINE(1897)					this->notesHitArray->remove(cock);
            				}
            				else {
HXLINE(1899)					balls = 0;
            				}
HXLINE(1900)				balls = (balls - 1);
            			}
HXLINE(1902)			this->nps = this->notesHitArray->length;
HXLINE(1903)			if ((this->nps > this->maxNPS)) {
HXLINE(1904)				this->maxNPS = this->nps;
            			}
            		}
HXLINE(1907)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1907)		if (_this->keyManager->checkStatus(57,_this->status)) {
HXLINE(1909)			if ((this->iconP1->animation->_curAnim->name == HX_("bf-old",5e,ba,eb,07))) {
HXLINE(1910)				this->iconP1->animation->play(( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            			}
            			else {
HXLINE(1912)				this->iconP1->animation->play(HX_("bf-old",5e,ba,eb,07),null(),null(),null());
            			}
            		}
HXLINE(1915)		if ((::PlayState_obj::curStage == HX_("philly",28,77,5e,ef))) {
HXLINE(1918)			if (this->trainMoving) {
HXLINE(1920)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1920)				_hx_tmp->trainFrameTiming = (_hx_tmp->trainFrameTiming + elapsed);
HXLINE(1922)				if ((this->trainFrameTiming >= ((Float)0.041666666666666664))) {
HXLINE(1924)					this->updateTrainPos();
HXLINE(1925)					this->trainFrameTiming = ( (Float)(0) );
            				}
            			}
            		}
HXLINE(1931)		this->super::update(elapsed);
HXLINE(1933)		 ::flixel::text::FlxText _hx_tmp3 = this->scoreTxt;
HXDLIN(1933)		_hx_tmp3->set_text(::Ratings_obj::CalculateRanking(this->songScore,this->songScoreDef,this->nps,this->maxNPS,this->accuracy));
HXLINE(1934)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("accuracyDisplay",09,75,5e,26),::hx::paccDynamic)) ))) {
HXLINE(1935)			this->scoreTxt->set_text((HX_("Score: ",58,c6,eb,45) + this->songScore));
            		}
HXLINE(1937)		bool _hx_tmp4;
HXDLIN(1937)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1937)		if (!(_this1->keyManager->checkStatus(13,_this1->status))) {
HXLINE(1937)			bool _hx_tmp;
HXDLIN(1937)			 ::flixel::input::android::FlxAndroidKeyList _this = ( ( ::flixel::input::android::FlxAndroidKeyList)(::flixel::FlxG_obj::android->justReleased) );
HXDLIN(1937)			if (_this->keyManager->checkStatus((int)1073742094,_this->status)) {
HXLINE(1937)				_hx_tmp = this->startedCountdown;
            			}
            			else {
HXLINE(1937)				_hx_tmp = false;
            			}
HXDLIN(1937)			if (_hx_tmp) {
HXLINE(1937)				_hx_tmp4 = this->canPause;
            			}
            			else {
HXLINE(1937)				_hx_tmp4 = false;
            			}
            		}
            		else {
HXLINE(1937)			_hx_tmp4 = true;
            		}
HXDLIN(1937)		if (_hx_tmp4) {
HXLINE(1939)			this->persistentUpdate = false;
HXLINE(1940)			this->persistentDraw = true;
HXLINE(1941)			this->paused = true;
HXLINE(1944)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < ((Float)0.1))) {
HXLINE(1946)				::haxe::Log_obj::trace(HX_("GITAROO MAN EASTER EGG",52,92,3d,40),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),1946,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
HXLINE(1947)				{
HXLINE(1947)					 ::flixel::FlxState nextState =  ::GitarooPause_obj::__alloc( HX_CTX );
HXDLIN(1947)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1947)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            			else {
HXLINE(1950)				Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(1950)				this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            			}
            		}
HXLINE(1953)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1953)		if (_this2->keyManager->checkStatus(55,_this2->status)) {
HXLINE(1959)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(1961)				::PlayState_obj::luaModchart->die();
HXLINE(1962)				::PlayState_obj::luaModchart = null();
            			}
HXLINE(1965)			{
HXLINE(1965)				 ::flixel::FlxState nextState =  ::ChartingState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(1965)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1965)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE(1971)		 ::HealthIcon _hx_tmp5 = this->iconP1;
HXDLIN(1971)		_hx_tmp5->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP1->get_width() - ( (Float)(150) ))))),null());
HXLINE(1972)		 ::HealthIcon _hx_tmp6 = this->iconP2;
HXDLIN(1972)		_hx_tmp6->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP2->get_width() - ( (Float)(150) ))))),null());
HXLINE(1974)		this->iconP1->updateHitbox();
HXLINE(1975)		this->iconP2->updateHitbox();
HXLINE(1977)		int iconOffset = 26;
HXLINE(1979)		 ::HealthIcon _hx_tmp7 = this->iconP1;
HXDLIN(1979)		Float _hx_tmp8 = this->healthBar->x;
HXDLIN(1979)		Float _hx_tmp9 = this->healthBar->get_width();
HXDLIN(1979)		_hx_tmp7->set_x((_hx_tmp8 + ((_hx_tmp9 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))) - ( (Float)(iconOffset) ))));
HXLINE(1980)		 ::HealthIcon _hx_tmp10 = this->iconP2;
HXDLIN(1980)		Float _hx_tmp11 = this->healthBar->x;
HXDLIN(1980)		Float _hx_tmp12 = this->healthBar->get_width();
HXDLIN(1980)		Float _hx_tmp13 = (_hx_tmp11 + (_hx_tmp12 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))));
HXDLIN(1980)		_hx_tmp10->set_x((_hx_tmp13 - (this->iconP2->get_width() - ( (Float)(iconOffset) ))));
HXLINE(1982)		if ((this->health > 2)) {
HXLINE(1983)			this->health = ( (Float)(2) );
            		}
HXLINE(1984)		if ((this->healthBar->get_percent() < 20)) {
HXLINE(1985)			this->iconP1->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(1987)			this->iconP1->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(1989)		if ((this->healthBar->get_percent() > 80)) {
HXLINE(1990)			this->iconP2->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(1992)			this->iconP2->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(1997)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1997)		if (_this3->keyManager->checkStatus(56,_this3->status)) {
HXLINE(1999)			{
HXLINE(1999)				 ::flixel::FlxState nextState =  ::AnimationDebug_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXDLIN(1999)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1999)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(2001)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2003)				::PlayState_obj::luaModchart->die();
HXLINE(2004)				::PlayState_obj::luaModchart = null();
            			}
            		}
HXLINE(2008)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2008)		if (_this4->keyManager->checkStatus(48,_this4->status)) {
HXLINE(2010)			{
HXLINE(2010)				 ::flixel::FlxState nextState =  ::AnimationDebug_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXDLIN(2010)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2010)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(2012)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2014)				::PlayState_obj::luaModchart->die();
HXLINE(2015)				::PlayState_obj::luaModchart = null();
            			}
            		}
HXLINE(2019)		if (this->startingSong) {
HXLINE(2021)			if (this->startedCountdown) {
HXLINE(2023)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(2023)				::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(2024)				if ((::Conductor_obj::songPosition >= 0)) {
HXLINE(2025)					this->startSong();
            				}
            			}
            		}
            		else {
HXLINE(2031)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(2031)			::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(2036)			this->songPositionBar = ::Conductor_obj::songPosition;
HXLINE(2038)			if (!(this->paused)) {
HXLINE(2040)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2040)				_hx_tmp->songTime = (_hx_tmp->songTime + (::flixel::FlxG_obj::game->ticks - this->previousFrameTime));
HXLINE(2041)				this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(2044)				if ((::Conductor_obj::lastSongPos != ::Conductor_obj::songPosition)) {
HXLINE(2046)					this->songTime = ((this->songTime + ::Conductor_obj::songPosition) / ( (Float)(2) ));
HXLINE(2047)					::Conductor_obj::lastSongPos = ::Conductor_obj::songPosition;
            				}
            			}
            		}
HXLINE(2056)		bool _hx_tmp14;
HXDLIN(2056)		if (this->generatedMusic) {
HXLINE(2056)			_hx_tmp14 = ::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) )))) );
            		}
            		else {
HXLINE(2056)			_hx_tmp14 = false;
            		}
HXDLIN(2056)		if (_hx_tmp14) {
HXLINE(2059)			if (this->allowedToHeadbang) {
HXLINE(2062)				bool _hx_tmp;
HXDLIN(2062)				bool _hx_tmp1;
HXDLIN(2062)				if ((::PlayState_obj::gf->animation->_curAnim->name != HX_("danceLeft",da,cc,f9,df))) {
HXLINE(2062)					_hx_tmp1 = (::PlayState_obj::gf->animation->_curAnim->name == HX_("danceRight",a9,7f,a6,91));
            				}
            				else {
HXLINE(2062)					_hx_tmp1 = true;
            				}
HXDLIN(2062)				if (!(_hx_tmp1)) {
HXLINE(2062)					_hx_tmp = (::PlayState_obj::gf->animation->_curAnim->name == HX_("idle",14,a7,b3,45));
            				}
            				else {
HXLINE(2062)					_hx_tmp = true;
            				}
HXDLIN(2062)				if (_hx_tmp) {
HXLINE(2065)					::String _hx_switch_0 = this->curSong;
            					if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ){
HXLINE(2104)						bool _hx_tmp;
HXDLIN(2104)						if ((this->curBeat > 30)) {
HXLINE(2104)							_hx_tmp = (this->curBeat < 190);
            						}
            						else {
HXLINE(2104)							_hx_tmp = false;
            						}
HXDLIN(2104)						if (_hx_tmp) {
HXLINE(2106)							bool _hx_tmp;
HXDLIN(2106)							if ((this->curBeat >= 90)) {
HXLINE(2106)								_hx_tmp = (this->curBeat > 128);
            							}
            							else {
HXLINE(2106)								_hx_tmp = true;
            							}
HXDLIN(2106)							if (_hx_tmp) {
HXLINE(2108)								if ((::hx::Mod(this->curBeat,4) == 2)) {
HXLINE(2110)									if (!(this->triggeredAlready)) {
HXLINE(2112)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2113)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2115)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2104)						goto _hx_goto_71;
            					}
            					if (  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ){
HXLINE(2090)						bool _hx_tmp;
HXDLIN(2090)						if ((this->curBeat > 5)) {
HXLINE(2090)							_hx_tmp = (this->curBeat < 130);
            						}
            						else {
HXLINE(2090)							_hx_tmp = false;
            						}
HXDLIN(2090)						if (_hx_tmp) {
HXLINE(2092)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(2094)								if (!(this->triggeredAlready)) {
HXLINE(2096)									::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2097)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(2099)								this->triggeredAlready = false;
            							}
            						}
HXLINE(2090)						goto _hx_goto_71;
            					}
            					if (  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ){
HXLINE(2121)						if ((this->curBeat < 170)) {
HXLINE(2123)							bool _hx_tmp;
HXDLIN(2123)							if ((this->curBeat >= 65)) {
HXLINE(2123)								if ((this->curBeat > 130)) {
HXLINE(2123)									_hx_tmp = (this->curBeat < 145);
            								}
            								else {
HXLINE(2123)									_hx_tmp = false;
            								}
            							}
            							else {
HXLINE(2123)								_hx_tmp = true;
            							}
HXDLIN(2123)							if (_hx_tmp) {
HXLINE(2125)								if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(2127)									if (!(this->triggeredAlready)) {
HXLINE(2129)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2130)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2132)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2121)						goto _hx_goto_71;
            					}
            					if (  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ){
HXLINE(2138)						bool _hx_tmp;
HXDLIN(2138)						bool _hx_tmp1;
HXDLIN(2138)						if ((this->curBeat > 10)) {
HXLINE(2138)							_hx_tmp1 = (this->curBeat != 111);
            						}
            						else {
HXLINE(2138)							_hx_tmp1 = false;
            						}
HXDLIN(2138)						if (_hx_tmp1) {
HXLINE(2138)							_hx_tmp = (this->curBeat < 220);
            						}
            						else {
HXLINE(2138)							_hx_tmp = false;
            						}
HXDLIN(2138)						if (_hx_tmp) {
HXLINE(2140)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(2142)								if (!(this->triggeredAlready)) {
HXLINE(2144)									::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2145)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(2147)								this->triggeredAlready = false;
            							}
            						}
HXLINE(2138)						goto _hx_goto_71;
            					}
            					if (  (_hx_switch_0==HX_("Philly",48,eb,f2,23)) ){
HXLINE(2070)						if ((this->curBeat < 250)) {
HXLINE(2073)							bool _hx_tmp;
HXDLIN(2073)							if ((this->curBeat != 184)) {
HXLINE(2073)								_hx_tmp = (this->curBeat != 216);
            							}
            							else {
HXLINE(2073)								_hx_tmp = false;
            							}
HXDLIN(2073)							if (_hx_tmp) {
HXLINE(2075)								if ((::hx::Mod(this->curBeat,16) == 8)) {
HXLINE(2078)									if (!(this->triggeredAlready)) {
HXLINE(2080)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2081)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2083)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2070)						goto _hx_goto_71;
            					}
            					_hx_goto_71:;
            				}
            			}
HXLINE(2154)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2155)				 ::ModchartState _hx_tmp = ::PlayState_obj::luaModchart;
HXDLIN(2155)				_hx_tmp->setVar(HX_("mustHit",ca,3b,5d,00), ::Dynamic( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)));
            			}
HXLINE(2157)			bool _hx_tmp;
HXDLIN(2157)			Float _hx_tmp1 = this->camFollow->x;
HXDLIN(2157)			if ((_hx_tmp1 != (::PlayState_obj::dad->getMidpoint(null())->x + 150))) {
HXLINE(2157)				_hx_tmp = !(( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(2157)				_hx_tmp = false;
            			}
HXDLIN(2157)			if (_hx_tmp) {
HXLINE(2159)				int offsetX = 0;
HXLINE(2160)				int offsetY = 0;
HXLINE(2162)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2164)					offsetX = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followXOffset",ba,cc,46,b7),HX_("float",9c,c5,96,02))) );
HXLINE(2165)					offsetY = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followYOffset",7b,43,dc,e0),HX_("float",9c,c5,96,02))) );
            				}
HXLINE(2168)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2168)				Float _hx_tmp1 = ((::PlayState_obj::dad->getMidpoint(null())->x + 150) + offsetX);
HXDLIN(2168)				_hx_tmp->setPosition(_hx_tmp1,((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(100) )) + offsetY));
HXLINE(2170)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2171)					::PlayState_obj::luaModchart->executeState(HX_("playerTwoTurn",c8,15,04,05),::cpp::VirtualArray_obj::__new(0));
            				}
HXLINE(2175)				::String _hx_switch_1 = ::PlayState_obj::dad->curCharacter;
            				if (  (_hx_switch_1==HX_("mom",cb,16,53,00)) ){
HXLINE(2178)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2178)					_hx_tmp->set_y(::PlayState_obj::dad->getMidpoint(null())->y);
HXDLIN(2178)					goto _hx_goto_72;
            				}
            				if (  (_hx_switch_1==HX_("senpai",3c,df,8d,6b)) ){
HXLINE(2180)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2180)					_hx_tmp->set_y((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(430) )));
HXLINE(2181)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2181)					_hx_tmp1->set_x((::PlayState_obj::dad->getMidpoint(null())->x - ( (Float)(100) )));
HXLINE(2179)					goto _hx_goto_72;
            				}
            				if (  (_hx_switch_1==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE(2183)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2183)					_hx_tmp->set_y((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(430) )));
HXLINE(2184)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2184)					_hx_tmp1->set_x((::PlayState_obj::dad->getMidpoint(null())->x - ( (Float)(100) )));
HXLINE(2182)					goto _hx_goto_72;
            				}
            				_hx_goto_72:;
HXLINE(2187)				if ((::PlayState_obj::dad->curCharacter == HX_("mom",cb,16,53,00))) {
HXLINE(2188)					this->vocals->set_volume(( (Float)(1) ));
            				}
            			}
HXLINE(2191)			bool _hx_tmp2;
HXDLIN(2191)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(2191)				Float _hx_tmp = this->camFollow->x;
HXDLIN(2191)				_hx_tmp2 = (_hx_tmp != (::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )));
            			}
            			else {
HXLINE(2191)				_hx_tmp2 = false;
            			}
HXDLIN(2191)			if (_hx_tmp2) {
HXLINE(2193)				int offsetX = 0;
HXLINE(2194)				int offsetY = 0;
HXLINE(2196)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2198)					offsetX = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followXOffset",ba,cc,46,b7),HX_("float",9c,c5,96,02))) );
HXLINE(2199)					offsetY = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followYOffset",7b,43,dc,e0),HX_("float",9c,c5,96,02))) );
            				}
HXLINE(2202)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2202)				Float _hx_tmp1 = ((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )) + offsetX);
HXDLIN(2202)				_hx_tmp->setPosition(_hx_tmp1,((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(100) )) + offsetY));
HXLINE(2204)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2205)					::PlayState_obj::luaModchart->executeState(HX_("playerOneTurn",a2,b7,e0,d9),::cpp::VirtualArray_obj::__new(0));
            				}
HXLINE(2207)				::String _hx_switch_2 = ::PlayState_obj::curStage;
            				if (  (_hx_switch_2==HX_("limo",1f,17,b3,47)) ){
HXLINE(2210)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2210)					_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(300) )));
HXDLIN(2210)					goto _hx_goto_73;
            				}
            				if (  (_hx_switch_2==HX_("mall",d4,3a,56,48)) ){
HXLINE(2212)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2212)					_hx_tmp->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXDLIN(2212)					goto _hx_goto_73;
            				}
            				if (  (_hx_switch_2==HX_("school",74,b8,c8,40)) ){
HXLINE(2214)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2214)					_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(2215)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2215)					_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(2213)					goto _hx_goto_73;
            				}
            				if (  (_hx_switch_2==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE(2217)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2217)					_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(2218)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2218)					_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(2216)					goto _hx_goto_73;
            				}
            				_hx_goto_73:;
            			}
            		}
HXLINE(2223)		if (this->camZooming) {
HXLINE(2225)			Float a = this->defaultCamZoom;
HXDLIN(2225)			::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE(2226)			this->camHUD->set_zoom((1 + (((Float)0.95) * (this->camHUD->zoom - ( (Float)(1) )))));
            		}
HXLINE(2232)		if ((this->curSong == HX_("Fresh",4e,f6,b3,99))) {
HXLINE(2234)			switch((int)(this->curBeat)){
            				case (int)16: {
HXLINE(2237)					this->camZooming = true;
HXLINE(2238)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)48: {
HXLINE(2240)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)80: {
HXLINE(2242)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)112: {
HXLINE(2244)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)163: {
            				}
            				break;
            			}
            		}
HXLINE(2251)		if ((this->curSong == HX_("Bopeebo",90,29,16,da))) {
HXLINE(2253)			switch((int)(this->curBeat)){
            				case (int)128: case (int)129: case (int)130: {
HXLINE(2256)					this->vocals->set_volume(( (Float)(0) ));
            				}
            				break;
            			}
            		}
HXLINE(2262)		if ((this->health <= 0)) {
HXLINE(2264)			::PlayState_obj::boyfriend->stunned = true;
HXLINE(2266)			this->persistentUpdate = false;
HXLINE(2267)			this->persistentDraw = false;
HXLINE(2268)			this->paused = true;
HXLINE(2270)			{
HXLINE(2270)				 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2270)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(2271)			{
HXLINE(2271)				 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2271)				_this1->cleanup(_this1->autoDestroy,true);
            			}
HXLINE(2273)			Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2273)			this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            		}
HXLINE(2282)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("resetButton",21,e5,f4,79),::hx::paccDynamic)) )) {
HXLINE(2284)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2284)			if (_this->keyManager->checkStatus(82,_this->status)) {
HXLINE(2286)				::PlayState_obj::boyfriend->stunned = true;
HXLINE(2288)				this->persistentUpdate = false;
HXLINE(2289)				this->persistentDraw = false;
HXLINE(2290)				this->paused = true;
HXLINE(2292)				{
HXLINE(2292)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2292)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2293)				{
HXLINE(2293)					 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2293)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(2295)				Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2295)				this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            			}
            		}
HXLINE(2306)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::Note >() )) {
HXLINE(2308)			if (((this->unspawnNotes->__get(0).StaticCast<  ::Note >()->strumTime - ::Conductor_obj::songPosition) < 3500)) {
HXLINE(2310)				 ::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::Note >();
HXLINE(2311)				this->notes->add(dunceNote).StaticCast<  ::Note >();
HXLINE(2313)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE(2314)				this->unspawnNotes->removeRange(index,1);
            			}
            		}
HXLINE(2318)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2321_update)
HXLINE(2325)				if (daNote->tooLate) {
HXLINE(2327)					daNote->set_active(false);
HXLINE(2328)					daNote->set_visible(false);
            				}
            				else {
HXLINE(2332)					daNote->set_visible(true);
HXLINE(2333)					daNote->set_active(true);
            				}
HXLINE(2336)				if (!(daNote->modifiedByLua)) {
HXLINE(2338)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(2340)						if (daNote->mustPress) {
HXLINE(2341)							 ::Note daNote1 = daNote;
HXDLIN(2341)							Float _hx_tmp = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y;
HXDLIN(2341)							Float _hx_tmp1 = (((Float)0.45) * (::Conductor_obj::songPosition - daNote->strumTime));
HXDLIN(2341)							Float _hx_tmp2;
HXDLIN(2341)							if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic),1 )) {
HXLINE(2341)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2341)								_hx_tmp2 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)) );
            							}
HXDLIN(2341)							daNote1->set_y((_hx_tmp + (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2))));
            						}
            						else {
HXLINE(2343)							 ::Note daNote1 = daNote;
HXDLIN(2343)							Float _hx_tmp = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y;
HXDLIN(2343)							Float _hx_tmp1 = (((Float)0.45) * (::Conductor_obj::songPosition - daNote->strumTime));
HXDLIN(2343)							Float _hx_tmp2;
HXDLIN(2343)							if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic),1 )) {
HXLINE(2343)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2343)								_hx_tmp2 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)) );
            							}
HXDLIN(2343)							daNote1->set_y((_hx_tmp + (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2))));
            						}
HXLINE(2344)						if (daNote->isSustainNote) {
HXLINE(2347)							bool _hx_tmp;
HXDLIN(2347)							if (::StringTools_obj::endsWith(daNote->animation->_curAnim->name,HX_("end",db,03,4d,00))) {
HXLINE(2347)								_hx_tmp = ::hx::IsNotNull( daNote->prevNote );
            							}
            							else {
HXLINE(2347)								_hx_tmp = false;
            							}
HXDLIN(2347)							if (_hx_tmp) {
HXLINE(2348)								 ::Note daNote1 = daNote;
HXDLIN(2348)								Float daNote2 = daNote->y;
HXDLIN(2348)								daNote1->set_y((daNote2 + daNote->prevNote->get_height()));
            							}
            							else {
HXLINE(2350)								 ::Note daNote1 = daNote;
HXDLIN(2350)								Float daNote2 = daNote->y;
HXDLIN(2350)								daNote1->set_y((daNote2 + (daNote->get_height() / ( (Float)(2) ))));
            							}
HXLINE(2353)							if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) ))) {
HXLINE(2355)								bool _hx_tmp;
HXDLIN(2355)								bool _hx_tmp1;
HXDLIN(2355)								bool _hx_tmp2;
HXDLIN(2355)								if (daNote->mustPress) {
HXLINE(2355)									_hx_tmp2 = daNote->wasGoodHit;
            								}
            								else {
HXLINE(2355)									_hx_tmp2 = true;
            								}
HXDLIN(2355)								if (!(_hx_tmp2)) {
HXLINE(2355)									if (daNote->prevNote->wasGoodHit) {
HXLINE(2355)										_hx_tmp1 = !(daNote->canBeHit);
            									}
            									else {
HXLINE(2355)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE(2355)									_hx_tmp1 = true;
            								}
HXDLIN(2355)								if (_hx_tmp1) {
HXLINE(2355)									Float _hx_tmp1 = (daNote->y - (daNote->offset->y * daNote->scale->y));
HXDLIN(2355)									Float _hx_tmp2 = (_hx_tmp1 + daNote->get_height());
HXDLIN(2355)									_hx_tmp = (_hx_tmp2 >= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            								}
            								else {
HXLINE(2355)									_hx_tmp = false;
            								}
HXDLIN(2355)								if (_hx_tmp) {
HXLINE(2358)									 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,(daNote->frameWidth * 2),(daNote->frameHeight * 2));
HXLINE(2359)									swagRect->height = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(2360)									swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(2362)									daNote->set_clipRect(swagRect);
            								}
            							}
            							else {
HXLINE(2365)								 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,(daNote->frameWidth * 2),(daNote->frameHeight * 2));
HXLINE(2366)								swagRect->height = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(2367)								swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(2369)								daNote->set_clipRect(swagRect);
            							}
            						}
            					}
            					else {
HXLINE(2374)						if (daNote->mustPress) {
HXLINE(2375)							 ::Note daNote1 = daNote;
HXDLIN(2375)							Float _hx_tmp = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y;
HXDLIN(2375)							Float _hx_tmp1 = (((Float)0.45) * (::Conductor_obj::songPosition - daNote->strumTime));
HXDLIN(2375)							Float _hx_tmp2;
HXDLIN(2375)							if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic),1 )) {
HXLINE(2375)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2375)								_hx_tmp2 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)) );
            							}
HXDLIN(2375)							daNote1->set_y((_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2))));
            						}
            						else {
HXLINE(2377)							 ::Note daNote1 = daNote;
HXDLIN(2377)							Float _hx_tmp = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y;
HXDLIN(2377)							Float _hx_tmp1 = (((Float)0.45) * (::Conductor_obj::songPosition - daNote->strumTime));
HXDLIN(2377)							Float _hx_tmp2;
HXDLIN(2377)							if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic),1 )) {
HXLINE(2377)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2377)								_hx_tmp2 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)) );
            							}
HXDLIN(2377)							daNote1->set_y((_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2))));
            						}
HXLINE(2378)						if (daNote->isSustainNote) {
HXLINE(2380)							 ::Note daNote1 = daNote;
HXDLIN(2380)							Float daNote2 = daNote->y;
HXDLIN(2380)							daNote1->set_y((daNote2 - (daNote->get_height() / ( (Float)(2) ))));
HXLINE(2382)							if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) ))) {
HXLINE(2384)								bool _hx_tmp;
HXDLIN(2384)								bool _hx_tmp1;
HXDLIN(2384)								bool _hx_tmp2;
HXDLIN(2384)								if (daNote->mustPress) {
HXLINE(2384)									_hx_tmp2 = daNote->wasGoodHit;
            								}
            								else {
HXLINE(2384)									_hx_tmp2 = true;
            								}
HXDLIN(2384)								if (!(_hx_tmp2)) {
HXLINE(2384)									if (daNote->prevNote->wasGoodHit) {
HXLINE(2384)										_hx_tmp1 = !(daNote->canBeHit);
            									}
            									else {
HXLINE(2384)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE(2384)									_hx_tmp1 = true;
            								}
HXDLIN(2384)								if (_hx_tmp1) {
HXLINE(2384)									_hx_tmp = ((daNote->y + (daNote->offset->y * daNote->scale->y)) <= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            								}
            								else {
HXLINE(2384)									_hx_tmp = false;
            								}
HXDLIN(2384)								if (_hx_tmp) {
HXLINE(2387)									Float swagRect = daNote->get_width();
HXDLIN(2387)									Float swagRect1 = (swagRect / daNote->scale->x);
HXDLIN(2387)									Float swagRect2 = daNote->get_height();
HXDLIN(2387)									 ::flixel::math::FlxRect swagRect3 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect1,(swagRect2 / daNote->scale->y));
HXLINE(2388)									swagRect3->y = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(2389)									 ::flixel::math::FlxRect swagRect4 = swagRect3;
HXDLIN(2389)									swagRect4->height = (swagRect4->height - swagRect3->y);
HXLINE(2391)									daNote->set_clipRect(swagRect3);
            								}
            							}
            							else {
HXLINE(2394)								Float swagRect = daNote->get_width();
HXDLIN(2394)								Float swagRect1 = (swagRect / daNote->scale->x);
HXDLIN(2394)								Float swagRect2 = daNote->get_height();
HXDLIN(2394)								 ::flixel::math::FlxRect swagRect3 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect1,(swagRect2 / daNote->scale->y));
HXLINE(2395)								swagRect3->y = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(2396)								 ::flixel::math::FlxRect swagRect4 = swagRect3;
HXDLIN(2396)								swagRect4->height = (swagRect4->height - swagRect3->y);
HXLINE(2398)								daNote->set_clipRect(swagRect3);
            							}
            						}
            					}
            				}
HXLINE(2405)				bool _hx_tmp;
HXDLIN(2405)				if (!(daNote->mustPress)) {
HXLINE(2405)					_hx_tmp = daNote->wasGoodHit;
            				}
            				else {
HXLINE(2405)					_hx_tmp = false;
            				}
HXDLIN(2405)				if (_hx_tmp) {
HXLINE(2407)					if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Tutorial",be,4b,67,5c) )) {
HXLINE(2408)						_gthis->camZooming = true;
            					}
HXLINE(2410)					::String altAnim = HX_("",00,00,00,00);
HXLINE(2412)					if (::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(_gthis->curStep) ) / ( (Float)(16) )))) )) {
HXLINE(2414)						if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(_gthis->curStep) ) / ( (Float)(16) ))))->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) )) {
HXLINE(2415)							altAnim = HX_("-alt",1c,93,08,1e);
            						}
            					}
HXLINE(2418)					Float _hx_switch_3 = ::Math_obj::abs(( (Float)(daNote->noteData) ));
            					if (  (_hx_switch_3==( (Float)(0) )) ){
HXLINE(2427)						::PlayState_obj::dad->playAnim((HX_("singLEFT",d6,39,ef,3b) + altAnim),true,null(),null());
HXDLIN(2427)						goto _hx_goto_74;
            					}
            					if (  (_hx_switch_3==( (Float)(1) )) ){
HXLINE(2425)						::PlayState_obj::dad->playAnim((HX_("singDOWN",31,2a,ad,36) + altAnim),true,null(),null());
HXDLIN(2425)						goto _hx_goto_74;
            					}
            					if (  (_hx_switch_3==( (Float)(2) )) ){
HXLINE(2421)						::PlayState_obj::dad->playAnim((HX_("singUP",6a,52,21,b9) + altAnim),true,null(),null());
HXDLIN(2421)						goto _hx_goto_74;
            					}
            					if (  (_hx_switch_3==( (Float)(3) )) ){
HXLINE(2423)						::PlayState_obj::dad->playAnim((HX_("singRIGHT",0d,6f,70,ac) + altAnim),true,null(),null());
HXDLIN(2423)						goto _hx_goto_74;
            					}
            					_hx_goto_74:;
HXLINE(2430)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Note,daNote) HXARGC(1)
            						void _hx_run( ::flixel::FlxSprite spr){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2433_update)
HXLINE(2434)							if ((::Math_obj::abs(( (Float)(daNote->noteData) )) == spr->ID)) {
HXLINE(2436)								spr->animation->play(HX_("confirm",00,9d,39,10),true,null(),null());
            							}
HXLINE(2438)							bool _hx_tmp;
HXDLIN(2438)							if ((spr->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(2438)								_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)));
            							}
            							else {
HXLINE(2438)								_hx_tmp = false;
            							}
HXDLIN(2438)							if (_hx_tmp) {
HXLINE(2440)								spr->centerOffsets(null());
HXLINE(2441)								 ::flixel::math::FlxPoint fh = spr->offset;
HXDLIN(2441)								fh->set_x((fh->x - ( (Float)(13) )));
HXLINE(2442)								 ::flixel::math::FlxPoint fh1 = spr->offset;
HXDLIN(2442)								fh1->set_y((fh1->y - ( (Float)(13) )));
            							}
            							else {
HXLINE(2445)								spr->centerOffsets(null());
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(2432)						::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_0(daNote)),null());
            					}
HXLINE(2449)					if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2450)						::PlayState_obj::luaModchart->executeState(HX_("playerTwoSing",9a,c0,51,04),::cpp::VirtualArray_obj::__new(2)->init(0,::Math_obj::abs(( (Float)(daNote->noteData) )))->init(1,::Conductor_obj::songPosition));
            					}
HXLINE(2452)					::PlayState_obj::dad->holdTimer = ( (Float)(0) );
HXLINE(2454)					if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(2455)						_gthis->vocals->set_volume(( (Float)(1) ));
            					}
HXLINE(2457)					daNote->set_active(false);
HXLINE(2460)					daNote->kill();
HXLINE(2461)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(2462)					daNote->destroy();
            				}
HXLINE(2465)				bool _hx_tmp1;
HXDLIN(2465)				if (daNote->mustPress) {
HXLINE(2465)					_hx_tmp1 = !(daNote->modifiedByLua);
            				}
            				else {
HXLINE(2465)					_hx_tmp1 = false;
            				}
HXDLIN(2465)				if (_hx_tmp1) {
HXLINE(2467)					daNote->set_visible(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->visible);
HXLINE(2468)					daNote->set_x(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->x);
HXLINE(2469)					if (!(daNote->isSustainNote)) {
HXLINE(2470)						daNote->set_angle(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->angle);
            					}
HXLINE(2471)					daNote->set_alpha(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->alpha);
            				}
            				else {
HXLINE(2473)					bool _hx_tmp;
HXDLIN(2473)					if (!(daNote->wasGoodHit)) {
HXLINE(2473)						_hx_tmp = !(daNote->modifiedByLua);
            					}
            					else {
HXLINE(2473)						_hx_tmp = false;
            					}
HXDLIN(2473)					if (_hx_tmp) {
HXLINE(2475)						daNote->set_visible(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->visible);
HXLINE(2476)						daNote->set_x(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->x);
HXLINE(2477)						if (!(daNote->isSustainNote)) {
HXLINE(2478)							daNote->set_angle(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->angle);
            						}
HXLINE(2479)						daNote->set_alpha(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->alpha);
            					}
            				}
HXLINE(2484)				if (daNote->isSustainNote) {
HXLINE(2485)					 ::Note daNote1 = daNote;
HXDLIN(2485)					Float daNote2 = daNote->x;
HXDLIN(2485)					daNote1->set_x((daNote2 + ((daNote->get_width() / ( (Float)(2) )) + 17)));
            				}
HXLINE(2492)				bool _hx_tmp2;
HXDLIN(2492)				bool _hx_tmp3;
HXDLIN(2492)				bool _hx_tmp4;
HXDLIN(2492)				bool _hx_tmp5;
HXDLIN(2492)				if (daNote->mustPress) {
HXLINE(2492)					_hx_tmp5 = daNote->tooLate;
            				}
            				else {
HXLINE(2492)					_hx_tmp5 = false;
            				}
HXDLIN(2492)				if (_hx_tmp5) {
HXLINE(2492)					_hx_tmp4 = !(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) ));
            				}
            				else {
HXLINE(2492)					_hx_tmp4 = false;
            				}
HXDLIN(2492)				if (!(_hx_tmp4)) {
HXLINE(2492)					bool _hx_tmp;
HXDLIN(2492)					if (daNote->mustPress) {
HXLINE(2492)						_hx_tmp = daNote->tooLate;
            					}
            					else {
HXLINE(2492)						_hx_tmp = false;
            					}
HXDLIN(2492)					if (_hx_tmp) {
HXLINE(2492)						_hx_tmp3 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) );
            					}
            					else {
HXLINE(2492)						_hx_tmp3 = false;
            					}
            				}
            				else {
HXLINE(2492)					_hx_tmp3 = true;
            				}
HXDLIN(2492)				if (_hx_tmp3) {
HXLINE(2492)					_hx_tmp2 = daNote->mustPress;
            				}
            				else {
HXLINE(2492)					_hx_tmp2 = false;
            				}
HXDLIN(2492)				if (_hx_tmp2) {
HXLINE(2494)					bool _hx_tmp;
HXDLIN(2494)					if (daNote->isSustainNote) {
HXLINE(2494)						_hx_tmp = daNote->wasGoodHit;
            					}
            					else {
HXLINE(2494)						_hx_tmp = false;
            					}
HXDLIN(2494)					if (_hx_tmp) {
HXLINE(2496)						daNote->kill();
HXLINE(2497)						_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
            					}
            					else {
HXLINE(2501)						 ::PlayState _gthis1 = _gthis;
HXDLIN(2501)						_gthis1->health = (_gthis1->health - ((Float)0.075));
HXLINE(2502)						_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(2503)						if (::PlayState_obj::theFunne) {
HXLINE(2504)							_gthis->noteMiss(daNote->noteData,daNote);
            						}
            					}
HXLINE(2507)					daNote->set_visible(false);
HXLINE(2508)					daNote->kill();
HXLINE(2509)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2320)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(_gthis)),null());
            		}
HXLINE(2515)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2519_update)
HXLINE(2519)				if (spr->animation->get_finished()) {
HXLINE(2521)					spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
HXLINE(2522)					spr->centerOffsets(null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2517)			::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_2()),null());
            		}
HXLINE(2527)		if (!(this->inCutscene)) {
HXLINE(2528)			this->keyShit();
            		}
            	}


void PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2538_endSong)
HXLINE(2540)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic),290 )) {
HXLINE(2541)			::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(290) ));
            		}
HXLINE(2543)		if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2545)			::PlayState_obj::luaModchart->die();
HXLINE(2546)			::PlayState_obj::luaModchart = null();
            		}
HXLINE(2549)		this->canPause = false;
HXLINE(2550)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(2551)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(2552)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(2555)			::Highscore_obj::saveScore(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),::Math_obj::round(( (Float)(this->songScore) )),::PlayState_obj::storyDifficulty);
            		}
HXLINE(2559)		if (::PlayState_obj::offsetTesting) {
HXLINE(2561)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2561)			::String library = null();
HXDLIN(2561)			_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(2562)			::PlayState_obj::offsetTesting = false;
HXLINE(2563)			{
HXLINE(2563)				 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::OptionsMenu_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(2563)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2563)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(2564)			::flixel::FlxG_obj::save->data->__SetField(HX_("offset",93,97,3f,60),this->offsetTest,::hx::paccDynamic);
            		}
            		else {
HXLINE(2568)			if (::PlayState_obj::isStoryMode) {
HXLINE(2570)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN(2570)				::PlayState_obj::campaignScore = (::PlayState_obj::campaignScore + ::Math_obj::round(( (Float)(this->songScore) )));
HXLINE(2572)				::PlayState_obj::storyPlaylist->remove(::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2574)				if ((::PlayState_obj::storyPlaylist->length <= 0)) {
HXLINE(2577)					{
HXLINE(2577)						 ::flixel::FlxState nextState =  ::VideoState_obj::__alloc( HX_CTX ,HX_("assets/videos/basementoutro.webm",56,b7,5c,79), ::MainMenuState_obj::__alloc( HX_CTX ,null(),null()),null(),null());
HXDLIN(2577)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2577)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
HXLINE(2578)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2578)					::String library = null();
HXDLIN(2578)					_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(2580)					this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(2581)					this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(2583)					{
HXLINE(2583)						 ::flixel::FlxState nextState1 =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2583)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE(2583)							::flixel::FlxG_obj::game->_requestedState = nextState1;
            						}
            					}
HXLINE(2585)					if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2587)						::PlayState_obj::luaModchart->die();
HXLINE(2588)						::PlayState_obj::luaModchart = null();
            					}
HXLINE(2592)					::StoryMenuState_obj::weekUnlocked[::Std_obj::_hx_int(::Math_obj::min(( (Float)((::PlayState_obj::storyWeek + 1)) ),( (Float)((::StoryMenuState_obj::weekUnlocked->length - 1)) )))] = true;
HXLINE(2594)					if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(2597)						::Highscore_obj::saveWeekScore(::PlayState_obj::storyWeek,::PlayState_obj::campaignScore,::PlayState_obj::storyDifficulty);
            					}
HXLINE(2600)					::flixel::FlxG_obj::save->data->__SetField(HX_("weekUnlocked",37,64,c4,a5),::StoryMenuState_obj::weekUnlocked,::hx::paccDynamic);
HXLINE(2601)					::flixel::FlxG_obj::save->flush(null(),null());
            				}
            				else {
HXLINE(2605)					::String difficulty = HX_("",00,00,00,00);
HXLINE(2607)					if ((::PlayState_obj::storyDifficulty == 0)) {
HXLINE(2608)						difficulty = HX_("-easy",af,a6,14,2c);
            					}
HXLINE(2610)					if ((::PlayState_obj::storyDifficulty == 2)) {
HXLINE(2611)						difficulty = HX_("-hard",98,49,10,2e);
            					}
HXLINE(2613)					::haxe::Log_obj::trace(HX_("LOADING NEXT SONG",5e,07,d0,ca),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2613,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(2614)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(2614)					::String _hx_tmp1 = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + difficulty);
HXDLIN(2614)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2614,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(2616)					if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("eggnog",61,04,ba,f4))) {
HXLINE(2618)						 ::flixel::FlxSprite blackShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(-(::flixel::FlxG_obj::width)) ) * ::flixel::FlxG_obj::camera->zoom),(( (Float)(-(::flixel::FlxG_obj::height)) ) * ::flixel::FlxG_obj::camera->zoom),null());
HXDLIN(2618)						 ::flixel::FlxSprite blackShit1 = blackShit->makeGraphic((::flixel::FlxG_obj::width * 3),(::flixel::FlxG_obj::height * 3),-16777216,null(),null());
HXLINE(2620)						blackShit1->scrollFactor->set(null(),null());
HXLINE(2621)						this->add(blackShit1);
HXLINE(2622)						this->camHUD->set_visible(false);
HXLINE(2624)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2624)						_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Shut_off",86,a9,43,29),null()),null(),null(),null(),null(),null());
            					}
HXLINE(2627)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(2628)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(2629)					::PlayState_obj::prevCamFollow = this->camFollow;
HXLINE(2631)					::String _hx_tmp2 = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + difficulty);
HXDLIN(2631)					::PlayState_obj::SONG = ::Song_obj::loadFromJson(_hx_tmp2,::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2632)					{
HXLINE(2632)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2632)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(2634)					{
HXLINE(2634)						 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(2634)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2634)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
            			}
            			else {
HXLINE(2639)				::haxe::Log_obj::trace(HX_("WENT BACK TO FREEPLAY??",58,1b,be,6a),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2639,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(2640)				{
HXLINE(2640)					 ::flixel::FlxState nextState =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2640)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2640)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,(void))

void PlayState_obj::popUpScore( ::Note daNote){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2655_popUpScore)
HXDLIN(2655)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2656)		Float noteDiff = ::Math_obj::abs((::Conductor_obj::songPosition - daNote->strumTime));
HXLINE(2657)		Float wife = ::EtternaFunctions_obj::wife3(noteDiff,::Conductor_obj::timeScale);
HXLINE(2659)		this->vocals->set_volume(( (Float)(1) ));
HXLINE(2661)		::String placement = ::Std_obj::string(this->combo);
HXLINE(2663)		 ::flixel::text::FlxText coolText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,placement,32,null());
HXLINE(2664)		coolText->screenCenter(null());
HXLINE(2665)		coolText->set_x((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.55)));
HXLINE(2666)		coolText->set_y((coolText->y - ( (Float)(350) )));
HXLINE(2667)		coolText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2670)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(2671)		Float score = ( (Float)(350) );
HXLINE(2673)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),1 )) {
HXLINE(2674)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2674)			_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + wife);
            		}
HXLINE(2676)		::String daRating = daNote->rating;
HXLINE(2678)		::String _hx_switch_0 = daRating;
            		if (  (_hx_switch_0==HX_("bad",c5,b1,4a,00)) ){
HXLINE(2690)			daRating = HX_("bad",c5,b1,4a,00);
HXLINE(2691)			score = ( (Float)(0) );
HXLINE(2692)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2692)			_hx_tmp->health = (_hx_tmp->health - ((Float)0.06));
HXLINE(2693)			this->ss = false;
HXLINE(2694)			::PlayState_obj::bads++;
HXLINE(2695)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(2696)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2696)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.50));
            			}
HXLINE(2689)			goto _hx_goto_80;
            		}
            		if (  (_hx_switch_0==HX_("good",3d,95,69,44)) ){
HXLINE(2698)			daRating = HX_("good",3d,95,69,44);
HXLINE(2699)			score = ( (Float)(200) );
HXLINE(2700)			this->ss = false;
HXLINE(2701)			::PlayState_obj::goods++;
HXLINE(2702)			if ((this->health < 2)) {
HXLINE(2703)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2703)				_hx_tmp->health = (_hx_tmp->health + ((Float)0.04));
            			}
HXLINE(2704)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(2705)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2705)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.75));
            			}
HXLINE(2697)			goto _hx_goto_80;
            		}
            		if (  (_hx_switch_0==HX_("shit",c0,cf,52,4c)) ){
HXLINE(2681)			score = ( (Float)(-300) );
HXLINE(2682)			this->combo = 0;
HXLINE(2683)			::PlayState_obj::misses++;
HXLINE(2684)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2684)			_hx_tmp->health = (_hx_tmp->health - ((Float)0.2));
HXLINE(2685)			this->ss = false;
HXLINE(2686)			::PlayState_obj::shits++;
HXLINE(2687)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(2688)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2688)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.25));
            			}
HXLINE(2680)			goto _hx_goto_80;
            		}
            		if (  (_hx_switch_0==HX_("sick",be,8c,53,4c)) ){
HXLINE(2707)			if ((this->health < 2)) {
HXLINE(2708)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2708)				_hx_tmp->health = (_hx_tmp->health + ((Float)0.1));
            			}
HXLINE(2709)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(2710)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2710)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            			}
HXLINE(2711)			::PlayState_obj::sicks++;
HXLINE(2706)			goto _hx_goto_80;
            		}
            		_hx_goto_80:;
HXLINE(2716)		bool _hx_tmp;
HXDLIN(2716)		if ((daRating == HX_("shit",c0,cf,52,4c))) {
HXLINE(2716)			_hx_tmp = (daRating != HX_("bad",c5,b1,4a,00));
            		}
            		else {
HXLINE(2716)			_hx_tmp = true;
            		}
HXDLIN(2716)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2902_popUpScore)
HXLINE(2903)				if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(2904)					 ::flixel::text::FlxText fh = _gthis->currentTimingShown;
HXDLIN(2904)					fh->set_alpha((fh->alpha - ((Float)0.02)));
            				}
HXLINE(2905)				_gthis->timeShown++;
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::text::FlxText,coolText, ::flixel::FlxSprite,comboSpr1, ::flixel::FlxSprite,rating) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2911_popUpScore)
HXLINE(2912)				coolText->destroy();
HXLINE(2913)				comboSpr1->destroy();
HXLINE(2914)				bool _hx_tmp;
HXDLIN(2914)				if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(2914)					_hx_tmp = (_gthis->timeShown >= 20);
            				}
            				else {
HXLINE(2914)					_hx_tmp = false;
            				}
HXDLIN(2914)				if (_hx_tmp) {
HXLINE(2916)					_gthis->remove(_gthis->currentTimingShown,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2917)					_gthis->currentTimingShown = null();
            				}
HXLINE(2919)				rating->destroy();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2720)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2720)			_hx_tmp->songScore = (_hx_tmp->songScore + ::Math_obj::round(score));
HXLINE(2721)			 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2721)			int _hx_tmp2 = _hx_tmp1->songScoreDef;
HXDLIN(2721)			_hx_tmp1->songScoreDef = (_hx_tmp2 + ::Math_obj::round(( (Float)(::ConvertScore_obj::convertScore(noteDiff)) )));
HXLINE(2731)			::String pixelShitPart1 = HX_("",00,00,00,00);
HXLINE(2732)			::String pixelShitPart2 = HX_("",00,00,00,00);
HXLINE(2734)			if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(2736)				pixelShitPart1 = HX_("weeb/pixelUI/",79,62,e4,09);
HXLINE(2737)				pixelShitPart2 = HX_("-pixel",39,03,b3,c0);
            			}
HXLINE(2740)			 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2740)			::String library = null();
HXDLIN(2740)			rating1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + daRating) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(2741)			rating->screenCenter(null());
HXLINE(2742)			rating->set_y((rating->y - ( (Float)(50) )));
HXLINE(2743)			rating->set_x((coolText->x - ( (Float)(125) )));
HXLINE(2745)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHit",bf,5d,c0,31),::hx::paccDynamic)) )) {
HXLINE(2747)				rating->set_x(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitX",b9,a9,91,56),::hx::paccDynamic)) ));
HXLINE(2748)				rating->set_y(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitY",ba,a9,91,56),::hx::paccDynamic)) ));
            			}
HXLINE(2750)			rating->acceleration->set_y(( (Float)(550) ));
HXLINE(2751)			 ::flixel::math::FlxPoint fh = rating->velocity;
HXDLIN(2751)			Float fh1 = fh->y;
HXDLIN(2751)			fh->set_y((fh1 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,175,null())) )));
HXLINE(2752)			 ::flixel::math::FlxPoint fh2 = rating->velocity;
HXDLIN(2752)			Float fh3 = fh2->x;
HXDLIN(2752)			fh2->set_x((fh3 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(0,10,null())) )));
HXLINE(2754)			Float msTiming = ::HelperFunctions_obj::truncateFloat(noteDiff,3);
HXLINE(2755)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(2755)				msTiming = ( (Float)(0) );
            			}
HXLINE(2757)			if (::hx::IsNotNull( this->currentTimingShown )) {
HXLINE(2758)				this->remove(this->currentTimingShown,null());
            			}
HXLINE(2760)			this->currentTimingShown =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("0ms",96,cb,24,00),null(),null());
HXLINE(2761)			this->timeShown = 0;
HXLINE(2762)			::String _hx_switch_1 = daRating;
            			if (  (_hx_switch_1==HX_("good",3d,95,69,44)) ){
HXLINE(2767)				this->currentTimingShown->set_color(-16744448);
HXDLIN(2767)				goto _hx_goto_81;
            			}
            			if (  (_hx_switch_1==HX_("bad",c5,b1,4a,00)) ||  (_hx_switch_1==HX_("shit",c0,cf,52,4c)) ){
HXLINE(2765)				this->currentTimingShown->set_color(-65536);
HXDLIN(2765)				goto _hx_goto_81;
            			}
            			if (  (_hx_switch_1==HX_("sick",be,8c,53,4c)) ){
HXLINE(2769)				this->currentTimingShown->set_color(-16711681);
HXDLIN(2769)				goto _hx_goto_81;
            			}
            			_hx_goto_81:;
HXLINE(2771)			this->currentTimingShown->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE(2772)			this->currentTimingShown->set_borderSize(( (Float)(1) ));
HXLINE(2773)			this->currentTimingShown->set_borderColor(-16777216);
HXLINE(2774)			this->currentTimingShown->set_text((msTiming + HX_("ms",66,5f,00,00)));
HXLINE(2775)			this->currentTimingShown->set_size(20);
HXLINE(2777)			bool _hx_tmp3;
HXDLIN(2777)			if ((msTiming >= ((Float)0.03))) {
HXLINE(2777)				_hx_tmp3 = ::PlayState_obj::offsetTesting;
            			}
            			else {
HXLINE(2777)				_hx_tmp3 = false;
            			}
HXDLIN(2777)			if (_hx_tmp3) {
HXLINE(2780)				this->hits->shift();
HXLINE(2781)				this->hits->shift();
HXLINE(2782)				this->hits->shift();
HXLINE(2783)				this->hits->pop();
HXLINE(2784)				this->hits->pop();
HXLINE(2785)				this->hits->pop();
HXLINE(2786)				this->hits->push(msTiming);
HXLINE(2788)				Float total = ((Float)0.0);
HXLINE(2790)				{
HXLINE(2790)					int _g = 0;
HXDLIN(2790)					::Array< Float > _g1 = this->hits;
HXDLIN(2790)					while((_g < _g1->length)){
HXLINE(2790)						Float i = _g1->__get(_g);
HXDLIN(2790)						_g = (_g + 1);
HXLINE(2791)						total = (total + i);
            					}
            				}
HXLINE(2795)				this->offsetTest = ::HelperFunctions_obj::truncateFloat((total / ( (Float)(this->hits->length) )),2);
            			}
HXLINE(2798)			if ((this->currentTimingShown->alpha != 1)) {
HXLINE(2799)				this->currentTimingShown->set_alpha(( (Float)(1) ));
            			}
HXLINE(2801)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) ))) {
HXLINE(2801)				this->add(this->currentTimingShown);
            			}
HXLINE(2803)			 ::flixel::FlxSprite comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(2803)			::String library1 = null();
HXDLIN(2803)			 ::flixel::FlxSprite comboSpr1 = comboSpr->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + HX_("combo",4e,28,5d,4a)) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(2804)			comboSpr1->screenCenter(null());
HXLINE(2805)			comboSpr1->set_x(rating->x);
HXLINE(2806)			comboSpr1->set_y((rating->y + 100));
HXLINE(2807)			comboSpr1->acceleration->set_y(( (Float)(600) ));
HXLINE(2808)			 ::flixel::math::FlxPoint fh4 = comboSpr1->velocity;
HXDLIN(2808)			fh4->set_y((fh4->y - ( (Float)(150) )));
HXLINE(2810)			this->currentTimingShown->screenCenter(null());
HXLINE(2811)			this->currentTimingShown->set_x((comboSpr1->x + 100));
HXLINE(2812)			this->currentTimingShown->set_y((rating->y + 100));
HXLINE(2813)			this->currentTimingShown->acceleration->set_y(( (Float)(600) ));
HXLINE(2814)			 ::flixel::math::FlxPoint fh5 = this->currentTimingShown->velocity;
HXDLIN(2814)			fh5->set_y((fh5->y - ( (Float)(150) )));
HXLINE(2816)			 ::flixel::math::FlxPoint fh6 = comboSpr1->velocity;
HXDLIN(2816)			Float fh7 = fh6->x;
HXDLIN(2816)			fh6->set_x((fh7 + ::flixel::FlxG_obj::random->_hx_int(1,10,null())));
HXLINE(2817)			 ::flixel::math::FlxPoint fh8 = this->currentTimingShown->velocity;
HXDLIN(2817)			fh8->set_x((fh8->x + comboSpr1->velocity->x));
HXLINE(2818)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) ))) {
HXLINE(2818)				this->add(rating);
            			}
HXLINE(2820)			if (!(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)))) {
HXLINE(2822)				 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2822)				rating1->setGraphicSize(::Std_obj::_hx_int((rating->get_width() * ((Float)0.7))),null());
HXLINE(2823)				rating->set_antialiasing(true);
HXLINE(2824)				 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(2824)				comboSpr->setGraphicSize(::Std_obj::_hx_int((comboSpr1->get_width() * ((Float)0.7))),null());
HXLINE(2825)				comboSpr1->set_antialiasing(true);
            			}
            			else {
HXLINE(2829)				 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2829)				Float _hx_tmp = rating->get_width();
HXDLIN(2829)				rating1->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
HXLINE(2830)				 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(2830)				Float _hx_tmp1 = comboSpr1->get_width();
HXDLIN(2830)				comboSpr->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp1 * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
            			}
HXLINE(2833)			this->currentTimingShown->updateHitbox();
HXLINE(2834)			comboSpr1->updateHitbox();
HXLINE(2835)			rating->updateHitbox();
HXLINE(2837)			this->currentTimingShown->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2838)			comboSpr1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2839)			rating->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2841)			::Array< int > seperatedScore = ::Array_obj< int >::__new(0);
HXLINE(2843)			::Array< ::String > comboSplit = (this->combo + HX_("",00,00,00,00)).split(HX_("",00,00,00,00));
HXLINE(2845)			if ((comboSplit->length == 2)) {
HXLINE(2846)				seperatedScore->push(0);
            			}
HXLINE(2848)			{
HXLINE(2848)				int _g = 0;
HXDLIN(2848)				int _g1 = comboSplit->length;
HXDLIN(2848)				while((_g < _g1)){
HXLINE(2848)					_g = (_g + 1);
HXDLIN(2848)					int i = (_g - 1);
HXLINE(2850)					::String str = comboSplit->__get(i);
HXLINE(2851)					seperatedScore->push(::Std_obj::parseInt(str));
            				}
            			}
HXLINE(2854)			int daLoop = 0;
HXLINE(2855)			{
HXLINE(2855)				int _g2 = 0;
HXDLIN(2855)				while((_g2 < seperatedScore->length)){
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,numScore1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2884_popUpScore)
HXLINE(2884)						numScore1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(2855)					int i = seperatedScore->__get(_g2);
HXDLIN(2855)					_g2 = (_g2 + 1);
HXLINE(2857)					 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(2857)					::String library = null();
HXDLIN(2857)					 ::flixel::FlxSprite numScore1 = numScore->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (((pixelShitPart1 + HX_("num",46,de,53,00)) + ::Std_obj::_hx_int(( (Float)(i) ))) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(2858)					numScore1->screenCenter(null());
HXLINE(2859)					numScore1->set_x(((rating->x + (43 * daLoop)) - ( (Float)(50) )));
HXLINE(2860)					numScore1->set_y((rating->y + 100));
HXLINE(2861)					numScore1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2863)					if (!(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)))) {
HXLINE(2865)						numScore1->set_antialiasing(true);
HXLINE(2866)						 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(2866)						numScore->setGraphicSize(::Std_obj::_hx_int((numScore1->get_width() * ((Float)0.5))),null());
            					}
            					else {
HXLINE(2870)						 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(2870)						Float _hx_tmp = numScore1->get_width();
HXDLIN(2870)						numScore->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(2872)					numScore1->updateHitbox();
HXLINE(2874)					 ::flixel::math::FlxPoint numScore2 = numScore1->acceleration;
HXDLIN(2874)					numScore2->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(200,300,null())) ));
HXLINE(2875)					 ::flixel::math::FlxPoint fh = numScore1->velocity;
HXDLIN(2875)					Float fh1 = fh->y;
HXDLIN(2875)					fh->set_y((fh1 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,160,null())) )));
HXLINE(2876)					 ::flixel::math::FlxPoint numScore3 = numScore1->velocity;
HXDLIN(2876)					numScore3->set_x(::flixel::FlxG_obj::random->_hx_float(-5,5,null()));
HXLINE(2878)					bool _hx_tmp;
HXDLIN(2878)					if ((this->combo < 10)) {
HXLINE(2878)						_hx_tmp = (this->combo == 0);
            					}
            					else {
HXLINE(2878)						_hx_tmp = true;
            					}
HXDLIN(2878)					if (_hx_tmp) {
HXLINE(2879)						this->add(numScore1);
            					}
HXLINE(2881)					::flixel::tweens::FlxTween_obj::tween(numScore1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.002)))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(numScore1)))));
HXLINE(2889)					daLoop = (daLoop + 1);
            				}
            			}
HXLINE(2896)			 ::flixel::text::FlxText coolText1 = coolText;
HXDLIN(2896)			coolText1->set_text(::Std_obj::string(seperatedScore));
HXLINE(2899)			::flixel::tweens::FlxTween_obj::tween(rating, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            				->setFixed(1,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_1(_gthis)))));
HXLINE(2909)			::flixel::tweens::FlxTween_obj::tween(comboSpr1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(_gthis,coolText,comboSpr1,rating)))));
HXLINE(2924)			 ::PlayState _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2924)			_hx_tmp4->curSection = (_hx_tmp4->curSection + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpScore,(void))

bool PlayState_obj::NearlyEquals(Float value1,Float value2,::hx::Null< Float >  __o_unimportantDifference){
            		Float unimportantDifference = __o_unimportantDifference.Default(10);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2930_NearlyEquals)
HXDLIN(2930)		Float _hx_tmp = ::flixel::math::FlxMath_obj::roundDecimal(value1,1);
HXDLIN(2930)		return (::Math_obj::abs((_hx_tmp - ::flixel::math::FlxMath_obj::roundDecimal(value2,1))) < unimportantDifference);
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,NearlyEquals,return )

void PlayState_obj::keyShit(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3082_keyShit)
HXLINE(3082)			bool _hx_tmp;
HXDLIN(3082)			bool _hx_tmp1;
HXDLIN(3082)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(3082)				_hx_tmp1 = (daNote->y > _gthis->strumLine->y);
            			}
            			else {
HXLINE(3082)				_hx_tmp1 = false;
            			}
HXDLIN(3082)			if (!(_hx_tmp1)) {
HXLINE(3083)				if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) ))) {
HXLINE(3082)					_hx_tmp = (daNote->y < _gthis->strumLine->y);
            				}
            				else {
HXLINE(3082)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE(3082)				_hx_tmp = true;
            			}
HXDLIN(3082)			if (_hx_tmp) {
HXLINE(3086)				bool _hx_tmp;
HXDLIN(3086)				bool _hx_tmp1;
HXDLIN(3086)				bool _hx_tmp2;
HXDLIN(3086)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(3086)					_hx_tmp2 = daNote->canBeHit;
            				}
            				else {
HXLINE(3086)					_hx_tmp2 = false;
            				}
HXDLIN(3086)				if (_hx_tmp2) {
HXLINE(3086)					_hx_tmp1 = daNote->mustPress;
            				}
            				else {
HXLINE(3086)					_hx_tmp1 = false;
            				}
HXDLIN(3086)				if (!(_hx_tmp1)) {
HXLINE(3087)					bool _hx_tmp1;
HXDLIN(3087)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(3087)						_hx_tmp1 = daNote->tooLate;
            					}
            					else {
HXLINE(3087)						_hx_tmp1 = false;
            					}
HXDLIN(3087)					if (_hx_tmp1) {
HXLINE(3086)						_hx_tmp = daNote->mustPress;
            					}
            					else {
HXLINE(3086)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(3086)					_hx_tmp = true;
            				}
HXDLIN(3086)				if (_hx_tmp) {
HXLINE(3089)					if (::PlayState_obj::loadRep) {
HXLINE(3092)						::Array< Float > _hx_tmp = ( (::Array< Float >)(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic)) );
HXDLIN(3092)						if (_hx_tmp->contains(::HelperFunctions_obj::truncateFloat(daNote->strumTime,2))) {
HXLINE(3094)							_gthis->goodNoteHit(daNote,null());
HXLINE(3095)							::PlayState_obj::boyfriend->holdTimer = daNote->sustainLength;
            						}
            					}
            					else {
HXLINE(3098)						_gthis->goodNoteHit(daNote,null());
HXLINE(3099)						::PlayState_obj::boyfriend->holdTimer = daNote->sustainLength;
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4,::Array< ::Dynamic>,pressArray3,::Array< ::Dynamic>,holdArray3) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3112_keyShit)
HXLINE(3113)			bool _hx_tmp;
HXDLIN(3113)			if (pressArray3->__get(0).StaticCast< ::Array< bool > >()->__get(spr->ID)) {
HXLINE(3113)				_hx_tmp = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            			}
            			else {
HXLINE(3113)				_hx_tmp = false;
            			}
HXDLIN(3113)			if (_hx_tmp) {
HXLINE(3114)				spr->animation->play(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            			}
HXLINE(3115)			if (!(holdArray3->__get(0).StaticCast< ::Array< bool > >()->__get(spr->ID))) {
HXLINE(3116)				spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            			}
HXLINE(3118)			bool _hx_tmp1;
HXDLIN(3118)			if ((spr->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(3118)				_hx_tmp1 = !(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)));
            			}
            			else {
HXLINE(3118)				_hx_tmp1 = false;
            			}
HXDLIN(3118)			if (_hx_tmp1) {
HXLINE(3120)				spr->centerOffsets(null());
HXLINE(3121)				 ::flixel::math::FlxPoint fh = spr->offset;
HXDLIN(3121)				fh->set_x((fh->x - ( (Float)(13) )));
HXLINE(3122)				 ::flixel::math::FlxPoint fh1 = spr->offset;
HXDLIN(3122)				fh1->set_y((fh1->y - ( (Float)(13) )));
            			}
            			else {
HXLINE(3125)				spr->centerOffsets(null());
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2939_keyShit)
HXDLIN(2939)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2941)		bool holdArray = ::PlayerSettings_obj::player1->controls->_left->check();
HXDLIN(2941)		bool holdArray1 = ::PlayerSettings_obj::player1->controls->_down->check();
HXDLIN(2941)		bool holdArray2 = ::PlayerSettings_obj::player1->controls->_up->check();
HXDLIN(2941)		::Array< ::Dynamic> holdArray3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< bool >::__new(4)->init(0,holdArray)->init(1,holdArray1)->init(2,holdArray2)->init(3,::PlayerSettings_obj::player1->controls->_right->check()));
HXLINE(2943)		bool pressArray = ::PlayerSettings_obj::player1->controls->_leftP->check();
HXLINE(2944)		bool pressArray1 = ::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE(2945)		bool pressArray2 = ::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE(2942)		::Array< ::Dynamic> pressArray3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< bool >::__new(4)->init(0,pressArray)->init(1,pressArray1)->init(2,pressArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightP->check()));
HXLINE(2949)		bool releaseArray = ::PlayerSettings_obj::player1->controls->_leftR->check();
HXLINE(2950)		bool releaseArray1 = ::PlayerSettings_obj::player1->controls->_downR->check();
HXLINE(2951)		bool releaseArray2 = ::PlayerSettings_obj::player1->controls->_upR->check();
HXLINE(2948)		::Array< bool > releaseArray3 = ::Array_obj< bool >::__new(4)->init(0,releaseArray)->init(1,releaseArray1)->init(2,releaseArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightR->check());
HXLINE(2955)		if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2956)			if (::PlayerSettings_obj::player1->controls->_leftP->check()) {
HXLINE(2956)				::PlayState_obj::luaModchart->executeState(HX_("keyPressed",c3,72,6e,a8),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("left",07,08,b0,47)));
            			}
HXLINE(2957)			if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE(2957)				::PlayState_obj::luaModchart->executeState(HX_("keyPressed",c3,72,6e,a8),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("down",62,f8,6d,42)));
            			}
HXLINE(2958)			if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE(2958)				::PlayState_obj::luaModchart->executeState(HX_("keyPressed",c3,72,6e,a8),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("up",5b,66,00,00)));
            			}
HXLINE(2959)			if (::PlayerSettings_obj::player1->controls->_rightP->check()) {
HXLINE(2959)				::PlayState_obj::luaModchart->executeState(HX_("keyPressed",c3,72,6e,a8),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("right",dc,0b,64,e9)));
            			}
            		}
HXLINE(2963)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(2965)			holdArray3[0] = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_99,4);
HXLINE(2966)			pressArray3[0] = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_100,4);
HXLINE(2967)			releaseArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_101,4);
            		}
HXLINE(2970)		bool _hx_tmp;
HXDLIN(2970)		if (holdArray3->__get(0).StaticCast< ::Array< bool > >()->contains(true)) {
HXLINE(2970)			_hx_tmp = this->generatedMusic;
            		}
            		else {
HXLINE(2970)			_hx_tmp = false;
            		}
HXDLIN(2970)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,::Array< ::Dynamic>,holdArray3) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2974_keyShit)
HXLINE(2974)				bool _hx_tmp;
HXDLIN(2974)				bool _hx_tmp1;
HXDLIN(2974)				bool _hx_tmp2;
HXDLIN(2974)				if (daNote->isSustainNote) {
HXLINE(2974)					_hx_tmp2 = daNote->canBeHit;
            				}
            				else {
HXLINE(2974)					_hx_tmp2 = false;
            				}
HXDLIN(2974)				if (_hx_tmp2) {
HXLINE(2974)					_hx_tmp1 = daNote->mustPress;
            				}
            				else {
HXLINE(2974)					_hx_tmp1 = false;
            				}
HXDLIN(2974)				if (_hx_tmp1) {
HXLINE(2974)					_hx_tmp = holdArray3->__get(0).StaticCast< ::Array< bool > >()->__get(daNote->noteData);
            				}
            				else {
HXLINE(2974)					_hx_tmp = false;
            				}
HXDLIN(2974)				if (_hx_tmp) {
HXLINE(2975)					_gthis->goodNoteHit(daNote,null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2972)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,holdArray3)),null());
            		}
HXLINE(2980)		bool _hx_tmp1;
HXDLIN(2980)		if (pressArray3->__get(0).StaticCast< ::Array< bool > >()->contains(true)) {
HXLINE(2980)			_hx_tmp1 = this->generatedMusic;
            		}
            		else {
HXLINE(2980)			_hx_tmp1 = false;
            		}
HXDLIN(2980)		if (_hx_tmp1) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes,::Array< ::Dynamic>,dumbNotes,::Array< int >,directionList) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2990_keyShit)
HXLINE(2990)				bool _hx_tmp;
HXDLIN(2990)				bool _hx_tmp1;
HXDLIN(2990)				bool _hx_tmp2;
HXDLIN(2990)				if (daNote->canBeHit) {
HXLINE(2990)					_hx_tmp2 = daNote->mustPress;
            				}
            				else {
HXLINE(2990)					_hx_tmp2 = false;
            				}
HXDLIN(2990)				if (_hx_tmp2) {
HXLINE(2990)					_hx_tmp1 = !(daNote->tooLate);
            				}
            				else {
HXLINE(2990)					_hx_tmp1 = false;
            				}
HXDLIN(2990)				if (_hx_tmp1) {
HXLINE(2990)					_hx_tmp = !(daNote->wasGoodHit);
            				}
            				else {
HXLINE(2990)					_hx_tmp = false;
            				}
HXDLIN(2990)				if (_hx_tmp) {
HXLINE(2992)					if (directionList->contains(daNote->noteData)) {
HXLINE(2994)						int _g = 0;
HXDLIN(2994)						while((_g < possibleNotes->length)){
HXLINE(2994)							 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(2994)							_g = (_g + 1);
HXLINE(2996)							bool _hx_tmp;
HXDLIN(2996)							if ((coolNote->noteData == daNote->noteData)) {
HXLINE(2996)								_hx_tmp = (::Math_obj::abs((daNote->strumTime - coolNote->strumTime)) < 10);
            							}
            							else {
HXLINE(2996)								_hx_tmp = false;
            							}
HXDLIN(2996)							if (_hx_tmp) {
HXLINE(2999)								dumbNotes->push(daNote);
HXLINE(3000)								goto _hx_goto_90;
            							}
            							else {
HXLINE(3002)								bool _hx_tmp;
HXDLIN(3002)								if ((coolNote->noteData == daNote->noteData)) {
HXLINE(3002)									_hx_tmp = (daNote->strumTime < coolNote->strumTime);
            								}
            								else {
HXLINE(3002)									_hx_tmp = false;
            								}
HXDLIN(3002)								if (_hx_tmp) {
HXLINE(3004)									possibleNotes->remove(coolNote);
HXLINE(3005)									possibleNotes->push(daNote);
HXLINE(3006)									goto _hx_goto_90;
            								}
            							}
            						}
            						_hx_goto_90:;
            					}
            					else {
HXLINE(3012)						possibleNotes->push(daNote);
HXLINE(3013)						directionList->push(daNote->noteData);
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            			int _hx_run( ::Note a, ::Note b){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3026_keyShit)
HXLINE(3026)				return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2982)			::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(2984)			::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2985)			::Array< int > directionList = ::Array_obj< int >::__new(0);
HXLINE(2986)			::Array< ::Dynamic> dumbNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2988)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes,dumbNotes,directionList)),null());
HXLINE(3018)			{
HXLINE(3018)				int _g = 0;
HXDLIN(3018)				while((_g < dumbNotes->length)){
HXLINE(3018)					 ::Note note = dumbNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(3018)					_g = (_g + 1);
HXLINE(3021)					note->kill();
HXLINE(3022)					this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(3023)					note->destroy();
            				}
            			}
HXLINE(3026)			possibleNotes->sort( ::Dynamic(new _hx_Closure_2()));
HXLINE(3028)			bool dontCheck = false;
HXLINE(3030)			{
HXLINE(3030)				int _g1 = 0;
HXDLIN(3030)				int _g2 = pressArray3->__get(0).StaticCast< ::Array< bool > >()->length;
HXDLIN(3030)				while((_g1 < _g2)){
HXLINE(3030)					_g1 = (_g1 + 1);
HXDLIN(3030)					int i = (_g1 - 1);
HXLINE(3032)					bool _hx_tmp;
HXDLIN(3032)					if (pressArray3->__get(0).StaticCast< ::Array< bool > >()->__get(i)) {
HXLINE(3032)						_hx_tmp = !(directionList->contains(i));
            					}
            					else {
HXLINE(3032)						_hx_tmp = false;
            					}
HXDLIN(3032)					if (_hx_tmp) {
HXLINE(3033)						dontCheck = true;
            					}
            				}
            			}
HXLINE(3036)			if (this->perfectMode) {
HXLINE(3037)				this->goodNoteHit(possibleNotes->__get(0).StaticCast<  ::Note >(),null());
            			}
            			else {
HXLINE(3038)				bool _hx_tmp;
HXDLIN(3038)				if ((possibleNotes->length > 0)) {
HXLINE(3038)					_hx_tmp = !(dontCheck);
            				}
            				else {
HXLINE(3038)					_hx_tmp = false;
            				}
HXDLIN(3038)				if (_hx_tmp) {
HXLINE(3040)					if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(3042)						int _g = 0;
HXDLIN(3042)						int _g1 = pressArray3->__get(0).StaticCast< ::Array< bool > >()->length;
HXDLIN(3042)						while((_g < _g1)){
HXLINE(3042)							_g = (_g + 1);
HXDLIN(3042)							int shit = (_g - 1);
HXLINE(3044)							bool _hx_tmp;
HXDLIN(3044)							if (pressArray3->__get(0).StaticCast< ::Array< bool > >()->__get(shit)) {
HXLINE(3044)								_hx_tmp = !(directionList->contains(shit));
            							}
            							else {
HXLINE(3044)								_hx_tmp = false;
            							}
HXDLIN(3044)							if (_hx_tmp) {
HXLINE(3045)								this->noteMiss(shit,null());
            							}
            						}
            					}
HXLINE(3048)					{
HXLINE(3048)						int _g = 0;
HXDLIN(3048)						while((_g < possibleNotes->length)){
HXLINE(3048)							 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(3048)							_g = (_g + 1);
HXLINE(3050)							if (pressArray3->__get(0).StaticCast< ::Array< bool > >()->__get(coolNote->noteData)) {
HXLINE(3052)								if ((this->mashViolations != 0)) {
HXLINE(3053)									this->mashViolations--;
            								}
HXLINE(3054)								this->scoreTxt->set_color(-1);
HXLINE(3055)								this->goodNoteHit(coolNote,null());
            							}
            						}
            					}
            				}
            				else {
HXLINE(3059)					if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(3061)						int _g = 0;
HXDLIN(3061)						int _g1 = pressArray3->__get(0).StaticCast< ::Array< bool > >()->length;
HXDLIN(3061)						while((_g < _g1)){
HXLINE(3061)							_g = (_g + 1);
HXDLIN(3061)							int shit = (_g - 1);
HXLINE(3062)							if (pressArray3->__get(0).StaticCast< ::Array< bool > >()->__get(shit)) {
HXLINE(3063)								this->noteMiss(shit,null());
            							}
            						}
            					}
            				}
            			}
HXLINE(3066)			bool _hx_tmp;
HXDLIN(3066)			bool _hx_tmp1;
HXDLIN(3066)			bool _hx_tmp2;
HXDLIN(3066)			if (dontCheck) {
HXLINE(3066)				_hx_tmp2 = (possibleNotes->length > 0);
            			}
            			else {
HXLINE(3066)				_hx_tmp2 = false;
            			}
HXDLIN(3066)			if (_hx_tmp2) {
HXLINE(3066)				_hx_tmp1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(3066)				_hx_tmp1 = false;
            			}
HXDLIN(3066)			if (_hx_tmp1) {
HXLINE(3066)				_hx_tmp = !(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3066)				_hx_tmp = false;
            			}
HXDLIN(3066)			if (_hx_tmp) {
HXLINE(3068)				if ((this->mashViolations > 8)) {
HXLINE(3070)					::haxe::Log_obj::trace((HX_("mash violations ",7b,c3,a8,03) + this->mashViolations),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),3070,HX_("PlayState",5d,83,c2,46),HX_("keyShit",ff,40,2c,a6)));
HXLINE(3071)					this->scoreTxt->set_color(-65536);
HXLINE(3072)					this->noteMiss(0,null());
            				}
            				else {
HXLINE(3075)					this->mashViolations++;
            				}
            			}
            		}
HXLINE(3080)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_3(_gthis)),null());
HXLINE(3105)		bool _hx_tmp2;
HXDLIN(3105)		if ((::PlayState_obj::boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(3105)			if (holdArray3->__get(0).StaticCast< ::Array< bool > >()->contains(true)) {
HXLINE(3105)				_hx_tmp2 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(3105)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE(3105)			_hx_tmp2 = false;
            		}
HXDLIN(3105)		if (_hx_tmp2) {
HXLINE(3107)			bool _hx_tmp;
HXDLIN(3107)			if (::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(3107)				_hx_tmp = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            			}
            			else {
HXLINE(3107)				_hx_tmp = false;
            			}
HXDLIN(3107)			if (_hx_tmp) {
HXLINE(3108)				::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
            			}
            		}
HXLINE(3111)		::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_4(pressArray3,holdArray3)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyShit,(void))

void PlayState_obj::noteMiss(::hx::Null< int >  __o_direction, ::Note daNote){
            		int direction = __o_direction.Default(1);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3131_noteMiss)
HXDLIN(3131)		if (!(::PlayState_obj::boyfriend->stunned)) {
HXLINE(3133)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3133)			_hx_tmp->health = (_hx_tmp->health - ((Float)0.04));
HXLINE(3134)			bool _hx_tmp1;
HXDLIN(3134)			if ((this->combo > 5)) {
HXLINE(3134)				_hx_tmp1 = ::PlayState_obj::gf->animOffsets->exists(HX_("sad",16,98,57,00));
            			}
            			else {
HXLINE(3134)				_hx_tmp1 = false;
            			}
HXDLIN(3134)			if (_hx_tmp1) {
HXLINE(3136)				::PlayState_obj::gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
            			}
HXLINE(3138)			this->combo = 0;
HXLINE(3139)			::PlayState_obj::misses++;
HXLINE(3144)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),1 )) {
HXLINE(3145)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3145)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit - ( (Float)(1) ));
            			}
HXLINE(3147)			 ::PlayState _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3147)			_hx_tmp2->songScore = (_hx_tmp2->songScore - 10);
HXLINE(3149)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(3149)			::String library = null();
HXDLIN(3149)			::String _hx_tmp4 = ::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),library);
HXDLIN(3149)			_hx_tmp3->play(_hx_tmp4,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
HXLINE(3153)			switch((int)(direction)){
            				case (int)0: {
HXLINE(3156)					::PlayState_obj::boyfriend->playAnim(HX_("singLEFTmiss",d2,2f,9c,b6),true,null(),null());
            				}
            				break;
            				case (int)1: {
HXLINE(3158)					::PlayState_obj::boyfriend->playAnim(HX_("singDOWNmiss",ad,e9,88,e4),true,null(),null());
            				}
            				break;
            				case (int)2: {
HXLINE(3160)					::PlayState_obj::boyfriend->playAnim(HX_("singUPmiss",66,22,08,8a),true,null(),null());
            				}
            				break;
            				case (int)3: {
HXLINE(3162)					::PlayState_obj::boyfriend->playAnim(HX_("singRIGHTmiss",89,cc,65,e3),true,null(),null());
            				}
            				break;
            			}
HXLINE(3165)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3166)				::PlayState_obj::luaModchart->executeState(HX_("playerOneMiss",21,1f,37,d5),::cpp::VirtualArray_obj::__new(2)->init(0,direction)->init(1,::Conductor_obj::songPosition));
            			}
HXLINE(3169)			this->updateAccuracy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteMiss,(void))

void PlayState_obj::updateAccuracy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3194_updateAccuracy)
HXLINE(3195)		 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3195)		_hx_tmp->totalPlayed = (_hx_tmp->totalPlayed + 1);
HXLINE(3196)		this->accuracy = ::Math_obj::max(( (Float)(0) ),((this->totalNotesHit / ( (Float)(this->totalPlayed) )) * ( (Float)(100) )));
HXLINE(3197)		this->accuracyDefault = ::Math_obj::max(( (Float)(0) ),((this->totalNotesHitDefault / ( (Float)(this->totalPlayed) )) * ( (Float)(100) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateAccuracy,(void))

void PlayState_obj::fly(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3202_fly)
HXDLIN(3202)		::flixel::tweens::FlxTween_obj::tween(::PlayState_obj::dad, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),-700)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,fly,(void))

int PlayState_obj::getKeyPresses( ::Note note){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3211_getKeyPresses)
HXLINE(3211)			bool _hx_tmp;
HXDLIN(3211)			bool _hx_tmp1;
HXDLIN(3211)			if (daNote->canBeHit) {
HXLINE(3211)				_hx_tmp1 = daNote->mustPress;
            			}
            			else {
HXLINE(3211)				_hx_tmp1 = false;
            			}
HXDLIN(3211)			if (_hx_tmp1) {
HXLINE(3211)				_hx_tmp = !(daNote->tooLate);
            			}
            			else {
HXLINE(3211)				_hx_tmp = false;
            			}
HXDLIN(3211)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            				int _hx_run( ::Note a, ::Note b){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3214_getKeyPresses)
HXLINE(3214)					return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(3213)				possibleNotes->push(daNote);
HXLINE(3214)				possibleNotes->sort( ::Dynamic(new _hx_Closure_0()));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3206_getKeyPresses)
HXLINE(3207)		::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3209)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes)),null());
HXLINE(3217)		if ((possibleNotes->length == 1)) {
HXLINE(3218)			return (possibleNotes->length + 1);
            		}
HXLINE(3219)		return possibleNotes->length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getKeyPresses,return )

void PlayState_obj::noteCheck(::Array< bool > controlArray, ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3228_noteCheck)
HXLINE(3229)		Float noteDiff = ::Math_obj::abs((note->strumTime - ::Conductor_obj::songPosition));
HXLINE(3231)		note->rating = ::Ratings_obj::CalculateRating(noteDiff,null());
HXLINE(3246)		if (controlArray->__get(note->noteData)) {
HXLINE(3248)			int _hx_tmp = this->mashing;
HXDLIN(3248)			this->goodNoteHit(note,(_hx_tmp > this->getKeyPresses(note)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteCheck,(void))

void PlayState_obj::goodNoteHit( ::Note note,::hx::Null< bool >  __o_resetMashViolation){
            		bool resetMashViolation = __o_resetMashViolation.Default(true);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3275_goodNoteHit)
HXLINE(3277)		if ((this->mashing != 0)) {
HXLINE(3278)			this->mashing = 0;
            		}
HXLINE(3280)		Float noteDiff = ::Math_obj::abs((note->strumTime - ::Conductor_obj::songPosition));
HXLINE(3282)		note->rating = ::Ratings_obj::CalculateRating(noteDiff,null());
HXLINE(3286)		if (!(note->isSustainNote)) {
HXLINE(3287)			::Array< ::Dynamic> _hx_tmp = this->notesHitArray;
HXDLIN(3287)			_hx_tmp->unshift(::Date_obj::now());
            		}
HXLINE(3289)		bool _hx_tmp;
HXDLIN(3289)		if (!(resetMashViolation)) {
HXLINE(3289)			_hx_tmp = (this->mashViolations >= 1);
            		}
            		else {
HXLINE(3289)			_hx_tmp = false;
            		}
HXDLIN(3289)		if (_hx_tmp) {
HXLINE(3290)			this->mashViolations--;
            		}
HXLINE(3292)		if ((this->mashViolations < 0)) {
HXLINE(3293)			this->mashViolations = 0;
            		}
HXLINE(3295)		if (!(note->wasGoodHit)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Note,note) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3327_goodNoteHit)
HXLINE(3327)				if ((::Math_obj::abs(( (Float)(note->noteData) )) == spr->ID)) {
HXLINE(3329)					spr->animation->play(HX_("confirm",00,9d,39,10),true,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3297)			if (!(note->isSustainNote)) {
HXLINE(3299)				this->popUpScore(note);
HXLINE(3300)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3300)				_hx_tmp->combo = (_hx_tmp->combo + 1);
            			}
            			else {
HXLINE(3303)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3303)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            			}
HXLINE(3306)			switch((int)(note->noteData)){
            				case (int)0: {
HXLINE(3315)					::PlayState_obj::boyfriend->playAnim(HX_("singLEFT",d6,39,ef,3b),true,null(),null());
            				}
            				break;
            				case (int)1: {
HXLINE(3313)					::PlayState_obj::boyfriend->playAnim(HX_("singDOWN",31,2a,ad,36),true,null(),null());
            				}
            				break;
            				case (int)2: {
HXLINE(3309)					::PlayState_obj::boyfriend->playAnim(HX_("singUP",6a,52,21,b9),true,null(),null());
            				}
            				break;
            				case (int)3: {
HXLINE(3311)					::PlayState_obj::boyfriend->playAnim(HX_("singRIGHT",0d,6f,70,ac),true,null(),null());
            				}
            				break;
            			}
HXLINE(3318)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3319)				::PlayState_obj::luaModchart->executeState(HX_("playerOneSing",74,62,2e,d9),::cpp::VirtualArray_obj::__new(2)->init(0,note->noteData)->init(1,::Conductor_obj::songPosition));
            			}
HXLINE(3322)			bool _hx_tmp;
HXDLIN(3322)			if (!(::PlayState_obj::loadRep)) {
HXLINE(3322)				_hx_tmp = note->mustPress;
            			}
            			else {
HXLINE(3322)				_hx_tmp = false;
            			}
HXDLIN(3322)			if (_hx_tmp) {
HXLINE(3323)				::Array< Float > _hx_tmp = this->saveNotes;
HXDLIN(3323)				_hx_tmp->push(::HelperFunctions_obj::truncateFloat(note->strumTime,2));
            			}
HXLINE(3325)			::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_0(note)),null());
HXLINE(3333)			note->wasGoodHit = true;
HXLINE(3334)			this->vocals->set_volume(( (Float)(1) ));
HXLINE(3336)			note->kill();
HXLINE(3337)			this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(3338)			note->destroy();
HXLINE(3340)			this->updateAccuracy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::resetFastCar(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3349_resetFastCar)
HXDLIN(3349)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3350)			this->fastCar->set_x(( (Float)(-12600) ));
HXLINE(3351)			 ::flixel::FlxSprite _hx_tmp = this->fastCar;
HXDLIN(3351)			_hx_tmp->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(140,250,null())) ));
HXLINE(3352)			this->fastCar->velocity->set_x(( (Float)(0) ));
HXLINE(3353)			this->fastCarCanDrive = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resetFastCar,(void))

void PlayState_obj::fastCarDrive(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3358_fastCarDrive)
HXDLIN(3358)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3359)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3366_fastCarDrive)
HXLINE(3366)				_gthis->resetFastCar();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3360)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3360)			::String library = null();
HXDLIN(3360)			_hx_tmp->play(::Paths_obj::sound((HX_("carPass",05,1f,44,b6) + ::flixel::FlxG_obj::random->_hx_int(0,1,null())),library),((Float)0.7),null(),null(),null(),null());
HXLINE(3362)			 ::flixel::math::FlxPoint _hx_tmp1 = this->fastCar->velocity;
HXDLIN(3362)			int _hx_tmp2 = ::flixel::FlxG_obj::random->_hx_int(170,220,null());
HXDLIN(3362)			_hx_tmp1->set_x(((( (Float)(_hx_tmp2) ) / ::flixel::FlxG_obj::elapsed) * ( (Float)(3) )));
HXLINE(3363)			this->fastCarCanDrive = false;
HXLINE(3364)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,fastCarDrive,(void))

void PlayState_obj::trainStart(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3380_trainStart)
HXDLIN(3380)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3381)			this->trainMoving = true;
HXLINE(3382)			if (::hx::IsNull( this->trainSound->_channel )) {
HXLINE(3383)				this->trainSound->play(true,null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainStart,(void))

void PlayState_obj::updateTrainPos(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3391_updateTrainPos)
HXDLIN(3391)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3392)			if ((this->trainSound->_time >= 4700)) {
HXLINE(3394)				this->startedMoving = true;
HXLINE(3395)				::PlayState_obj::gf->playAnim(HX_("hairBlow",b4,c9,39,c9),null(),null(),null());
            			}
HXLINE(3398)			if (this->startedMoving) {
HXLINE(3400)				 ::flixel::FlxSprite fh = this->phillyTrain;
HXDLIN(3400)				fh->set_x((fh->x - ( (Float)(400) )));
HXLINE(3402)				bool _hx_tmp;
HXDLIN(3402)				if ((this->phillyTrain->x < -2000)) {
HXLINE(3402)					_hx_tmp = !(this->trainFinishing);
            				}
            				else {
HXLINE(3402)					_hx_tmp = false;
            				}
HXDLIN(3402)				if (_hx_tmp) {
HXLINE(3404)					this->phillyTrain->set_x(( (Float)(-1150) ));
HXLINE(3405)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3405)					_hx_tmp->trainCars = (_hx_tmp->trainCars - 1);
HXLINE(3407)					if ((this->trainCars <= 0)) {
HXLINE(3408)						this->trainFinishing = true;
            					}
            				}
HXLINE(3411)				bool _hx_tmp1;
HXDLIN(3411)				if ((this->phillyTrain->x < -4000)) {
HXLINE(3411)					_hx_tmp1 = this->trainFinishing;
            				}
            				else {
HXLINE(3411)					_hx_tmp1 = false;
            				}
HXDLIN(3411)				if (_hx_tmp1) {
HXLINE(3412)					this->trainReset();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateTrainPos,(void))

void PlayState_obj::trainReset(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3420_trainReset)
HXDLIN(3420)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3421)			::PlayState_obj::gf->playAnim(HX_("hairFall",bd,48,d6,cb),null(),null(),null());
HXLINE(3422)			this->phillyTrain->set_x(( (Float)((::flixel::FlxG_obj::width + 200)) ));
HXLINE(3423)			this->trainMoving = false;
HXLINE(3426)			this->trainCars = 8;
HXLINE(3427)			this->trainFinishing = false;
HXLINE(3428)			this->startedMoving = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainReset,(void))

void PlayState_obj::lightningStrikeShit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3433_lightningStrikeShit)
HXLINE(3434)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3434)		::String library = null();
HXDLIN(3434)		_hx_tmp->play(::Paths_obj::sound((HX_("thunder_",bb,58,cf,2f) + ::flixel::FlxG_obj::random->_hx_int(1,2,null())),library),null(),null(),null(),null(),null());
HXLINE(3435)		this->halloweenBG->animation->play(HX_("lightning",0a,39,4a,d7),null(),null(),null());
HXLINE(3437)		this->lightningStrikeBeat = this->curBeat;
HXLINE(3438)		this->lightningOffset = ::flixel::FlxG_obj::random->_hx_int(8,24,null());
HXLINE(3440)		::PlayState_obj::boyfriend->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
HXLINE(3441)		::PlayState_obj::gf->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,lightningStrikeShit,(void))

void PlayState_obj::stepHit(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3447_stepHit)
HXLINE(3448)		this->super::stepHit();
HXLINE(3449)		bool _hx_tmp;
HXDLIN(3449)		if (!((::flixel::FlxG_obj::sound->music->_time > (::Conductor_obj::songPosition + 20)))) {
HXLINE(3449)			_hx_tmp = (::flixel::FlxG_obj::sound->music->_time < (::Conductor_obj::songPosition - ( (Float)(20) )));
            		}
            		else {
HXLINE(3449)			_hx_tmp = true;
            		}
HXDLIN(3449)		if (_hx_tmp) {
HXLINE(3451)			this->resyncVocals();
            		}
HXLINE(3458)		bool _hx_tmp1;
HXDLIN(3458)		if (this->executeModchart) {
HXLINE(3458)			_hx_tmp1 = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(3458)			_hx_tmp1 = false;
            		}
HXDLIN(3458)		if (_hx_tmp1) {
HXLINE(3460)			::PlayState_obj::luaModchart->setVar(HX_("curStep",ec,58,71,b7),this->curStep);
HXLINE(3461)			::PlayState_obj::luaModchart->executeState(HX_("stepHit",67,ae,41,81),::cpp::VirtualArray_obj::__new(1)->init(0,this->curStep));
            		}
HXLINE(3464)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("innocence-glitched",b9,cf,a8,6b))) {
HXLINE(3467)			if ((this->curStep == 1088)) {
HXLINE(3469)				this->remove(::PlayState_obj::dad,null());
HXLINE(3470)				::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(430) ),HX_("isaacshifting",79,c0,81,02),null());
HXLINE(3471)				this->add(::PlayState_obj::dad);
HXLINE(3472)				this->staticlol->set_visible(true);
            			}
HXLINE(3475)			if ((this->curStep == 1344)) {
HXLINE(3477)				this->remove(::PlayState_obj::dad,null());
HXLINE(3478)				::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(430) ),HX_("funkyisaac",0c,77,b5,1d),null());
HXLINE(3479)				this->add(::PlayState_obj::dad);
HXLINE(3480)				this->staticlol->set_visible(false);
            			}
            		}
HXLINE(3483)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("innermost-apocalypse",8b,b6,ca,5e))) {
HXLINE(3485)			if ((this->curStep == 64)) {
HXLINE(3486)				this->shakeEffect = true;
            			}
HXLINE(3488)			if ((this->curStep == 64)) {
HXLINE(3489)				this->unknown->set_visible(true);
            			}
HXLINE(3490)			if ((this->curStep == 67)) {
HXLINE(3491)				this->shakeEffect = false;
            			}
HXLINE(3492)			if ((this->curStep == 127)) {
HXLINE(3493)				this->shakeEffect = true;
            			}
HXLINE(3494)			if ((this->curStep == 129)) {
HXLINE(3495)				this->shakeEffect = false;
            			}
HXLINE(3496)			if ((this->curStep == 446)) {
HXLINE(3497)				this->shakeEffect = true;
            			}
HXLINE(3498)			if ((this->curStep == 448)) {
HXLINE(3499)				this->shakeEffect = false;
            			}
HXLINE(3500)			if ((this->curStep == 510)) {
HXLINE(3501)				this->shakeEffect = true;
            			}
HXLINE(3502)			if ((this->curStep == 512)) {
HXLINE(3503)				this->shakeEffect = false;
            			}
HXLINE(3504)			if ((this->curStep == 829)) {
HXLINE(3505)				this->shakeEffect = true;
            			}
HXLINE(3506)			if ((this->curStep == 831)) {
HXLINE(3507)				::PlayState_obj::dad->set_visible(false);
            			}
HXLINE(3508)			if ((this->curStep == 832)) {
HXLINE(3509)				this->shakeEffect = false;
            			}
            		}
HXLINE(3512)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("sacrificial",e0,93,7b,59))) {
HXLINE(3515)			if ((this->curStep == 288)) {
HXLINE(3517)				this->shakeEffect = true;
            			}
HXLINE(3520)			if ((this->curStep == 291)) {
HXLINE(3522)				this->shakeEffect = false;
            			}
HXLINE(3525)			if ((this->curStep == 574)) {
HXLINE(3527)				this->shakeEffect = true;
            			}
HXLINE(3530)			if ((this->curStep == 577)) {
HXLINE(3532)				this->shakeEffect = false;
            			}
            		}
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3556_beatHit)
HXLINE(3557)		this->super::beatHit();
HXLINE(3559)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::Note a2, ::Note a3){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3561_beatHit)
HXLINE(3561)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(3561)			int Order;
HXDLIN(3561)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(3561)				Order = -1;
            			}
            			else {
HXLINE(3561)				Order = 1;
            			}
HXDLIN(3561)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(3561)			int a1 = Order;
HXDLIN(3561)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(3561)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE(3564)		bool _hx_tmp;
HXDLIN(3564)		if (this->executeModchart) {
HXLINE(3564)			_hx_tmp = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(3564)			_hx_tmp = false;
            		}
HXDLIN(3564)		if (_hx_tmp) {
HXLINE(3566)			::PlayState_obj::luaModchart->setVar(HX_("curBeat",16,53,29,ac),this->curBeat);
HXLINE(3567)			::PlayState_obj::luaModchart->executeState(HX_("beatHit",7d,ea,04,74),::cpp::VirtualArray_obj::__new(1)->init(0,this->curBeat));
            		}
HXLINE(3570)		bool _hx_tmp1;
HXDLIN(3570)		if ((this->curSong == HX_("Tutorial",be,4b,67,5c))) {
HXLINE(3570)			_hx_tmp1 = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            		}
            		else {
HXLINE(3570)			_hx_tmp1 = false;
            		}
HXDLIN(3570)		if (_hx_tmp1) {
HXLINE(3571)			bool _hx_tmp;
HXDLIN(3571)			if ((::hx::Mod(this->curBeat,2) == 1)) {
HXLINE(3571)				_hx_tmp = ::PlayState_obj::dad->animOffsets->exists(HX_("danceLeft",da,cc,f9,df));
            			}
            			else {
HXLINE(3571)				_hx_tmp = false;
            			}
HXDLIN(3571)			if (_hx_tmp) {
HXLINE(3572)				::PlayState_obj::dad->playAnim(HX_("danceLeft",da,cc,f9,df),null(),null(),null());
            			}
HXLINE(3573)			bool _hx_tmp1;
HXDLIN(3573)			if ((::hx::Mod(this->curBeat,2) == 0)) {
HXLINE(3573)				_hx_tmp1 = ::PlayState_obj::dad->animOffsets->exists(HX_("danceRight",a9,7f,a6,91));
            			}
            			else {
HXLINE(3573)				_hx_tmp1 = false;
            			}
HXDLIN(3573)			if (_hx_tmp1) {
HXLINE(3574)				::PlayState_obj::dad->playAnim(HX_("danceRight",a9,7f,a6,91),null(),null(),null());
            			}
            		}
HXLINE(3577)		if (::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) )))) )) {
HXLINE(3579)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(3581)				::Conductor_obj::changeBPM(( (Float)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            			}
HXLINE(3588)			bool _hx_tmp;
HXDLIN(3588)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(3588)				_hx_tmp = (::PlayState_obj::dad->curCharacter != HX_("gf",1f,5a,00,00));
            			}
            			else {
HXLINE(3588)				_hx_tmp = false;
            			}
HXDLIN(3588)			if (_hx_tmp) {
HXLINE(3589)				::PlayState_obj::dad->dance();
            			}
            		}
HXLINE(3592)		this->wiggleShit->update(::Conductor_obj::crochet);
HXLINE(3595)		bool _hx_tmp2;
HXDLIN(3595)		bool _hx_tmp3;
HXDLIN(3595)		bool _hx_tmp4;
HXDLIN(3595)		bool _hx_tmp5;
HXDLIN(3595)		if ((this->curSong.toLowerCase() == HX_("milf",d6,4c,5c,48))) {
HXLINE(3595)			_hx_tmp5 = (this->curBeat >= 168);
            		}
            		else {
HXLINE(3595)			_hx_tmp5 = false;
            		}
HXDLIN(3595)		if (_hx_tmp5) {
HXLINE(3595)			_hx_tmp4 = (this->curBeat < 200);
            		}
            		else {
HXLINE(3595)			_hx_tmp4 = false;
            		}
HXDLIN(3595)		if (_hx_tmp4) {
HXLINE(3595)			_hx_tmp3 = this->camZooming;
            		}
            		else {
HXLINE(3595)			_hx_tmp3 = false;
            		}
HXDLIN(3595)		if (_hx_tmp3) {
HXLINE(3595)			_hx_tmp2 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            		}
            		else {
HXLINE(3595)			_hx_tmp2 = false;
            		}
HXDLIN(3595)		if (_hx_tmp2) {
HXLINE(3597)			 ::flixel::FlxCamera fh = ::flixel::FlxG_obj::camera;
HXDLIN(3597)			fh->set_zoom((fh->zoom + ((Float)0.015)));
HXLINE(3598)			 ::flixel::FlxCamera fh1 = this->camHUD;
HXDLIN(3598)			fh1->set_zoom((fh1->zoom + ((Float)0.03)));
            		}
HXLINE(3601)		bool _hx_tmp6;
HXDLIN(3601)		bool _hx_tmp7;
HXDLIN(3601)		if (this->camZooming) {
HXLINE(3601)			_hx_tmp7 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            		}
            		else {
HXLINE(3601)			_hx_tmp7 = false;
            		}
HXDLIN(3601)		if (_hx_tmp7) {
HXLINE(3601)			_hx_tmp6 = (::hx::Mod(this->curBeat,4) == 0);
            		}
            		else {
HXLINE(3601)			_hx_tmp6 = false;
            		}
HXDLIN(3601)		if (_hx_tmp6) {
HXLINE(3603)			 ::flixel::FlxCamera fh = ::flixel::FlxG_obj::camera;
HXDLIN(3603)			fh->set_zoom((fh->zoom + ((Float)0.015)));
HXLINE(3604)			 ::flixel::FlxCamera fh1 = this->camHUD;
HXDLIN(3604)			fh1->set_zoom((fh1->zoom + ((Float)0.03)));
            		}
HXLINE(3607)		 ::HealthIcon _hx_tmp8 = this->iconP1;
HXDLIN(3607)		_hx_tmp8->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 30)),null());
HXLINE(3608)		 ::HealthIcon _hx_tmp9 = this->iconP2;
HXDLIN(3608)		_hx_tmp9->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 30)),null());
HXLINE(3610)		this->iconP1->updateHitbox();
HXLINE(3611)		this->iconP2->updateHitbox();
HXLINE(3613)		if ((::hx::Mod(this->curBeat,this->gfSpeed) == 0)) {
HXLINE(3615)			::PlayState_obj::gf->dance();
            		}
HXLINE(3618)		if (!(::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)))) {
HXLINE(3620)			::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
            		}
HXLINE(3624)		bool _hx_tmp10;
HXDLIN(3624)		if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(3624)			_hx_tmp10 = (this->curSong == HX_("Bopeebo",90,29,16,da));
            		}
            		else {
HXLINE(3624)			_hx_tmp10 = false;
            		}
HXDLIN(3624)		if (_hx_tmp10) {
HXLINE(3626)			::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
            		}
HXLINE(3629)		bool _hx_tmp11;
HXDLIN(3629)		bool _hx_tmp12;
HXDLIN(3629)		bool _hx_tmp13;
HXDLIN(3629)		bool _hx_tmp14;
HXDLIN(3629)		if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(3629)			_hx_tmp14 = ::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Tutorial",be,4b,67,5c) );
            		}
            		else {
HXLINE(3629)			_hx_tmp14 = false;
            		}
HXDLIN(3629)		if (_hx_tmp14) {
HXLINE(3629)			_hx_tmp13 = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            		}
            		else {
HXLINE(3629)			_hx_tmp13 = false;
            		}
HXDLIN(3629)		if (_hx_tmp13) {
HXLINE(3629)			_hx_tmp12 = (this->curBeat > 16);
            		}
            		else {
HXLINE(3629)			_hx_tmp12 = false;
            		}
HXDLIN(3629)		if (_hx_tmp12) {
HXLINE(3629)			_hx_tmp11 = (this->curBeat < 48);
            		}
            		else {
HXLINE(3629)			_hx_tmp11 = false;
            		}
HXDLIN(3629)		if (_hx_tmp11) {
HXLINE(3631)			::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(3632)			::PlayState_obj::dad->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
            		}
HXLINE(3635)		::String _hx_switch_0 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_0==HX_("basement",2f,0a,ce,11)) ){
HXLINE(3660)			this->staticlol->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXDLIN(3660)			goto _hx_goto_122;
            		}
            		if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
HXLINE(3650)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            				void _hx_run( ::BackgroundDancer dancer){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3653_beatHit)
HXLINE(3653)					dancer->dance();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(3651)				this->grpLimoDancers->forEach( ::Dynamic(new _hx_Closure_1()),null());
HXLINE(3656)				bool _hx_tmp;
HXDLIN(3656)				if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10)) {
HXLINE(3656)					_hx_tmp = this->fastCarCanDrive;
            				}
            				else {
HXLINE(3656)					_hx_tmp = false;
            				}
HXDLIN(3656)				if (_hx_tmp) {
HXLINE(3657)					this->fastCarDrive();
            				}
            			}
HXLINE(3650)			goto _hx_goto_122;
            		}
            		if (  (_hx_switch_0==HX_("mall",d4,3a,56,48)) ){
HXLINE(3643)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3644)				this->upperBoppers->animation->play(HX_("bop",03,be,4a,00),true,null(),null());
HXLINE(3645)				this->bottomBoppers->animation->play(HX_("bop",03,be,4a,00),true,null(),null());
HXLINE(3646)				this->santa->animation->play(HX_("idle",14,a7,b3,45),true,null(),null());
            			}
HXLINE(3643)			goto _hx_goto_122;
            		}
            		if (  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ){
HXLINE(3662)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3663)				if (!(this->trainMoving)) {
HXLINE(3664)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3664)					_hx_tmp->trainCooldown = (_hx_tmp->trainCooldown + 1);
            				}
HXLINE(3666)				if ((::hx::Mod(this->curBeat,4) == 0)) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            					void _hx_run( ::flixel::FlxSprite light){
            						HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3670_beatHit)
HXLINE(3670)						light->set_visible(false);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(3668)					this->phillyCityLights->forEach( ::Dynamic(new _hx_Closure_2()),null());
HXLINE(3673)					this->curLight = ::flixel::FlxG_obj::random->_hx_int(0,(this->phillyCityLights->length - 1),null());
HXLINE(3675)					Dynamic( this->phillyCityLights->members->__get(this->curLight)).StaticCast<  ::flixel::FlxSprite >()->set_visible(true);
            				}
            			}
HXLINE(3681)			bool _hx_tmp;
HXDLIN(3681)			bool _hx_tmp1;
HXDLIN(3681)			bool _hx_tmp2;
HXDLIN(3681)			if ((::hx::Mod(this->curBeat,8) == 4)) {
HXLINE(3681)				_hx_tmp2 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 30);
            			}
            			else {
HXLINE(3681)				_hx_tmp2 = false;
            			}
HXDLIN(3681)			if (_hx_tmp2) {
HXLINE(3681)				_hx_tmp1 = !(this->trainMoving);
            			}
            			else {
HXLINE(3681)				_hx_tmp1 = false;
            			}
HXDLIN(3681)			if (_hx_tmp1) {
HXLINE(3681)				_hx_tmp = (this->trainCooldown > 8);
            			}
            			else {
HXLINE(3681)				_hx_tmp = false;
            			}
HXDLIN(3681)			if (_hx_tmp) {
HXLINE(3683)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3684)					this->trainCooldown = ::flixel::FlxG_obj::random->_hx_int(-4,0,null());
HXLINE(3685)					this->trainStart();
            				}
            			}
HXLINE(3661)			goto _hx_goto_122;
            		}
            		if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ){
HXLINE(3638)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3639)				this->bgGirls->dance();
            			}
HXLINE(3638)			goto _hx_goto_122;
            		}
            		_hx_goto_122:;
HXLINE(3690)		bool _hx_tmp15;
HXDLIN(3690)		bool _hx_tmp16;
HXDLIN(3690)		if (this->isHalloween) {
HXLINE(3690)			_hx_tmp16 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10);
            		}
            		else {
HXLINE(3690)			_hx_tmp16 = false;
            		}
HXDLIN(3690)		if (_hx_tmp16) {
HXLINE(3690)			_hx_tmp15 = (this->curBeat > (this->lightningStrikeBeat + this->lightningOffset));
            		}
            		else {
HXLINE(3690)			_hx_tmp15 = false;
            		}
HXDLIN(3690)		if (_hx_tmp15) {
HXLINE(3692)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3693)				this->lightningStrikeShit();
            			}
            		}
            	}


 ::PlayState PlayState_obj::instance;

::String PlayState_obj::curStage;

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::Array< ::String > PlayState_obj::storyPlaylist;

int PlayState_obj::storyDifficulty;

int PlayState_obj::weekSong;

int PlayState_obj::shits;

int PlayState_obj::bads;

int PlayState_obj::goods;

int PlayState_obj::sicks;

 ::flixel::FlxSprite PlayState_obj::songPosBG;

 ::flixel::ui::FlxBar PlayState_obj::songPosBar;

 ::Replay PlayState_obj::rep;

bool PlayState_obj::loadRep;

::Array< bool > PlayState_obj::noteBools;

 ::Character PlayState_obj::dad;

 ::Character PlayState_obj::gf;

 ::Boyfriend PlayState_obj::boyfriend;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

 ::flixel::group::FlxTypedGroup PlayState_obj::strumLineNotes;

 ::flixel::group::FlxTypedGroup PlayState_obj::playerStrums;

 ::flixel::group::FlxTypedGroup PlayState_obj::cpuStrums;

int PlayState_obj::misses;

bool PlayState_obj::offsetTesting;

int PlayState_obj::campaignScore;

Float PlayState_obj::daPixelZoom;

bool PlayState_obj::theFunne;

int PlayState_obj::repPresses;

int PlayState_obj::repReleases;

Float PlayState_obj::timeCurrently;

Float PlayState_obj::timeCurrentlyR;

Float PlayState_obj::songOffset;

 ::ModchartState PlayState_obj::luaModchart;

Float PlayState_obj::songRate;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(mcontrols,"mcontrols");
	HX_MARK_MEMBER_NAME(halloweenLevel,"halloweenLevel");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(kadeEngineWatermark,"kadeEngineWatermark");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(isaakPreload,"isaakPreload");
	HX_MARK_MEMBER_NAME(unknown,"unknown");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(accuracy,"accuracy");
	HX_MARK_MEMBER_NAME(accuracyDefault,"accuracyDefault");
	HX_MARK_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_MARK_MEMBER_NAME(totalNotesHitDefault,"totalNotesHitDefault");
	HX_MARK_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_MARK_MEMBER_NAME(ss,"ss");
	HX_MARK_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(shakeEffect,"shakeEffect");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_MARK_MEMBER_NAME(currentFrames,"currentFrames");
	HX_MARK_MEMBER_NAME(dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(halloweenBG,"halloweenBG");
	HX_MARK_MEMBER_NAME(isHalloween,"isHalloween");
	HX_MARK_MEMBER_NAME(phillyCityLights,"phillyCityLights");
	HX_MARK_MEMBER_NAME(phillyTrain,"phillyTrain");
	HX_MARK_MEMBER_NAME(trainSound,"trainSound");
	HX_MARK_MEMBER_NAME(limo,"limo");
	HX_MARK_MEMBER_NAME(grpLimoDancers,"grpLimoDancers");
	HX_MARK_MEMBER_NAME(fastCar,"fastCar");
	HX_MARK_MEMBER_NAME(songName,"songName");
	HX_MARK_MEMBER_NAME(upperBoppers,"upperBoppers");
	HX_MARK_MEMBER_NAME(bottomBoppers,"bottomBoppers");
	HX_MARK_MEMBER_NAME(santa,"santa");
	HX_MARK_MEMBER_NAME(holylight,"holylight");
	HX_MARK_MEMBER_NAME(staticlol,"staticlol");
	HX_MARK_MEMBER_NAME(fc,"fc");
	HX_MARK_MEMBER_NAME(bgGirls,"bgGirls");
	HX_MARK_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_MARK_MEMBER_NAME(talking,"talking");
	HX_MARK_MEMBER_NAME(songScore,"songScore");
	HX_MARK_MEMBER_NAME(songScoreDef,"songScoreDef");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(replayTxt,"replayTxt");
	HX_MARK_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_MARK_MEMBER_NAME(funneEffect,"funneEffect");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_MARK_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_MARK_MEMBER_NAME(botPlayState,"botPlayState");
	HX_MARK_MEMBER_NAME(saveNotes,"saveNotes");
	HX_MARK_MEMBER_NAME(executeModchart,"executeModchart");
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(perfectMode,"perfectMode");
	HX_MARK_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_MARK_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_MARK_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_MARK_MEMBER_NAME(songTime,"songTime");
	HX_MARK_MEMBER_NAME(songStarted,"songStarted");
	HX_MARK_MEMBER_NAME(debugNum,"debugNum");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(nps,"nps");
	HX_MARK_MEMBER_NAME(maxNPS,"maxNPS");
	HX_MARK_MEMBER_NAME(endingSong,"endingSong");
	HX_MARK_MEMBER_NAME(hits,"hits");
	HX_MARK_MEMBER_NAME(offsetTest,"offsetTest");
	HX_MARK_MEMBER_NAME(timeShown,"timeShown");
	HX_MARK_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_MARK_MEMBER_NAME(upHold,"upHold");
	HX_MARK_MEMBER_NAME(downHold,"downHold");
	HX_MARK_MEMBER_NAME(rightHold,"rightHold");
	HX_MARK_MEMBER_NAME(leftHold,"leftHold");
	HX_MARK_MEMBER_NAME(mashing,"mashing");
	HX_MARK_MEMBER_NAME(mashViolations,"mashViolations");
	HX_MARK_MEMBER_NAME(etternaModeScore,"etternaModeScore");
	HX_MARK_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_MARK_MEMBER_NAME(trainMoving,"trainMoving");
	HX_MARK_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_MARK_MEMBER_NAME(trainCars,"trainCars");
	HX_MARK_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_MARK_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_MARK_MEMBER_NAME(startedMoving,"startedMoving");
	HX_MARK_MEMBER_NAME(danced,"danced");
	HX_MARK_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_MARK_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_MARK_MEMBER_NAME(curLight,"curLight");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mcontrols,"mcontrols");
	HX_VISIT_MEMBER_NAME(halloweenLevel,"halloweenLevel");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(kadeEngineWatermark,"kadeEngineWatermark");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(isaakPreload,"isaakPreload");
	HX_VISIT_MEMBER_NAME(unknown,"unknown");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(accuracy,"accuracy");
	HX_VISIT_MEMBER_NAME(accuracyDefault,"accuracyDefault");
	HX_VISIT_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_VISIT_MEMBER_NAME(totalNotesHitDefault,"totalNotesHitDefault");
	HX_VISIT_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_VISIT_MEMBER_NAME(ss,"ss");
	HX_VISIT_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(shakeEffect,"shakeEffect");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_VISIT_MEMBER_NAME(currentFrames,"currentFrames");
	HX_VISIT_MEMBER_NAME(dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(halloweenBG,"halloweenBG");
	HX_VISIT_MEMBER_NAME(isHalloween,"isHalloween");
	HX_VISIT_MEMBER_NAME(phillyCityLights,"phillyCityLights");
	HX_VISIT_MEMBER_NAME(phillyTrain,"phillyTrain");
	HX_VISIT_MEMBER_NAME(trainSound,"trainSound");
	HX_VISIT_MEMBER_NAME(limo,"limo");
	HX_VISIT_MEMBER_NAME(grpLimoDancers,"grpLimoDancers");
	HX_VISIT_MEMBER_NAME(fastCar,"fastCar");
	HX_VISIT_MEMBER_NAME(songName,"songName");
	HX_VISIT_MEMBER_NAME(upperBoppers,"upperBoppers");
	HX_VISIT_MEMBER_NAME(bottomBoppers,"bottomBoppers");
	HX_VISIT_MEMBER_NAME(santa,"santa");
	HX_VISIT_MEMBER_NAME(holylight,"holylight");
	HX_VISIT_MEMBER_NAME(staticlol,"staticlol");
	HX_VISIT_MEMBER_NAME(fc,"fc");
	HX_VISIT_MEMBER_NAME(bgGirls,"bgGirls");
	HX_VISIT_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_VISIT_MEMBER_NAME(talking,"talking");
	HX_VISIT_MEMBER_NAME(songScore,"songScore");
	HX_VISIT_MEMBER_NAME(songScoreDef,"songScoreDef");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(replayTxt,"replayTxt");
	HX_VISIT_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_VISIT_MEMBER_NAME(funneEffect,"funneEffect");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_VISIT_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_VISIT_MEMBER_NAME(botPlayState,"botPlayState");
	HX_VISIT_MEMBER_NAME(saveNotes,"saveNotes");
	HX_VISIT_MEMBER_NAME(executeModchart,"executeModchart");
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(perfectMode,"perfectMode");
	HX_VISIT_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_VISIT_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_VISIT_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_VISIT_MEMBER_NAME(songTime,"songTime");
	HX_VISIT_MEMBER_NAME(songStarted,"songStarted");
	HX_VISIT_MEMBER_NAME(debugNum,"debugNum");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(nps,"nps");
	HX_VISIT_MEMBER_NAME(maxNPS,"maxNPS");
	HX_VISIT_MEMBER_NAME(endingSong,"endingSong");
	HX_VISIT_MEMBER_NAME(hits,"hits");
	HX_VISIT_MEMBER_NAME(offsetTest,"offsetTest");
	HX_VISIT_MEMBER_NAME(timeShown,"timeShown");
	HX_VISIT_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_VISIT_MEMBER_NAME(upHold,"upHold");
	HX_VISIT_MEMBER_NAME(downHold,"downHold");
	HX_VISIT_MEMBER_NAME(rightHold,"rightHold");
	HX_VISIT_MEMBER_NAME(leftHold,"leftHold");
	HX_VISIT_MEMBER_NAME(mashing,"mashing");
	HX_VISIT_MEMBER_NAME(mashViolations,"mashViolations");
	HX_VISIT_MEMBER_NAME(etternaModeScore,"etternaModeScore");
	HX_VISIT_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_VISIT_MEMBER_NAME(trainMoving,"trainMoving");
	HX_VISIT_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_VISIT_MEMBER_NAME(trainCars,"trainCars");
	HX_VISIT_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_VISIT_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_VISIT_MEMBER_NAME(startedMoving,"startedMoving");
	HX_VISIT_MEMBER_NAME(danced,"danced");
	HX_VISIT_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_VISIT_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_VISIT_MEMBER_NAME(curLight,"curLight");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ss") ) { return ::hx::Val( ss ); }
		if (HX_FIELD_EQ(inName,"fc") ) { return ::hx::Val( fc ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"nps") ) { return ::hx::Val( nps ); }
		if (HX_FIELD_EQ(inName,"fly") ) { return ::hx::Val( fly_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"limo") ) { return ::hx::Val( limo ); }
		if (HX_FIELD_EQ(inName,"hits") ) { return ::hx::Val( hits ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		if (HX_FIELD_EQ(inName,"santa") ) { return ::hx::Val( santa ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"maxNPS") ) { return ::hx::Val( maxNPS ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"upHold") ) { return ::hx::Val( upHold ); }
		if (HX_FIELD_EQ(inName,"danced") ) { return ::hx::Val( danced ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"unknown") ) { return ::hx::Val( unknown ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"fastCar") ) { return ::hx::Val( fastCar ); }
		if (HX_FIELD_EQ(inName,"bgGirls") ) { return ::hx::Val( bgGirls ); }
		if (HX_FIELD_EQ(inName,"talking") ) { return ::hx::Val( talking ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyShit") ) { return ::hx::Val( keyShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"mashing") ) { return ::hx::Val( mashing ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { return ::hx::Val( accuracy ); }
		if (HX_FIELD_EQ(inName,"dialogue") ) { return ::hx::Val( dialogue ); }
		if (HX_FIELD_EQ(inName,"songName") ) { return ::hx::Val( songName ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"songTime") ) { return ::hx::Val( songTime ); }
		if (HX_FIELD_EQ(inName,"debugNum") ) { return ::hx::Val( debugNum ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"downHold") ) { return ::hx::Val( downHold ); }
		if (HX_FIELD_EQ(inName,"leftHold") ) { return ::hx::Val( leftHold ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		if (HX_FIELD_EQ(inName,"curLight") ) { return ::hx::Val( curLight ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mcontrols") ) { return ::hx::Val( mcontrols ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"holylight") ) { return ::hx::Val( holylight ); }
		if (HX_FIELD_EQ(inName,"staticlol") ) { return ::hx::Val( staticlol ); }
		if (HX_FIELD_EQ(inName,"songScore") ) { return ::hx::Val( songScore ); }
		if (HX_FIELD_EQ(inName,"replayTxt") ) { return ::hx::Val( replayTxt ); }
		if (HX_FIELD_EQ(inName,"saveNotes") ) { return ::hx::Val( saveNotes ); }
		if (HX_FIELD_EQ(inName,"addObject") ) { return ::hx::Val( addObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"timeShown") ) { return ::hx::Val( timeShown ); }
		if (HX_FIELD_EQ(inName,"rightHold") ) { return ::hx::Val( rightHold ); }
		if (HX_FIELD_EQ(inName,"noteCheck") ) { return ::hx::Val( noteCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainCars") ) { return ::hx::Val( trainCars ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"trainSound") ) { return ::hx::Val( trainSound ); }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { return ::hx::Val( wiggleShit ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { return ::hx::Val( luaWiggles ); }
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"tweenCamIn") ) { return ::hx::Val( tweenCamIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"endingSong") ) { return ::hx::Val( endingSong ); }
		if (HX_FIELD_EQ(inName,"offsetTest") ) { return ::hx::Val( offsetTest ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainStart") ) { return ::hx::Val( trainStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainReset") ) { return ::hx::Val( trainReset_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { return ::hx::Val( totalPlayed ); }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { return ::hx::Val( healthBarBG ); }
		if (HX_FIELD_EQ(inName,"shakeEffect") ) { return ::hx::Val( shakeEffect ); }
		if (HX_FIELD_EQ(inName,"halloweenBG") ) { return ::hx::Val( halloweenBG ); }
		if (HX_FIELD_EQ(inName,"isHalloween") ) { return ::hx::Val( isHalloween ); }
		if (HX_FIELD_EQ(inName,"phillyTrain") ) { return ::hx::Val( phillyTrain ); }
		if (HX_FIELD_EQ(inName,"funneEffect") ) { return ::hx::Val( funneEffect ); }
		if (HX_FIELD_EQ(inName,"schoolIntro") ) { return ::hx::Val( schoolIntro_dyn() ); }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { return ::hx::Val( perfectMode ); }
		if (HX_FIELD_EQ(inName,"songStarted") ) { return ::hx::Val( songStarted ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { return ::hx::Val( trainMoving ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"isaakPreload") ) { return ::hx::Val( isaakPreload ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"upperBoppers") ) { return ::hx::Val( upperBoppers ); }
		if (HX_FIELD_EQ(inName,"songScoreDef") ) { return ::hx::Val( songScoreDef ); }
		if (HX_FIELD_EQ(inName,"botPlayState") ) { return ::hx::Val( botPlayState ); }
		if (HX_FIELD_EQ(inName,"removeObject") ) { return ::hx::Val( removeObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"NearlyEquals") ) { return ::hx::Val( NearlyEquals_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetFastCar") ) { return ::hx::Val( resetFastCar_dyn() ); }
		if (HX_FIELD_EQ(inName,"fastCarDrive") ) { return ::hx::Val( fastCarDrive_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { return ::hx::Val( totalNotesHit ); }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { return ::hx::Val( notesHitArray ); }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { return ::hx::Val( currentFrames ); }
		if (HX_FIELD_EQ(inName,"bottomBoppers") ) { return ::hx::Val( bottomBoppers ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"getKeyPresses") ) { return ::hx::Val( getKeyPresses_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { return ::hx::Val( trainCooldown ); }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { return ::hx::Val( startedMoving ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"halloweenLevel") ) { return ::hx::Val( halloweenLevel ); }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"grpLimoDancers") ) { return ::hx::Val( grpLimoDancers ); }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { return ::hx::Val( defaultCamZoom ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateAccuracy") ) { return ::hx::Val( updateAccuracy_dyn() ); }
		if (HX_FIELD_EQ(inName,"mashViolations") ) { return ::hx::Val( mashViolations ); }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { return ::hx::Val( trainFinishing ); }
		if (HX_FIELD_EQ(inName,"updateTrainPos") ) { return ::hx::Val( updateTrainPos_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"accuracyDefault") ) { return ::hx::Val( accuracyDefault ); }
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { return ::hx::Val( songPositionBar ); }
		if (HX_FIELD_EQ(inName,"executeModchart") ) { return ::hx::Val( executeModchart ); }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { return ::hx::Val( fastCarCanDrive ); }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { return ::hx::Val( lightningOffset ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"phillyCityLights") ) { return ::hx::Val( phillyCityLights ); }
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { return ::hx::Val( triggeredAlready ); }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		if (HX_FIELD_EQ(inName,"etternaModeScore") ) { return ::hx::Val( etternaModeScore ); }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { return ::hx::Val( trainFrameTiming ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { return ::hx::Val( allowedToHeadbang ); }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { return ::hx::Val( previousFrameTime ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { return ::hx::Val( currentTimingShown ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"kadeEngineWatermark") ) { return ::hx::Val( kadeEngineWatermark ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeShit") ) { return ::hx::Val( lightningStrikeShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { return ::hx::Val( lightningStrikeBeat ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalNotesHitDefault") ) { return ::hx::Val( totalNotesHitDefault ); }
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { return ::hx::Val( lastReportedPlayheadPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { outValue = ( gf ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"rep") ) { outValue = ( rep ); return true; }
		if (HX_FIELD_EQ(inName,"dad") ) { outValue = ( dad ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { outValue = ( bads ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shits") ) { outValue = ( shits ); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { outValue = ( goods ); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { outValue = ( sicks ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { outValue = ( misses ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadRep") ) { outValue = ( loadRep ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"curStage") ) { outValue = ( curStage ); return true; }
		if (HX_FIELD_EQ(inName,"weekSong") ) { outValue = ( weekSong ); return true; }
		if (HX_FIELD_EQ(inName,"theFunne") ) { outValue = ( theFunne ); return true; }
		if (HX_FIELD_EQ(inName,"songRate") ) { outValue = ( songRate ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { outValue = ( songPosBG ); return true; }
		if (HX_FIELD_EQ(inName,"noteBools") ) { outValue = ( noteBools ); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { outValue = ( boyfriend ); return true; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { outValue = ( cpuStrums ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { outValue = ( songPosBar ); return true; }
		if (HX_FIELD_EQ(inName,"repPresses") ) { outValue = ( repPresses ); return true; }
		if (HX_FIELD_EQ(inName,"songOffset") ) { outValue = ( songOffset ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		if (HX_FIELD_EQ(inName,"repReleases") ) { outValue = ( repReleases ); return true; }
		if (HX_FIELD_EQ(inName,"luaModchart") ) { outValue = ( luaModchart ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { outValue = ( playerStrums ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"offsetTesting") ) { outValue = ( offsetTesting ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrently") ) { outValue = ( timeCurrently ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { outValue = ( strumLineNotes ); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrentlyR") ) { outValue = ( timeCurrentlyR ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ss") ) { ss=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fc") ) { fc=inValue.Cast< bool >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"nps") ) { nps=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"limo") ) { limo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hits") ) { hits=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"santa") ) { santa=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxNPS") ) { maxNPS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upHold") ) { upHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danced") ) { danced=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"unknown") ) { unknown=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastCar") ) { fastCar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgGirls") ) { bgGirls=inValue.Cast<  ::BackgroundGirls >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talking") ) { talking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mashing") ) { mashing=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { accuracy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songName") ) { songName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTime") ) { songTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugNum") ) { debugNum=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downHold") ) { downHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftHold") ) { leftHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curLight") ) { curLight=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mcontrols") ) { mcontrols=inValue.Cast<  ::ui::Mobilecontrols >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holylight") ) { holylight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"staticlol") ) { staticlol=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"replayTxt") ) { replayTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveNotes") ) { saveNotes=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeShown") ) { timeShown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightHold") ) { rightHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCars") ) { trainCars=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainSound") ) { trainSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { wiggleShit=inValue.Cast<  ::WiggleEffect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { luaWiggles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endingSong") ) { endingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetTest") ) { offsetTest=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { totalPlayed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { healthBarBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shakeEffect") ) { shakeEffect=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"halloweenBG") ) { halloweenBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isHalloween") ) { isHalloween=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"phillyTrain") ) { phillyTrain=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"funneEffect") ) { funneEffect=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { perfectMode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songStarted") ) { songStarted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { trainMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isaakPreload") ) { isaakPreload=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upperBoppers") ) { upperBoppers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScoreDef") ) { songScoreDef=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botPlayState") ) { botPlayState=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { totalNotesHit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { notesHitArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { currentFrames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomBoppers") ) { bottomBoppers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { trainCooldown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { startedMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"halloweenLevel") ) { halloweenLevel=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpLimoDancers") ) { grpLimoDancers=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { defaultCamZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mashViolations") ) { mashViolations=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { trainFinishing=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"accuracyDefault") ) { accuracyDefault=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { songPositionBar=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"executeModchart") ) { executeModchart=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { fastCarCanDrive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { lightningOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"phillyCityLights") ) { phillyCityLights=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { triggeredAlready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"etternaModeScore") ) { etternaModeScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { trainFrameTiming=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { allowedToHeadbang=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { previousFrameTime=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { currentTimingShown=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"kadeEngineWatermark") ) { kadeEngineWatermark=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { lightningStrikeBeat=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalNotesHitDefault") ) { totalNotesHitDefault=inValue.Cast< Float >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { lastReportedPlayheadPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"rep") ) { rep=ioValue.Cast<  ::Replay >(); return true; }
		if (HX_FIELD_EQ(inName,"dad") ) { dad=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { bads=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shits") ) { shits=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { goods=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { sicks=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { misses=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadRep") ) { loadRep=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::PlayState >(); return true; }
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"weekSong") ) { weekSong=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"theFunne") ) { theFunne=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"songRate") ) { songRate=ioValue.Cast< Float >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { songPosBG=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		if (HX_FIELD_EQ(inName,"noteBools") ) { noteBools=ioValue.Cast< ::Array< bool > >(); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=ioValue.Cast<  ::Boyfriend >(); return true; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { cpuStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { songPosBar=ioValue.Cast<  ::flixel::ui::FlxBar >(); return true; }
		if (HX_FIELD_EQ(inName,"repPresses") ) { repPresses=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songOffset") ) { songOffset=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"repReleases") ) { repReleases=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"luaModchart") ) { luaModchart=ioValue.Cast<  ::ModchartState >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		if (HX_FIELD_EQ(inName,"offsetTesting") ) { offsetTesting=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrently") ) { timeCurrently=ioValue.Cast< Float >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrentlyR") ) { timeCurrentlyR=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mcontrols",e3,3b,86,08));
	outFields->push(HX_("halloweenLevel",b7,ca,23,07));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("kadeEngineWatermark",ab,82,ba,66));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("isaakPreload",e8,7b,c8,8f));
	outFields->push(HX_("unknown",8a,23,7b,e1));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("accuracy",39,06,c5,ff));
	outFields->push(HX_("accuracyDefault",88,23,d8,06));
	outFields->push(HX_("totalNotesHit",76,f4,57,a6));
	outFields->push(HX_("totalNotesHitDefault",eb,26,a4,bd));
	outFields->push(HX_("totalPlayed",37,de,ee,fd));
	outFields->push(HX_("ss",a0,64,00,00));
	outFields->push(HX_("healthBarBG",1c,d8,3b,f4));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("songPositionBar",d5,62,6e,a6));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("shakeEffect",f7,05,e9,d4));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("notesHitArray",a7,0b,f3,bd));
	outFields->push(HX_("currentFrames",bf,30,e2,8f));
	outFields->push(HX_("dialogue",18,2d,94,a7));
	outFields->push(HX_("halloweenBG",92,b2,88,5c));
	outFields->push(HX_("isHalloween",43,72,b9,2e));
	outFields->push(HX_("phillyCityLights",30,e0,12,1f));
	outFields->push(HX_("phillyTrain",80,9b,65,bb));
	outFields->push(HX_("trainSound",e7,b3,e5,da));
	outFields->push(HX_("limo",1f,17,b3,47));
	outFields->push(HX_("grpLimoDancers",70,18,93,51));
	outFields->push(HX_("fastCar",d8,f2,1f,de));
	outFields->push(HX_("songName",c0,d0,d7,36));
	outFields->push(HX_("upperBoppers",37,47,71,21));
	outFields->push(HX_("bottomBoppers",ce,2c,ba,6e));
	outFields->push(HX_("santa",8d,45,86,77));
	outFields->push(HX_("holylight",02,77,2b,e0));
	outFields->push(HX_("staticlol",9b,18,2b,87));
	outFields->push(HX_("fc",3d,59,00,00));
	outFields->push(HX_("bgGirls",92,16,2b,41));
	outFields->push(HX_("wiggleShit",0b,07,40,33));
	outFields->push(HX_("talking",36,57,a8,16));
	outFields->push(HX_("songScore",3d,bb,53,a8));
	outFields->push(HX_("songScoreDef",88,1a,f9,d0));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("replayTxt",89,f1,6f,0a));
	outFields->push(HX_("defaultCamZoom",01,50,2a,0b));
	outFields->push(HX_("funneEffect",67,55,3f,6f));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("triggeredAlready",c1,04,84,a5));
	outFields->push(HX_("allowedToHeadbang",bb,a8,e9,48));
	outFields->push(HX_("botPlayState",76,4c,39,74));
	outFields->push(HX_("saveNotes",c4,e3,77,2e));
	outFields->push(HX_("executeModchart",31,4a,80,b8));
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("perfectMode",10,4f,4c,f3));
	outFields->push(HX_("luaWiggles",90,11,ce,e3));
	outFields->push(HX_("previousFrameTime",a3,ef,a7,c2));
	outFields->push(HX_("lastReportedPlayheadPosition",86,66,7f,37));
	outFields->push(HX_("songTime",82,2a,d5,3a));
	outFields->push(HX_("songStarted",ec,81,a7,ed));
	outFields->push(HX_("debugNum",b3,39,d8,90));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("nps",f1,d9,53,00));
	outFields->push(HX_("maxNPS",ad,a9,51,be));
	outFields->push(HX_("endingSong",5c,73,d7,67));
	outFields->push(HX_("hits",c0,42,0e,45));
	outFields->push(HX_("offsetTest",85,51,11,49));
	outFields->push(HX_("timeShown",84,5d,18,31));
	outFields->push(HX_("currentTimingShown",2e,56,ba,1d));
	outFields->push(HX_("upHold",3a,25,8e,74));
	outFields->push(HX_("downHold",c1,c6,fa,79));
	outFields->push(HX_("rightHold",3b,1f,d9,af));
	outFields->push(HX_("leftHold",e6,0c,0e,4c));
	outFields->push(HX_("mashing",99,83,64,f9));
	outFields->push(HX_("mashViolations",77,15,e1,83));
	outFields->push(HX_("etternaModeScore",aa,02,79,42));
	outFields->push(HX_("fastCarCanDrive",d2,f1,13,ee));
	outFields->push(HX_("trainMoving",76,00,99,48));
	outFields->push(HX_("trainFrameTiming",af,67,10,1b));
	outFields->push(HX_("trainCars",c7,61,9c,4d));
	outFields->push(HX_("trainFinishing",87,15,8c,24));
	outFields->push(HX_("trainCooldown",93,a3,58,0c));
	outFields->push(HX_("startedMoving",af,76,97,fb));
	outFields->push(HX_("danced",d1,49,8f,1e));
	outFields->push(HX_("lightningStrikeBeat",72,e2,3d,b6));
	outFields->push(HX_("lightningOffset",3d,a8,e5,e6));
	outFields->push(HX_("curLight",36,8b,aa,bc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::Mobilecontrols */ ,(int)offsetof(PlayState_obj,mcontrols),HX_("mcontrols",e3,3b,86,08)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,halloweenLevel),HX_("halloweenLevel",b7,ca,23,07)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,kadeEngineWatermark),HX_("kadeEngineWatermark",ab,82,ba,66)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,isaakPreload),HX_("isaakPreload",e8,7b,c8,8f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,unknown),HX_("unknown",8a,23,7b,e1)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracy),HX_("accuracy",39,06,c5,ff)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracyDefault),HX_("accuracyDefault",88,23,d8,06)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHit),HX_("totalNotesHit",76,f4,57,a6)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHitDefault),HX_("totalNotesHitDefault",eb,26,a4,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,totalPlayed),HX_("totalPlayed",37,de,ee,fd)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,ss),HX_("ss",a0,64,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,healthBarBG),HX_("healthBarBG",1c,d8,3b,f4)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songPositionBar),HX_("songPositionBar",d5,62,6e,a6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,shakeEffect),HX_("shakeEffect",f7,05,e9,d4)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,notesHitArray),HX_("notesHitArray",a7,0b,f3,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentFrames),HX_("currentFrames",bf,30,e2,8f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dialogue),HX_("dialogue",18,2d,94,a7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,halloweenBG),HX_("halloweenBG",92,b2,88,5c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,isHalloween),HX_("isHalloween",43,72,b9,2e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,phillyCityLights),HX_("phillyCityLights",30,e0,12,1f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,phillyTrain),HX_("phillyTrain",80,9b,65,bb)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,trainSound),HX_("trainSound",e7,b3,e5,da)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,limo),HX_("limo",1f,17,b3,47)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,grpLimoDancers),HX_("grpLimoDancers",70,18,93,51)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,fastCar),HX_("fastCar",d8,f2,1f,de)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,songName),HX_("songName",c0,d0,d7,36)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,upperBoppers),HX_("upperBoppers",37,47,71,21)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,bottomBoppers),HX_("bottomBoppers",ce,2c,ba,6e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,santa),HX_("santa",8d,45,86,77)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,holylight),HX_("holylight",02,77,2b,e0)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,staticlol),HX_("staticlol",9b,18,2b,87)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fc),HX_("fc",3d,59,00,00)},
	{::hx::fsObject /*  ::BackgroundGirls */ ,(int)offsetof(PlayState_obj,bgGirls),HX_("bgGirls",92,16,2b,41)},
	{::hx::fsObject /*  ::WiggleEffect */ ,(int)offsetof(PlayState_obj,wiggleShit),HX_("wiggleShit",0b,07,40,33)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,talking),HX_("talking",36,57,a8,16)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScore),HX_("songScore",3d,bb,53,a8)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScoreDef),HX_("songScoreDef",88,1a,f9,d0)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,replayTxt),HX_("replayTxt",89,f1,6f,0a)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,defaultCamZoom),HX_("defaultCamZoom",01,50,2a,0b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,funneEffect),HX_("funneEffect",67,55,3f,6f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,triggeredAlready),HX_("triggeredAlready",c1,04,84,a5)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allowedToHeadbang),HX_("allowedToHeadbang",bb,a8,e9,48)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,botPlayState),HX_("botPlayState",76,4c,39,74)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,saveNotes),HX_("saveNotes",c4,e3,77,2e)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,executeModchart),HX_("executeModchart",31,4a,80,b8)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,perfectMode),HX_("perfectMode",10,4f,4c,f3)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,luaWiggles),HX_("luaWiggles",90,11,ce,e3)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,previousFrameTime),HX_("previousFrameTime",a3,ef,a7,c2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastReportedPlayheadPosition),HX_("lastReportedPlayheadPosition",86,66,7f,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songTime),HX_("songTime",82,2a,d5,3a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,songStarted),HX_("songStarted",ec,81,a7,ed)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,debugNum),HX_("debugNum",b3,39,d8,90)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,nps),HX_("nps",f1,d9,53,00)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,maxNPS),HX_("maxNPS",ad,a9,51,be)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endingSong),HX_("endingSong",5c,73,d7,67)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,hits),HX_("hits",c0,42,0e,45)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,offsetTest),HX_("offsetTest",85,51,11,49)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,timeShown),HX_("timeShown",84,5d,18,31)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,currentTimingShown),HX_("currentTimingShown",2e,56,ba,1d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,upHold),HX_("upHold",3a,25,8e,74)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,downHold),HX_("downHold",c1,c6,fa,79)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,rightHold),HX_("rightHold",3b,1f,d9,af)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,leftHold),HX_("leftHold",e6,0c,0e,4c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,mashing),HX_("mashing",99,83,64,f9)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,mashViolations),HX_("mashViolations",77,15,e1,83)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,etternaModeScore),HX_("etternaModeScore",aa,02,79,42)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fastCarCanDrive),HX_("fastCarCanDrive",d2,f1,13,ee)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainMoving),HX_("trainMoving",76,00,99,48)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,trainFrameTiming),HX_("trainFrameTiming",af,67,10,1b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCars),HX_("trainCars",c7,61,9c,4d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainFinishing),HX_("trainFinishing",87,15,8c,24)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCooldown),HX_("trainCooldown",93,a3,58,0c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedMoving),HX_("startedMoving",af,76,97,fb)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,danced),HX_("danced",d1,49,8f,1e)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningStrikeBeat),HX_("lightningStrikeBeat",72,e2,3d,b6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningOffset),HX_("lightningOffset",3d,a8,e5,e6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curLight),HX_("curLight",36,8b,aa,bc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::PlayState */ ,(void *) &PlayState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsString,(void *) &PlayState_obj::curStage,HX_("curStage",1e,65,b9,cb)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsInt,(void *) &PlayState_obj::weekSong,HX_("weekSong",e9,b9,87,33)},
	{::hx::fsInt,(void *) &PlayState_obj::shits,HX_("shits",b3,f8,22,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::bads,HX_("bads",0e,db,10,41)},
	{::hx::fsInt,(void *) &PlayState_obj::goods,HX_("goods",96,00,f9,97)},
	{::hx::fsInt,(void *) &PlayState_obj::sicks,HX_("sicks",f5,99,c7,7c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &PlayState_obj::songPosBG,HX_("songPosBG",44,6c,11,f6)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(void *) &PlayState_obj::songPosBar,HX_("songPosBar",54,66,2d,59)},
	{::hx::fsObject /*  ::Replay */ ,(void *) &PlayState_obj::rep,HX_("rep",5d,d9,56,00)},
	{::hx::fsBool,(void *) &PlayState_obj::loadRep,HX_("loadRep",d7,52,e1,08)},
	{::hx::fsObject /* ::Array< bool > */ ,(void *) &PlayState_obj::noteBools,HX_("noteBools",b7,6b,85,f4)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::dad,HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::gf,HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::Boyfriend */ ,(void *) &PlayState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::strumLineNotes,HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::playerStrums,HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::cpuStrums,HX_("cpuStrums",52,86,8a,e0)},
	{::hx::fsInt,(void *) &PlayState_obj::misses,HX_("misses",6a,62,54,56)},
	{::hx::fsBool,(void *) &PlayState_obj::offsetTesting,HX_("offsetTesting",7d,bc,10,da)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsFloat,(void *) &PlayState_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{::hx::fsBool,(void *) &PlayState_obj::theFunne,HX_("theFunne",05,d0,55,cd)},
	{::hx::fsInt,(void *) &PlayState_obj::repPresses,HX_("repPresses",d4,b6,b1,e7)},
	{::hx::fsInt,(void *) &PlayState_obj::repReleases,HX_("repReleases",49,43,a4,da)},
	{::hx::fsFloat,(void *) &PlayState_obj::timeCurrently,HX_("timeCurrently",39,e5,d2,31)},
	{::hx::fsFloat,(void *) &PlayState_obj::timeCurrentlyR,HX_("timeCurrentlyR",f9,ac,b5,66)},
	{::hx::fsFloat,(void *) &PlayState_obj::songOffset,HX_("songOffset",48,3d,c4,bb)},
	{::hx::fsObject /*  ::ModchartState */ ,(void *) &PlayState_obj::luaModchart,HX_("luaModchart",b4,54,b5,aa)},
	{::hx::fsFloat,(void *) &PlayState_obj::songRate,HX_("songRate",55,b1,7c,39)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("mcontrols",e3,3b,86,08),
	HX_("halloweenLevel",b7,ca,23,07),
	HX_("songLength",9b,3a,8c,fa),
	HX_("kadeEngineWatermark",ab,82,ba,66),
	HX_("vocals",5e,10,51,59),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSection",45,58,c1,68),
	HX_("camFollow",e0,6e,47,22),
	HX_("isaakPreload",e8,7b,c8,8f),
	HX_("unknown",8a,23,7b,e1),
	HX_("camZooming",60,3b,bf,d6),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("accuracy",39,06,c5,ff),
	HX_("accuracyDefault",88,23,d8,06),
	HX_("totalNotesHit",76,f4,57,a6),
	HX_("totalNotesHitDefault",eb,26,a4,bd),
	HX_("totalPlayed",37,de,ee,fd),
	HX_("ss",a0,64,00,00),
	HX_("healthBarBG",1c,d8,3b,f4),
	HX_("healthBar",97,8a,92,42),
	HX_("songPositionBar",d5,62,6e,a6),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("shakeEffect",f7,05,e9,d4),
	HX_("startingSong",b5,31,61,33),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("notesHitArray",a7,0b,f3,bd),
	HX_("currentFrames",bf,30,e2,8f),
	HX_("dialogue",18,2d,94,a7),
	HX_("halloweenBG",92,b2,88,5c),
	HX_("isHalloween",43,72,b9,2e),
	HX_("phillyCityLights",30,e0,12,1f),
	HX_("phillyTrain",80,9b,65,bb),
	HX_("trainSound",e7,b3,e5,da),
	HX_("limo",1f,17,b3,47),
	HX_("grpLimoDancers",70,18,93,51),
	HX_("fastCar",d8,f2,1f,de),
	HX_("songName",c0,d0,d7,36),
	HX_("upperBoppers",37,47,71,21),
	HX_("bottomBoppers",ce,2c,ba,6e),
	HX_("santa",8d,45,86,77),
	HX_("holylight",02,77,2b,e0),
	HX_("staticlol",9b,18,2b,87),
	HX_("fc",3d,59,00,00),
	HX_("bgGirls",92,16,2b,41),
	HX_("wiggleShit",0b,07,40,33),
	HX_("talking",36,57,a8,16),
	HX_("songScore",3d,bb,53,a8),
	HX_("songScoreDef",88,1a,f9,d0),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("replayTxt",89,f1,6f,0a),
	HX_("defaultCamZoom",01,50,2a,0b),
	HX_("funneEffect",67,55,3f,6f),
	HX_("inCutscene",8f,21,01,56),
	HX_("triggeredAlready",c1,04,84,a5),
	HX_("allowedToHeadbang",bb,a8,e9,48),
	HX_("botPlayState",76,4c,39,74),
	HX_("saveNotes",c4,e3,77,2e),
	HX_("executeModchart",31,4a,80,b8),
	HX_("addObject",c0,b3,63,cd),
	HX_("removeObject",23,1a,6d,84),
	HX_("create",fc,66,0f,7c),
	HX_("schoolIntro",58,5d,50,47),
	HX_("startTimer",03,98,4c,2c),
	HX_("perfectMode",10,4f,4c,f3),
	HX_("luaWiggles",90,11,ce,e3),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("previousFrameTime",a3,ef,a7,c2),
	HX_("lastReportedPlayheadPosition",86,66,7f,37),
	HX_("songTime",82,2a,d5,3a),
	HX_("songStarted",ec,81,a7,ed),
	HX_("startSong",57,9d,4b,05),
	HX_("debugNum",b3,39,d8,90),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("sortByShit",35,ff,86,6e),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("tweenCamIn",69,37,60,f8),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("paused",ae,40,84,ef),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("nps",f1,d9,53,00),
	HX_("maxNPS",ad,a9,51,be),
	HX_("update",09,86,05,87),
	HX_("endSong",50,dd,7c,2e),
	HX_("endingSong",5c,73,d7,67),
	HX_("hits",c0,42,0e,45),
	HX_("offsetTest",85,51,11,49),
	HX_("timeShown",84,5d,18,31),
	HX_("currentTimingShown",2e,56,ba,1d),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("NearlyEquals",b4,8d,40,69),
	HX_("upHold",3a,25,8e,74),
	HX_("downHold",c1,c6,fa,79),
	HX_("rightHold",3b,1f,d9,af),
	HX_("leftHold",e6,0c,0e,4c),
	HX_("keyShit",ff,40,2c,a6),
	HX_("noteMiss",0e,78,8f,57),
	HX_("updateAccuracy",62,f9,ee,34),
	HX_("fly",73,c4,4d,00),
	HX_("getKeyPresses",08,cf,e0,04),
	HX_("mashing",99,83,64,f9),
	HX_("mashViolations",77,15,e1,83),
	HX_("etternaModeScore",aa,02,79,42),
	HX_("noteCheck",76,e3,43,83),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("fastCarCanDrive",d2,f1,13,ee),
	HX_("resetFastCar",c9,38,fe,4f),
	HX_("fastCarDrive",12,97,d2,be),
	HX_("trainMoving",76,00,99,48),
	HX_("trainFrameTiming",af,67,10,1b),
	HX_("trainCars",c7,61,9c,4d),
	HX_("trainFinishing",87,15,8c,24),
	HX_("trainCooldown",93,a3,58,0c),
	HX_("trainStart",7a,9b,24,de),
	HX_("startedMoving",af,76,97,fb),
	HX_("updateTrainPos",d5,01,38,2b),
	HX_("trainReset",e7,70,e1,40),
	HX_("lightningStrikeShit",bc,d0,7c,c1),
	HX_("danced",d1,49,8f,1e),
	HX_("stepHit",67,ae,41,81),
	HX_("lightningStrikeBeat",72,e2,3d,b6),
	HX_("lightningOffset",3d,a8,e5,e6),
	HX_("beatHit",7d,ea,04,74),
	HX_("curLight",36,8b,aa,bc),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::weekSong,"weekSong");
	HX_MARK_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_MARK_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_MARK_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_MARK_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_MARK_MEMBER_NAME(PlayState_obj::rep,"rep");
	HX_MARK_MEMBER_NAME(PlayState_obj::loadRep,"loadRep");
	HX_MARK_MEMBER_NAME(PlayState_obj::noteBools,"noteBools");
	HX_MARK_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_MARK_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_MARK_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::cpuStrums,"cpuStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_MARK_MEMBER_NAME(PlayState_obj::offsetTesting,"offsetTesting");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::theFunne,"theFunne");
	HX_MARK_MEMBER_NAME(PlayState_obj::repPresses,"repPresses");
	HX_MARK_MEMBER_NAME(PlayState_obj::repReleases,"repReleases");
	HX_MARK_MEMBER_NAME(PlayState_obj::timeCurrently,"timeCurrently");
	HX_MARK_MEMBER_NAME(PlayState_obj::timeCurrentlyR,"timeCurrentlyR");
	HX_MARK_MEMBER_NAME(PlayState_obj::songOffset,"songOffset");
	HX_MARK_MEMBER_NAME(PlayState_obj::luaModchart,"luaModchart");
	HX_MARK_MEMBER_NAME(PlayState_obj::songRate,"songRate");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::weekSong,"weekSong");
	HX_VISIT_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_VISIT_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_VISIT_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_VISIT_MEMBER_NAME(PlayState_obj::rep,"rep");
	HX_VISIT_MEMBER_NAME(PlayState_obj::loadRep,"loadRep");
	HX_VISIT_MEMBER_NAME(PlayState_obj::noteBools,"noteBools");
	HX_VISIT_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_VISIT_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_VISIT_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::cpuStrums,"cpuStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::offsetTesting,"offsetTesting");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::theFunne,"theFunne");
	HX_VISIT_MEMBER_NAME(PlayState_obj::repPresses,"repPresses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::repReleases,"repReleases");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timeCurrently,"timeCurrently");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timeCurrentlyR,"timeCurrentlyR");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songOffset,"songOffset");
	HX_VISIT_MEMBER_NAME(PlayState_obj::luaModchart,"luaModchart");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songRate,"songRate");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("curStage",1e,65,b9,cb),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("weekSong",e9,b9,87,33),
	HX_("shits",b3,f8,22,7c),
	HX_("bads",0e,db,10,41),
	HX_("goods",96,00,f9,97),
	HX_("sicks",f5,99,c7,7c),
	HX_("songPosBG",44,6c,11,f6),
	HX_("songPosBar",54,66,2d,59),
	HX_("rep",5d,d9,56,00),
	HX_("loadRep",d7,52,e1,08),
	HX_("noteBools",b7,6b,85,f4),
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("cpuStrums",52,86,8a,e0),
	HX_("misses",6a,62,54,56),
	HX_("offsetTesting",7d,bc,10,da),
	HX_("campaignScore",22,22,d6,07),
	HX_("daPixelZoom",7c,81,6e,df),
	HX_("theFunne",05,d0,55,cd),
	HX_("repPresses",d4,b6,b1,e7),
	HX_("repReleases",49,43,a4,da),
	HX_("timeCurrently",39,e5,d2,31),
	HX_("timeCurrentlyR",f9,ac,b5,66),
	HX_("songOffset",48,3d,c4,bb),
	HX_("luaModchart",b4,54,b5,aa),
	HX_("songRate",55,b1,7c,39),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_72_boot)
HXDLIN(  72)		instance = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_78_boot)
HXDLIN(  78)		curStage = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_80_boot)
HXDLIN(  80)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_81_boot)
HXDLIN(  81)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_82_boot)
HXDLIN(  82)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_83_boot)
HXDLIN(  83)		storyDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_84_boot)
HXDLIN(  84)		weekSong = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_85_boot)
HXDLIN(  85)		shits = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_86_boot)
HXDLIN(  86)		bads = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_87_boot)
HXDLIN(  87)		goods = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_88_boot)
HXDLIN(  88)		sicks = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_94_boot)
HXDLIN(  94)		loadRep = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_96_boot)
HXDLIN(  96)		noteBools = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_140,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_131_boot)
HXDLIN( 131)		strumLineNotes = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_132_boot)
HXDLIN( 132)		playerStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_133_boot)
HXDLIN( 133)		cpuStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_141_boot)
HXDLIN( 141)		misses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_163_boot)
HXDLIN( 163)		offsetTesting = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_198_boot)
HXDLIN( 198)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_202_boot)
HXDLIN( 202)		daPixelZoom = ((Float)6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_204_boot)
HXDLIN( 204)		theFunne = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_207_boot)
HXDLIN( 207)		repPresses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_208_boot)
HXDLIN( 208)		repReleases = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_210_boot)
HXDLIN( 210)		timeCurrently = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_211_boot)
HXDLIN( 211)		timeCurrentlyR = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_219_boot)
HXDLIN( 219)		songOffset = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1279_boot)
HXDLIN(1279)		luaModchart = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1818_boot)
HXDLIN(1818)		songRate = ((Float)1.5);
            	}
}

