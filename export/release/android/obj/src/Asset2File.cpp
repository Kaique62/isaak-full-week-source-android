// Generated by Haxe 4.2.2
#include <hxcpp.h>

#ifndef INCLUDED_Asset2File
#include <Asset2File.h>
#endif
#ifndef INCLUDED_haxe_crypto_Md5
#include <haxe/crypto/Md5.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f00bbf90a6816611_15_getPath,"Asset2File","getPath",0x2911d4eb,"Asset2File.getPath","Asset2File.hx",15,0x8deb4580)
HX_LOCAL_STACK_FRAME(_hx_pos_f00bbf90a6816611_12_boot,"Asset2File","boot",0x4f69eaa2,"Asset2File.boot","Asset2File.hx",12,0x8deb4580)

void Asset2File_obj::__construct() { }

Dynamic Asset2File_obj::__CreateEmpty() { return new Asset2File_obj; }

void *Asset2File_obj::_hx_vtable = 0;

Dynamic Asset2File_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Asset2File_obj > _hx_result = new Asset2File_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Asset2File_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x20c2b2be;
}

::String Asset2File_obj::path;

::String Asset2File_obj::getPath(::String id,::String __o_ext){
            		::String ext = __o_ext;
            		if (::hx::IsNull(__o_ext)) ext = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_f00bbf90a6816611_15_getPath)
HXLINE(  17)		 ::openfl::utils::ByteArrayData file = ::openfl::utils::Assets_obj::getBytes(id);
HXLINE(  19)		::String md5 = ::haxe::crypto::Md5_obj::encode(::haxe::crypto::Md5_obj::make(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytes(file))->toString());
HXLINE(  21)		if (::sys::FileSystem_obj::exists(((::Asset2File_obj::path + md5) + ext))) {
HXLINE(  22)			return ((::Asset2File_obj::path + md5) + ext);
            		}
HXLINE(  25)		::String _hx_tmp = ((::Asset2File_obj::path + md5) + ext);
HXDLIN(  25)		::sys::io::File_obj::saveBytes(_hx_tmp,::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytes(file));
HXLINE(  27)		return ((::Asset2File_obj::path + md5) + ext);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Asset2File_obj,getPath,return )


Asset2File_obj::Asset2File_obj()
{
}

bool Asset2File_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { outValue = ( path ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
	}
	return false;
}

bool Asset2File_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Asset2File_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Asset2File_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Asset2File_obj::path,HX_("path",a5,e5,51,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Asset2File_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Asset2File_obj::path,"path");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Asset2File_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Asset2File_obj::path,"path");
};

#endif

::hx::Class Asset2File_obj::__mClass;

static ::String Asset2File_obj_sStaticFields[] = {
	HX_("path",a5,e5,51,4a),
	HX_("getPath",5b,95,d4,1c),
	::String(null())
};

void Asset2File_obj::__register()
{
	Asset2File_obj _hx_dummy;
	Asset2File_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Asset2File",fe,8f,ff,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Asset2File_obj::__GetStatic;
	__mClass->mSetStaticField = &Asset2File_obj::__SetStatic;
	__mClass->mMarkFunc = Asset2File_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Asset2File_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Asset2File_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Asset2File_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Asset2File_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Asset2File_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Asset2File_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f00bbf90a6816611_12_boot)
HXDLIN(  12)		path = ::lime::_hx_system::System_obj::get_applicationStorageDirectory();
            	}
}

