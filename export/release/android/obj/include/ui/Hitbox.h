// Generated by Haxe 4.2.2
#ifndef INCLUDED_ui_Hitbox
#define INCLUDED_ui_Hitbox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,ui,FlxButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_text_FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(ui,Hitbox)

namespace ui{


class HXCPP_CLASS_ATTRIBUTES Hitbox_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef Hitbox_obj OBJ_;
		Hitbox_obj();

	public:
		enum { _hx_ClassId = 0x6bd7218c };

		void __construct( ::Dynamic widghtScreen);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.Hitbox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.Hitbox"); }
		static ::hx::ObjectPtr< Hitbox_obj > __new( ::Dynamic widghtScreen);
		static ::hx::ObjectPtr< Hitbox_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic widghtScreen);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Hitbox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Hitbox",b8,61,bc,8b); }

		 ::flixel::group::FlxTypedSpriteGroup hitbox;
		int sizex;
		int screensizey;
		 ::flixel::ui::FlxButton buttonLeft;
		 ::flixel::ui::FlxButton buttonDown;
		 ::flixel::ui::FlxButton buttonUp;
		 ::flixel::ui::FlxButton buttonRight;
		 ::flixel::ui::FlxButton createhitbox(Float X,::String framestring);
		::Dynamic createhitbox_dyn();

		void destroy();

};

} // end namespace ui

#endif /* INCLUDED_ui_Hitbox */ 
