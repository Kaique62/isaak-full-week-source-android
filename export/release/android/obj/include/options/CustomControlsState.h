// Generated by Haxe 4.2.2
#ifndef INCLUDED_options_CustomControlsState
#define INCLUDED_options_CustomControlsState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
HX_DECLARE_CLASS0(Config)
HX_DECLARE_CLASS0(MusicBeatSubstate)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS1(flixel,FlxSubState)
HX_DECLARE_CLASS1(flixel,IFlxBasic)
HX_DECLARE_CLASS1(flixel,IFlxSprite)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIButton)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUITypedButton)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,ICursorPointable)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIButton)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIClickable)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIWidget)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IHasParams)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,ILabeled)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IResizable)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,input,FlxPointer)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS3(flixel,input,touch,FlxTouch)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,ui,FlxButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_text_FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(options,CustomControlsState)
HX_DECLARE_CLASS1(ui,FlxVirtualPad)
HX_DECLARE_CLASS1(ui,Hitbox)

namespace options{


class HXCPP_CLASS_ATTRIBUTES CustomControlsState_obj : public  ::MusicBeatSubstate_obj
{
	public:
		typedef  ::MusicBeatSubstate_obj super;
		typedef CustomControlsState_obj OBJ_;
		CustomControlsState_obj();

	public:
		enum { _hx_ClassId = 0x62344d0c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="options.CustomControlsState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"options.CustomControlsState"); }
		static ::hx::ObjectPtr< CustomControlsState_obj > __new();
		static ::hx::ObjectPtr< CustomControlsState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CustomControlsState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CustomControlsState",2a,b9,bc,ea); }

		 ::ui::FlxVirtualPad _pad;
		 ::ui::Hitbox _hb;
		 ::flixel::addons::ui::FlxUIButton exitbutton;
		 ::flixel::addons::ui::FlxUIButton exportbutton;
		 ::flixel::addons::ui::FlxUIButton importbutton;
		 ::flixel::text::FlxText up_text;
		 ::flixel::text::FlxText down_text;
		 ::flixel::text::FlxText left_text;
		 ::flixel::text::FlxText right_text;
		 ::flixel::text::FlxText inputvari;
		 ::flixel::FlxSprite leftArrow;
		 ::flixel::FlxSprite rightArrow;
		::Array< ::String > controlitems;
		int curSelected;
		bool buttonistouched;
		 ::flixel::ui::FlxButton bindbutton;
		 ::Config config;
		void update(Float elapsed);

		void changeSelection(::hx::Null< int >  change, ::Dynamic forceChange);
		::Dynamic changeSelection_dyn();

		void arrowanimate( ::flixel::input::touch::FlxTouch touch);
		::Dynamic arrowanimate_dyn();

		void trackbutton( ::flixel::input::touch::FlxTouch touch);
		::Dynamic trackbutton_dyn();

		void movebutton( ::flixel::input::touch::FlxTouch touch, ::flixel::ui::FlxButton button);
		::Dynamic movebutton_dyn();

		void setbuttontexts();
		::Dynamic setbuttontexts_dyn();

		void save();
		::Dynamic save_dyn();

		void savecustom();
		::Dynamic savecustom_dyn();

		void loadcustom();
		::Dynamic loadcustom_dyn();

		void resizebuttons( ::ui::FlxVirtualPad vpad, ::Dynamic _hx_int);
		::Dynamic resizebuttons_dyn();

		void savetoclipboard( ::ui::FlxVirtualPad pad);
		::Dynamic savetoclipboard_dyn();

		void loadfromclipboard( ::ui::FlxVirtualPad pad);
		::Dynamic loadfromclipboard_dyn();

		void destroy();

};

} // end namespace options

#endif /* INCLUDED_options_CustomControlsState */ 
